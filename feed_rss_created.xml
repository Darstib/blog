<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>My_blog</title><link>https://darstib.github.io/blog/</link><atom:link href="https://darstib.github.io/blog/feed_rss_created.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/Darstib/blog</docs><language>zh</language> <pubDate>Sun, 31 Mar 2024 08:08:03 -0000</pubDate> <lastBuildDate>Sun, 31 Mar 2024 08:08:03 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.12.1</generator> <item> <title>K way merge algorithm</title> <category>blog</category> <description>&lt;hr&gt;</description><link>https://darstib.github.io/blog/2024/03/23/k-way-merge-algorithm/</link> <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate><source url="https://darstib.github.io/blog/feed_rss_created.xml">My_blog</source><guid isPermaLink="true">https://darstib.github.io/blog/2024/03/23/k-way-merge-algorithm/</guid> </item> <item> <title>change version of GCC in WSL</title> <category>blog</category> <description>&lt;hr&gt;&lt;p&gt;在 FDS 的第一次 project 中，因我和 PR 的同学 gcc 编译器不同导致跑出来的数据不同给我扣了分，所以我打算学习如何在 WSL 中更换 GCC 的版本&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;操作环境：WSL(ubuntu22.04) &amp;amp; vscode&lt;/p&gt;&lt;/blockquote&gt;</description><link>https://darstib.github.io/blog/2024/03/22/change-version-of-gcc-in-wsl/</link> <pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate><source url="https://darstib.github.io/blog/feed_rss_created.xml">My_blog</source><guid isPermaLink="true">https://darstib.github.io/blog/2024/03/22/change-version-of-gcc-in-wsl/</guid> </item> <item> <title>some tips when using Mkdocs for writing</title> <description>&lt;p&gt;在使用 Mkdocs 作博客笔记时，发现其他人的文章有一些比较有意思的格式，美观方便，故学习参考，此处主要记录用法备忘，具体配置请转移至&lt;a href=&#34;https://squidfunk.github.io/mkdocs-material/reference/&#34;&gt;官方文档&lt;/a&gt; 进行查看，我只会给出基本的配置教程；大多数格式都是可以嵌套使用的，文中不会过多提及，请自行探索。&lt;/p&gt;</description><link>https://darstib.github.io/blog/2024/03/19/some-tips-when-using-mkdocs-for-writing/</link> <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><source url="https://darstib.github.io/blog/feed_rss_created.xml">My_blog</source><guid isPermaLink="true">https://darstib.github.io/blog/2024/03/19/some-tips-when-using-mkdocs-for-writing/</guid> </item> <item> <title>Why I connect wifi but can&#39;t use it &amp; how can delete a .iso document when it is used by system？</title> <category>DNS</category> <category>blog</category> <description>&lt;hr&gt;&lt;p&gt;今天碰到两件令我非常着急的事情&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一个是 wifi 连接但是访问网站不可行，电脑自查发现“DNS 服务器未响应”（猜测代理导致）&lt;/li&gt;&lt;li&gt;一个是我在配置 latex 环境时跟着教程打开了.iso 文件，后来想要换 WSL，然后它赖在我的资源管理器不走了，白吃我 6 个 G 硬盘&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;操作系统：windows 11&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;下面是我的解决方法（主要备忘，不一定适用于您的环境）：&lt;/p&gt;</description><link>https://darstib.github.io/blog/2024/03/18/why-i-connect-wifi-but-cant-use-it--how-can-delete-a-iso-document-when-it-is-used-by-system/</link> <pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate><source url="https://darstib.github.io/blog/feed_rss_created.xml">My_blog</source><guid isPermaLink="true">https://darstib.github.io/blog/2024/03/18/why-i-connect-wifi-but-cant-use-it--how-can-delete-a-iso-document-when-it-is-used-by-system/</guid> </item> <item> <title>1 2 learn to use Vim editor</title> <description>&lt;h2&gt;I 为什么学 Vim&lt;/h2&gt;&lt;p&gt;放着好端端的类似于 word 以及像我们现在用的 obsidian 软件不用，为什么要学什么 vim 或者说 Emacs 等类似编辑器呢？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;写作和写代码其实是两项非常不同的活动。当我们编程的时候，会经常在文件间进行切换、阅读、浏览和修改代码，而不是连续编写一大段的文字。因此代码编辑器和文本编辑器是很不同的两种工具（例如微软的 Word 与 Visual Studio Code）。作为程序员，我们大部分时间都花在代码编辑上，所以花点时间掌握某个适合自己的编辑器是非常值得的&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;missing-semester 上是这么说的，我想这类编辑器意义也正是如此；至于为什么是 vim，理由颇多，读者可以自行了解这类编辑器之间的区别，一个参考是 &lt;a href=&#34;https://insights.stackoverflow.com/survey/2019/#development-environments-and-tools&#34;&gt;Stack Overflow 的调查&lt;/a&gt;&lt;/p&gt;</description><link>https://darstib.github.io/blog/2024/03/17/1-2-learn-to-use-vim-editor/</link> <pubDate>Sun, 17 Mar 2024 00:00:00 +0000</pubDate><source url="https://darstib.github.io/blog/feed_rss_created.xml">My_blog</source><guid isPermaLink="true">https://darstib.github.io/blog/2024/03/17/1-2-learn-to-use-vim-editor/</guid> </item> <item> <title>Basic use of logisim</title> <category>blog</category> <description>&lt;hr&gt;&lt;p&gt;对于每一位学习计算机系统或者数字逻辑电路的 zjuer，logisim 是必须使用的，下面将较为详细地介绍其使用方法。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;知识条件：- 安装 logisim-evolution 并学会启动- 清楚基本的概念，如引脚、反相器及对应图标，线路连接原理&lt;/p&gt;&lt;p&gt;实施环境：logisim-evolution-3.8.0-all.jar&lt;/p&gt;&lt;/blockquote&gt;</description><link>https://darstib.github.io/blog/2024/03/16/basic-use-of-logisim/</link> <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate><source url="https://darstib.github.io/blog/feed_rss_created.xml">My_blog</source><guid isPermaLink="true">https://darstib.github.io/blog/2024/03/16/basic-use-of-logisim/</guid> </item> <item> <title>1 1 shell script and basic tools</title> <category>Bash</category> <category>Shell</category> <category>script</category> <category>tool</category> <description>&lt;h2&gt;I Shell 脚本&lt;/h2&gt;&lt;p&gt;Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。由于习惯的原因，简洁起见，本文出现的 &#34;shell 编程&#34; 都是指 shell 脚本编程，不是指开发 shell 自身。&lt;/p&gt;&lt;p&gt;在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 &lt;strong&gt;#!/bin/sh&lt;/strong&gt;，它同样也可以改为 &lt;strong&gt;#!/bin/bash&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;code&gt;#!&lt;/code&gt; 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。&lt;/p&gt;</description><link>https://darstib.github.io/blog/2024/03/16/1-1-shell-script-and-basic-tools/</link> <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate><source url="https://darstib.github.io/blog/feed_rss_created.xml">My_blog</source><guid isPermaLink="true">https://darstib.github.io/blog/2024/03/16/1-1-shell-script-and-basic-tools/</guid> </item> <item> <title>1 0 linux shell</title> <category>Bash</category> <category>Linux</category> <category>MIT</category> <category>Missing-semester</category> <category>Shell</category> <description>&lt;h2&gt;I 前言&lt;/h2&gt;&lt;h3&gt;I.1 什么是 shell?&lt;/h3&gt;&lt;p&gt;shell是操作系统为用户提供交互界面的命令行解释器的统称，例如Windows中的cmd就是一种shell。bash 是其中最流行的一种。bash 是 Bourne Again shell 的简称。&lt;/p&gt;</description><link>https://darstib.github.io/blog/2024/03/15/1-0-linux-shell/</link> <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate><source url="https://darstib.github.io/blog/feed_rss_created.xml">My_blog</source><guid isPermaLink="true">https://darstib.github.io/blog/2024/03/15/1-0-linux-shell/</guid> </item> <item> <title>A fall into the pit, a gain in the wit.</title> <category>blog</category> <category>introduction</category> <description>&lt;hr&gt;&lt;blockquote&gt;&lt;p&gt;A fall into the pit, a gain in the wit.吃一堑，长一智&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;建站过程几多艰辛，有愚蠢的错误，有我认为官方文档有所不足之处……&lt;/p&gt;&lt;p&gt;我将尽可能地将所遇见的错误记录在这里以供参考。&lt;/p&gt;&lt;p&gt;当然，请先阅读官方文档，推荐配合 &lt;strong&gt;沉浸式阅读&lt;/strong&gt; 浏览器插件食用&lt;/p&gt;</description><link>https://darstib.github.io/blog/2024/03/13/a-fall-into-the-pit-a-gain-in-the-wit/</link> <pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate><source url="https://darstib.github.io/blog/feed_rss_created.xml">My_blog</source><guid isPermaLink="true">https://darstib.github.io/blog/2024/03/13/a-fall-into-the-pit-a-gain-in-the-wit/</guid> </item> </channel></rss>