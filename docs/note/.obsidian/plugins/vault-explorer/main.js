/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/js-logger/src/logger.js
var require_logger = __commonJS({
  "node_modules/js-logger/src/logger.js"(exports, module2) {
    (function(global2) {
      "use strict";
      var Logger15 = {};
      Logger15.VERSION = "1.6.1";
      var logHandler;
      var contextualLoggersByNameMap = {};
      var bind2 = function(scope, func) {
        return function() {
          return func.apply(scope, arguments);
        };
      };
      var merge = function() {
        var args = arguments, target = args[0], key, i;
        for (i = 1; i < args.length; i++) {
          for (key in args[i]) {
            if (!(key in target) && args[i].hasOwnProperty(key)) {
              target[key] = args[i][key];
            }
          }
        }
        return target;
      };
      var defineLogLevel = function(value, name) {
        return { value, name };
      };
      Logger15.TRACE = defineLogLevel(1, "TRACE");
      Logger15.DEBUG = defineLogLevel(2, "DEBUG");
      Logger15.INFO = defineLogLevel(3, "INFO");
      Logger15.TIME = defineLogLevel(4, "TIME");
      Logger15.WARN = defineLogLevel(5, "WARN");
      Logger15.ERROR = defineLogLevel(8, "ERROR");
      Logger15.OFF = defineLogLevel(99, "OFF");
      var ContextualLogger = function(defaultContext) {
        this.context = defaultContext;
        this.setLevel(defaultContext.filterLevel);
        this.log = this.info;
      };
      ContextualLogger.prototype = {
        // Changes the current logging level for the logging instance.
        setLevel: function(newLevel) {
          if (newLevel && "value" in newLevel) {
            this.context.filterLevel = newLevel;
          }
        },
        // Gets the current logging level for the logging instance
        getLevel: function() {
          return this.context.filterLevel;
        },
        // Is the logger configured to output messages at the supplied level?
        enabledFor: function(lvl) {
          var filterLevel = this.context.filterLevel;
          return lvl.value >= filterLevel.value;
        },
        trace: function() {
          this.invoke(Logger15.TRACE, arguments);
        },
        debug: function() {
          this.invoke(Logger15.DEBUG, arguments);
        },
        info: function() {
          this.invoke(Logger15.INFO, arguments);
        },
        warn: function() {
          this.invoke(Logger15.WARN, arguments);
        },
        error: function() {
          this.invoke(Logger15.ERROR, arguments);
        },
        time: function(label) {
          if (typeof label === "string" && label.length > 0) {
            this.invoke(Logger15.TIME, [label, "start"]);
          }
        },
        timeEnd: function(label) {
          if (typeof label === "string" && label.length > 0) {
            this.invoke(Logger15.TIME, [label, "end"]);
          }
        },
        // Invokes the logger callback if it's not being filtered.
        invoke: function(level, msgArgs) {
          if (logHandler && this.enabledFor(level)) {
            logHandler(msgArgs, merge({ level }, this.context));
          }
        }
      };
      var globalLogger = new ContextualLogger({ filterLevel: Logger15.OFF });
      (function() {
        var L = Logger15;
        L.enabledFor = bind2(globalLogger, globalLogger.enabledFor);
        L.trace = bind2(globalLogger, globalLogger.trace);
        L.debug = bind2(globalLogger, globalLogger.debug);
        L.time = bind2(globalLogger, globalLogger.time);
        L.timeEnd = bind2(globalLogger, globalLogger.timeEnd);
        L.info = bind2(globalLogger, globalLogger.info);
        L.warn = bind2(globalLogger, globalLogger.warn);
        L.error = bind2(globalLogger, globalLogger.error);
        L.log = L.info;
      })();
      Logger15.setHandler = function(func) {
        logHandler = func;
      };
      Logger15.setLevel = function(level) {
        globalLogger.setLevel(level);
        for (var key in contextualLoggersByNameMap) {
          if (contextualLoggersByNameMap.hasOwnProperty(key)) {
            contextualLoggersByNameMap[key].setLevel(level);
          }
        }
      };
      Logger15.getLevel = function() {
        return globalLogger.getLevel();
      };
      Logger15.get = function(name) {
        return contextualLoggersByNameMap[name] || (contextualLoggersByNameMap[name] = new ContextualLogger(merge({ name }, globalLogger.context)));
      };
      Logger15.createDefaultHandler = function(options) {
        options = options || {};
        options.formatter = options.formatter || function defaultMessageFormatter(messages, context) {
          if (context.name) {
            messages.unshift("[" + context.name + "]");
          }
        };
        var timerStartTimeByLabelMap = {};
        var invokeConsoleMethod = function(hdlr, messages) {
          Function.prototype.apply.call(hdlr, console, messages);
        };
        if (typeof console === "undefined") {
          return function() {
          };
        }
        return function(messages, context) {
          messages = Array.prototype.slice.call(messages);
          var hdlr = console.log;
          var timerLabel;
          if (context.level === Logger15.TIME) {
            timerLabel = (context.name ? "[" + context.name + "] " : "") + messages[0];
            if (messages[1] === "start") {
              if (console.time) {
                console.time(timerLabel);
              } else {
                timerStartTimeByLabelMap[timerLabel] = new Date().getTime();
              }
            } else {
              if (console.timeEnd) {
                console.timeEnd(timerLabel);
              } else {
                invokeConsoleMethod(hdlr, [timerLabel + ": " + (new Date().getTime() - timerStartTimeByLabelMap[timerLabel]) + "ms"]);
              }
            }
          } else {
            if (context.level === Logger15.WARN && console.warn) {
              hdlr = console.warn;
            } else if (context.level === Logger15.ERROR && console.error) {
              hdlr = console.error;
            } else if (context.level === Logger15.INFO && console.info) {
              hdlr = console.info;
            } else if (context.level === Logger15.DEBUG && console.debug) {
              hdlr = console.debug;
            } else if (context.level === Logger15.TRACE && console.trace) {
              hdlr = console.trace;
            }
            options.formatter(messages, context);
            invokeConsoleMethod(hdlr, messages);
          }
        };
      };
      Logger15.useDefaults = function(options) {
        Logger15.setLevel(options && options.defaultLevel || Logger15.DEBUG);
        Logger15.setHandler(Logger15.createDefaultHandler(options));
      };
      Logger15.setDefaults = Logger15.useDefaults;
      if (typeof define === "function" && define.amd) {
        define(Logger15);
      } else if (typeof module2 !== "undefined" && module2.exports) {
        module2.exports = Logger15;
      } else {
        Logger15._prevLogger = global2.Logger;
        Logger15.noConflict = function() {
          global2.Logger = Logger15._prevLogger;
          return Logger15;
        };
        global2.Logger = Logger15;
      }
    })(exports);
  }
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  "node_modules/lodash/lodash.js"(exports, module2) {
    (function() {
      var undefined2;
      var VERSION2 = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _3.defaults(root.Object(), context, _3.pick(root, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash
          }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack2(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack2.prototype.clear = stackClear;
        Stack2.prototype["delete"] = stackDelete;
        Stack2.prototype.get = stackGet;
        Stack2.prototype.has = stackHas;
        Stack2.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack2());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined2 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout(function() {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack2());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack2());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack2());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack2();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity2;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack2());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
              if (newValue === undefined2) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity2];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity2), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity2 : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity2 : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity2, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity2;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop2 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return array && array.length ? baseUniq(array, undefined2, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined2;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined2
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined2
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now2 = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind2 = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind2));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now2();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush2() {
            return timerId === undefined2 ? result2 : trailingEdge(now2());
          }
          function debounced() {
            var time = now2(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush2;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign2 = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity2));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value = object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update2(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined2;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random2(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind2(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity2(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity2, baseGt) : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity2);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity2, baseLt) : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity2) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign2;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind2;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update2;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity2;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop2;
        lodash.now = now2;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random2;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash.VERSION = VERSION2;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity2);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined2
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _3 = runInContext();
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _3;
        define(function() {
          return _3;
        });
      } else if (freeModule) {
        (freeModule.exports = _3)._ = _3;
        freeExports._ = _3;
      } else {
        root._ = _3;
      }
    }).call(exports);
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultExplorerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian17 = require("obsidian");

// src/obsidian/vault-explorer-view.ts
var import_obsidian15 = require("obsidian");

// src/logger/constants.ts
var LOG_LEVEL_OFF = "off";
var LOG_LEVEL_ERROR = "error";
var LOG_LEVEL_WARN = "warn";
var LOG_LEVEL_INFO = "info";
var LOG_LEVEL_DEBUG = "debug";
var LOG_LEVEL_TRACE = "trace";

// src/types/index.ts
var TExplorerView = /* @__PURE__ */ ((TExplorerView2) => {
  TExplorerView2["DASHBOARD"] = "dashboard";
  TExplorerView2["GRID"] = "grid";
  TExplorerView2["LIST"] = "list";
  TExplorerView2["FEED"] = "feed";
  TExplorerView2["TABLE"] = "table";
  TExplorerView2["RECOMMENDED"] = "recommended";
  TExplorerView2["RELATED"] = "related";
  return TExplorerView2;
})(TExplorerView || {});
var TextFilterCondition = /* @__PURE__ */ ((TextFilterCondition2) => {
  TextFilterCondition2["IS"] = "is";
  TextFilterCondition2["IS_NOT"] = "is-not";
  TextFilterCondition2["CONTAINS"] = "contains";
  TextFilterCondition2["DOES_NOT_CONTAIN"] = "does-not-contain";
  TextFilterCondition2["STARTS_WITH"] = "starts-with";
  TextFilterCondition2["ENDS_WITH"] = "ends-with";
  TextFilterCondition2["EXISTS"] = "exists";
  TextFilterCondition2["DOES_NOT_EXIST"] = "does-not-exist";
  return TextFilterCondition2;
})(TextFilterCondition || {});
var ListFilterCondition = /* @__PURE__ */ ((ListFilterCondition2) => {
  ListFilterCondition2["CONTAINS"] = "contains";
  ListFilterCondition2["DOES_NOT_CONTAIN"] = "does-not-contain";
  ListFilterCondition2["EXISTS"] = "exists";
  ListFilterCondition2["DOES_NOT_EXIST"] = "does-not-exist";
  return ListFilterCondition2;
})(ListFilterCondition || {});
var NumberFilterCondition = /* @__PURE__ */ ((NumberFilterCondition2) => {
  NumberFilterCondition2["IS_EQUAL"] = "is-equal";
  NumberFilterCondition2["IS_NOT_EQUAL"] = "is-not-equal";
  NumberFilterCondition2["IS_GREATER"] = "is-greater";
  NumberFilterCondition2["IS_LESS"] = "is-less";
  NumberFilterCondition2["IS_GREATER_OR_EQUAL"] = "is-greater-or-equal";
  NumberFilterCondition2["IS_LESS_OR_EQUAL"] = "is-less-or-equal";
  NumberFilterCondition2["EXISTS"] = "exists";
  NumberFilterCondition2["DOES_NOT_EXIST"] = "does-not-exist";
  return NumberFilterCondition2;
})(NumberFilterCondition || {});
var CheckboxFilterCondition = /* @__PURE__ */ ((CheckboxFilterCondition2) => {
  CheckboxFilterCondition2["IS"] = "is";
  CheckboxFilterCondition2["IS_NOT"] = "is-not";
  CheckboxFilterCondition2["EXISTS"] = "exists";
  CheckboxFilterCondition2["DOES_NOT_EXIST"] = "does-not-exist";
  return CheckboxFilterCondition2;
})(CheckboxFilterCondition || {});
var DateFilterCondition = /* @__PURE__ */ ((DateFilterCondition2) => {
  DateFilterCondition2["IS"] = "is";
  DateFilterCondition2["IS_BEFORE"] = "is-before";
  DateFilterCondition2["IS_AFTER"] = "is-after";
  DateFilterCondition2["IS_ON_OR_BEFORE"] = "is-on-or-before";
  DateFilterCondition2["IS_ON_OR_AFTER"] = "is-on-or-after";
  DateFilterCondition2["EXISTS"] = "exists";
  DateFilterCondition2["DOES_NOT_EXIST"] = "does-not-exist";
  return DateFilterCondition2;
})(DateFilterCondition || {});
var ContentFilterCondition = /* @__PURE__ */ ((ContentFilterCondition2) => {
  ContentFilterCondition2["CONTAINS"] = "contains";
  ContentFilterCondition2["DOES_NOT_CONTAIN"] = "does-not-contain";
  ContentFilterCondition2["IS_EMPTY"] = "is-empty";
  ContentFilterCondition2["IS_NOT_EMPTY"] = "is-not-empty";
  return ContentFilterCondition2;
})(ContentFilterCondition || {});
var FolderFilterCondition = /* @__PURE__ */ ((FolderFilterCondition2) => {
  FolderFilterCondition2["IS"] = "is";
  FolderFilterCondition2["IS_NOT"] = "is-not";
  return FolderFilterCondition2;
})(FolderFilterCondition || {});
var FileNameFilterCondition = /* @__PURE__ */ ((FileNameFilterCondition2) => {
  FileNameFilterCondition2["IS"] = "is";
  FileNameFilterCondition2["IS_NOT"] = "is-not";
  FileNameFilterCondition2["CONTAINS"] = "contains";
  FileNameFilterCondition2["DOES_NOT_CONTAIN"] = "does-not-contain";
  FileNameFilterCondition2["STARTS_WITH"] = "starts-with";
  FileNameFilterCondition2["ENDS_WITH"] = "ends-with";
  return FileNameFilterCondition2;
})(FileNameFilterCondition || {});
var PropertyType = /* @__PURE__ */ ((PropertyType2) => {
  PropertyType2["TEXT"] = "text";
  PropertyType2["NUMBER"] = "number";
  PropertyType2["LIST"] = "list";
  PropertyType2["CHECKBOX"] = "checkbox";
  PropertyType2["DATE"] = "date";
  PropertyType2["DATETIME"] = "datetime";
  return PropertyType2;
})(PropertyType || {});
var FilterRuleType = /* @__PURE__ */ ((FilterRuleType3) => {
  FilterRuleType3["PROPERTY"] = "property";
  FilterRuleType3["FOLDER"] = "folder";
  FilterRuleType3["FILE_NAME"] = "file-name";
  FilterRuleType3["CONTENT"] = "content";
  return FilterRuleType3;
})(FilterRuleType || {});
var DatePropertyFilterValue = /* @__PURE__ */ ((DatePropertyFilterValue2) => {
  DatePropertyFilterValue2["TODAY"] = "today";
  DatePropertyFilterValue2["TOMORROW"] = "tomorrow";
  DatePropertyFilterValue2["YESTERDAY"] = "yesterday";
  DatePropertyFilterValue2["ONE_WEEK_FROM_NOW"] = "one-week-from-now";
  DatePropertyFilterValue2["ONE_WEEK_AGO"] = "one-week-ago";
  DatePropertyFilterValue2["ONE_MONTH_FROM_NOW"] = "one-month-from-now";
  DatePropertyFilterValue2["ONE_MONTH_AGO"] = "one-month-ago";
  DatePropertyFilterValue2["CUSTOM"] = "custom";
  return DatePropertyFilterValue2;
})(DatePropertyFilterValue || {});

// src/constants.ts
var VAULT_EXPLORER_VIEW = "vault-explorer";
var HOVER_LINK_SOURCE_ID = "vault-explorer-preview";
var DEFAULT_SETTINGS = {
  properties: {
    favorite: "",
    url: "",
    imageUrl: "",
    createdDate: "",
    modifiedDate: "",
    custom1: "",
    custom2: "",
    custom3: ""
  },
  filters: {
    search: {
      isEnabled: true,
      value: ""
    },
    favorites: {
      isEnabled: true,
      value: false
    },
    timestamp: {
      isEnabled: true,
      value: "all"
    },
    sort: {
      isEnabled: true,
      value: "file-name-asc"
    },
    custom: {
      isEnabled: true,
      selectedGroupId: "",
      groups: []
    }
  },
  views: {
    dashboard: {
      isEnabled: false
    },
    grid: {
      isEnabled: true,
      loadSocialMediaImage: false
    },
    list: {
      isEnabled: true
    },
    table: {
      isEnabled: false
    },
    feed: {
      isEnabled: true,
      removeH1: true,
      collapseStyle: "no-new-lines",
      lineClampLarge: 5,
      lineClampMedium: 3,
      lineClampSmall: 2
    },
    recommended: {
      isEnabled: false
    },
    related: {
      isEnabled: false
    }
  },
  currentView: "grid" /* GRID */,
  titleWrapping: "normal",
  enableClockUpdates: true,
  enableFileIcons: false,
  enableScrollButtons: true,
  fileInteractionStyle: "content",
  filterGroupsWidth: "100%",
  filterGroupsWrapping: "nowrap",
  pageSize: 25,
  viewOrder: ["grid" /* GRID */, "list" /* LIST */, "feed" /* FEED */],
  configDir: ".vaultexplorer",
  pluginVersion: null,
  logLevel: LOG_LEVEL_WARN
};

// node_modules/svelte/src/runtime/internal/utils.js
function noop() {
}
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return (
    /** @type {T & S} */
    tar
  );
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || a && typeof a === "object" || typeof a === "function";
}
var src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (element_src === url)
    return true;
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    for (const callback of callbacks) {
      callback(void 0);
    }
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn) {
  return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
  if (definition[2] && fn) {
    const lets = definition[2](fn(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}

// node_modules/svelte/src/runtime/internal/globals.js
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);

// node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
var ResizeObserverSingleton = class {
  /** @param {ResizeObserverOptions} options */
  constructor(options) {
    /**
     * @private
     * @readonly
     * @type {WeakMap<Element, import('./private.js').Listener>}
     */
    __publicField(this, "_listeners", "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0);
    /**
     * @private
     * @type {ResizeObserver}
     */
    __publicField(this, "_observer");
    /** @type {ResizeObserverOptions} */
    __publicField(this, "options");
    this.options = options;
  }
  /**
   * @param {Element} element
   * @param {import('./private.js').Listener} listener
   * @returns {() => void}
   */
  observe(element2, listener) {
    this._listeners.set(element2, listener);
    this._getObserver().observe(element2, this.options);
    return () => {
      this._listeners.delete(element2);
      this._observer.unobserve(element2);
    };
  }
  /**
   * @private
   */
  _getObserver() {
    var _a;
    return (_a = this._observer) != null ? _a : this._observer = new ResizeObserver((entries) => {
      var _a2;
      for (const entry of entries) {
        ResizeObserverSingleton.entries.set(entry.target, entry);
        (_a2 = this._listeners.get(entry.target)) == null ? void 0 : _a2(entry);
      }
    });
  }
};
ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

// node_modules/svelte/src/runtime/internal/dom.js
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data === data)
    return;
  text2.data = /** @type {string} */
  data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function select_option(select, value, mounting) {
  for (let i = 0; i < select.options.length; i += 1) {
    const option = select.options[i];
    if (option.__value === value) {
      option.selected = true;
      return;
    }
  }
  if (!mounting || value !== void 0) {
    select.selectedIndex = -1;
  }
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable });
}
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach(
    /** @param {Element} node */
    (node) => {
      result[node.slot || "default"] = true;
    }
  );
  return result;
}

// node_modules/svelte/src/runtime/internal/lifecycle.js
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
  get_current_component().$$.after_update.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(
        /** @type {string} */
        type,
        detail,
        { cancelable }
      );
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
  return context;
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn) => fn.call(this, event));
  }
}

// node_modules/svelte/src/runtime/internal/scheduler.js
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
function add_flush_callback(fn) {
  flush_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}

// node_modules/svelte/src/runtime/internal/transitions.js
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}

// node_modules/svelte/src/runtime/internal/each.js
function ensure_array_like(array_like_or_iterator) {
  return (array_like_or_iterator == null ? void 0 : array_like_or_iterator.length) !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block14, next, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  const updates = [];
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block14(key, child_ctx);
      block.c();
    } else if (dynamic) {
      updates.push(() => block.p(child_ctx, dirty));
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next);
    lookup.set(block.key, block);
    next = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  run_all(updates);
  return new_blocks;
}

// node_modules/svelte/src/runtime/internal/spread.js
function get_spread_update(levels, updates) {
  const update2 = {};
  const to_null_out = {};
  const accounted_for = { $$scope: 1 };
  let i = levels.length;
  while (i--) {
    const o = levels[i];
    const n = updates[i];
    if (n) {
      for (const key in o) {
        if (!(key in n))
          to_null_out[key] = 1;
      }
      for (const key in n) {
        if (!accounted_for[key]) {
          update2[key] = n[key];
          accounted_for[key] = 1;
        }
      }
      levels[i] = n;
    } else {
      for (const key in o) {
        accounted_for[key] = 1;
      }
    }
  }
  for (const key in to_null_out) {
    if (!(key in update2))
      update2[key] = void 0;
  }
  return update2;
}
function get_spread_object(spread_props) {
  return typeof spread_props === "object" && spread_props !== null ? spread_props : {};
}

// node_modules/svelte/src/shared/boolean_attributes.js
var _boolean_attributes = (
  /** @type {const} */
  [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
  ]
);
var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

// node_modules/svelte/src/runtime/internal/Component.js
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance45, create_fragment47, not_equal, props, append_styles = null, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance45 ? instance45(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment47 ? create_fragment47($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      /** The Svelte component constructor */
      __publicField(this, "$$ctor");
      /** Slots */
      __publicField(this, "$$s");
      /** The Svelte component instance */
      __publicField(this, "$$c");
      /** Whether or not the custom element is connected */
      __publicField(this, "$$cn", false);
      /** Component props data */
      __publicField(this, "$$d", {});
      /** `true` if currently in the process of reflecting component props back to attributes */
      __publicField(this, "$$r", false);
      /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
      __publicField(this, "$$p_d", {});
      /** @type {Record<string, Function[]>} Event listeners */
      __publicField(this, "$$l", {});
      /** @type {Map<Function, Function>} Event listener unsubscribe functions */
      __publicField(this, "$$l_u", /* @__PURE__ */ new Map());
      this.$$ctor = $$componentCtor;
      this.$$s = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({ mode: "open" });
      }
    }
    addEventListener(type, listener, options) {
      this.$$l[type] = this.$$l[type] || [];
      this.$$l[type].push(listener);
      if (this.$$c) {
        const unsub = this.$$c.$on(type, listener);
        this.$$l_u.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$c) {
        const unsub = this.$$l_u.get(listener);
        if (unsub) {
          unsub();
          this.$$l_u.delete(listener);
        }
      }
    }
    async connectedCallback() {
      this.$$cn = true;
      if (!this.$$c) {
        let create_slot2 = function(name) {
          return () => {
            let node;
            const obj = {
              c: function create() {
                node = element("slot");
                if (name !== "default") {
                  attr(node, "name", name);
                }
              },
              /**
               * @param {HTMLElement} target
               * @param {HTMLElement} [anchor]
               */
              m: function mount(target, anchor) {
                insert(target, node, anchor);
              },
              d: function destroy(detaching) {
                if (detaching) {
                  detach(node);
                }
              }
            };
            return obj;
          };
        };
        await Promise.resolve();
        if (!this.$$cn || this.$$c) {
          return;
        }
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$s) {
          if (name in existing_slots) {
            $$slots[name] = [create_slot2(name)];
          }
        }
        for (const attribute of this.attributes) {
          const name = this.$$g_p(attribute.name);
          if (!(name in this.$$d)) {
            this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
          }
        }
        for (const key in this.$$p_d) {
          if (!(key in this.$$d) && this[key] !== void 0) {
            this.$$d[key] = this[key];
            delete this[key];
          }
        }
        this.$$c = new this.$$ctor({
          target: this.shadowRoot || this,
          props: {
            ...this.$$d,
            $$slots,
            $$scope: {
              ctx: []
            }
          }
        });
        const reflect_attributes = () => {
          this.$$r = true;
          for (const key in this.$$p_d) {
            this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
            if (this.$$p_d[key].reflect) {
              const attribute_value = get_custom_element_value(
                key,
                this.$$d[key],
                this.$$p_d,
                "toAttribute"
              );
              if (attribute_value == null) {
                this.removeAttribute(this.$$p_d[key].attribute || key);
              } else {
                this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
              }
            }
          }
          this.$$r = false;
        };
        this.$$c.$$.after_update.push(reflect_attributes);
        reflect_attributes();
        for (const type in this.$$l) {
          for (const listener of this.$$l[type]) {
            const unsub = this.$$c.$on(type, listener);
            this.$$l_u.set(listener, unsub);
          }
        }
        this.$$l = {};
      }
    }
    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful
    attributeChangedCallback(attr2, _oldValue, newValue) {
      var _a;
      if (this.$$r)
        return;
      attr2 = this.$$g_p(attr2);
      this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
      (_a = this.$$c) == null ? void 0 : _a.$set({ [attr2]: this.$$d[attr2] });
    }
    disconnectedCallback() {
      this.$$cn = false;
      Promise.resolve().then(() => {
        if (!this.$$cn) {
          this.$$c.$destroy();
          this.$$c = void 0;
        }
      });
    }
    $$g_p(attribute_name) {
      return Object.keys(this.$$p_d).find(
        (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
      ) || attribute_name;
    }
  };
}
function get_custom_element_value(prop, value, props_definition, transform) {
  var _a;
  const type = (_a = props_definition[prop]) == null ? void 0 : _a.type;
  value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
  if (!transform || !props_definition[prop]) {
    return value;
  } else if (transform === "toAttribute") {
    switch (type) {
      case "Object":
      case "Array":
        return value == null ? null : JSON.stringify(value);
      case "Boolean":
        return value ? "" : null;
      case "Number":
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case "Object":
      case "Array":
        return value && JSON.parse(value);
      case "Boolean":
        return value;
      case "Number":
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}
var SvelteComponent = class {
  constructor() {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$");
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$set");
  }
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract<keyof Events, string>} K
   * @param {K} type
   * @param {((e: Events[K]) => void) | null | undefined} callback
   * @returns {() => void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  /**
   * @param {Partial<Props>} props
   * @returns {void}
   */
  $set(props) {
    if (this.$$set && !is_empty(props)) {
      this.$$.skip_bound = true;
      this.$$set(props);
      this.$$.skip_bound = false;
    }
  }
};

// node_modules/svelte/src/shared/version.js
var PUBLIC_VERSION = "4";

// node_modules/svelte/src/runtime/internal/disclose-version/index.js
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

// node_modules/tslib/tslib.es6.js
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// src/svelte/shared/components/stack.svelte
function create_fragment(ctx) {
  let div;
  let div_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", "vault-explorer-stack");
      attr(div, "style", div_style_value = "display: flex; flex-direction: " + /*direction*/
      ctx[2] + "; justify-content: " + /*justify*/
      ctx[0] + "; align-items: " + /*align*/
      ctx[1] + "; " + /*direction*/
      (ctx[2] === "row" || /*direction*/
      ctx[2] === "row-reverse" ? "column-gap" : "row-gap") + ": " + /*spacingPx*/
      ctx[5] + "px; width: " + /*width*/
      ctx[3] + "; height: " + /*height*/
      ctx[4] + ";");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*direction, justify, align, spacingPx, width, height*/
      63 && div_style_value !== (div_style_value = "display: flex; flex-direction: " + /*direction*/
      ctx2[2] + "; justify-content: " + /*justify*/
      ctx2[0] + "; align-items: " + /*align*/
      ctx2[1] + "; " + /*direction*/
      (ctx2[2] === "row" || /*direction*/
      ctx2[2] === "row-reverse" ? "column-gap" : "row-gap") + ": " + /*spacingPx*/
      ctx2[5] + "px; width: " + /*width*/
      ctx2[3] + "; height: " + /*height*/
      ctx2[4] + ";")) {
        attr(div, "style", div_style_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { spacing = "md" } = $$props;
  let { justify = "unset" } = $$props;
  let { align = "unset" } = $$props;
  let { direction = "row" } = $$props;
  let { width = "unset" } = $$props;
  let { height = "unset" } = $$props;
  let spacingPx = 0;
  switch (spacing) {
    case "none":
      spacingPx = 0;
      break;
    case "xs":
      spacingPx = 4;
      break;
    case "sm":
      spacingPx = 8;
      break;
    case "md":
      spacingPx = 16;
      break;
    case "lg":
      spacingPx = 24;
      break;
    case "xl":
      spacingPx = 32;
      break;
  }
  $$self.$$set = ($$props2) => {
    if ("spacing" in $$props2)
      $$invalidate(6, spacing = $$props2.spacing);
    if ("justify" in $$props2)
      $$invalidate(0, justify = $$props2.justify);
    if ("align" in $$props2)
      $$invalidate(1, align = $$props2.align);
    if ("direction" in $$props2)
      $$invalidate(2, direction = $$props2.direction);
    if ("width" in $$props2)
      $$invalidate(3, width = $$props2.width);
    if ("height" in $$props2)
      $$invalidate(4, height = $$props2.height);
    if ("$$scope" in $$props2)
      $$invalidate(7, $$scope = $$props2.$$scope);
  };
  return [justify, align, direction, width, height, spacingPx, spacing, $$scope, slots];
}
var Stack = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, {
      spacing: 6,
      justify: 0,
      align: 1,
      direction: 2,
      width: 3,
      height: 4
    });
  }
};
var stack_default = Stack;

// src/svelte/shared/components/flex.svelte
function create_fragment2(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[7].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", "vault-explorer-flex");
      set_style(div, "display", "flex");
      set_style(
        div,
        "flex-direction",
        /*direction*/
        ctx[2]
      );
      set_style(
        div,
        "justify-content",
        /*justify*/
        ctx[3]
      );
      set_style(
        div,
        "align-items",
        /*align*/
        ctx[4]
      );
      set_style(
        div,
        "flex-wrap",
        /*wrap*/
        ctx[5]
      );
      set_style(
        div,
        "width",
        /*width*/
        ctx[0]
      );
      set_style(
        div,
        "height",
        /*height*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*direction*/
      4) {
        set_style(
          div,
          "flex-direction",
          /*direction*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*justify*/
      8) {
        set_style(
          div,
          "justify-content",
          /*justify*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*align*/
      16) {
        set_style(
          div,
          "align-items",
          /*align*/
          ctx2[4]
        );
      }
      if (!current || dirty & /*wrap*/
      32) {
        set_style(
          div,
          "flex-wrap",
          /*wrap*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*width*/
      1) {
        set_style(
          div,
          "width",
          /*width*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*height*/
      2) {
        set_style(
          div,
          "height",
          /*height*/
          ctx2[1]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { direction = "row" } = $$props;
  let { justify = "flex-start" } = $$props;
  let { align = "flex-start" } = $$props;
  let { wrap = "nowrap" } = $$props;
  let { width = "" } = $$props;
  let { height = "" } = $$props;
  if (width === void 0 && direction === "row") {
    width = "100%";
  } else if (height === void 0 && direction === "column") {
    height = "100%";
  }
  $$self.$$set = ($$props2) => {
    if ("direction" in $$props2)
      $$invalidate(2, direction = $$props2.direction);
    if ("justify" in $$props2)
      $$invalidate(3, justify = $$props2.justify);
    if ("align" in $$props2)
      $$invalidate(4, align = $$props2.align);
    if ("wrap" in $$props2)
      $$invalidate(5, wrap = $$props2.wrap);
    if ("width" in $$props2)
      $$invalidate(0, width = $$props2.width);
    if ("height" in $$props2)
      $$invalidate(1, height = $$props2.height);
    if ("$$scope" in $$props2)
      $$invalidate(6, $$scope = $$props2.$$scope);
  };
  return [width, height, direction, justify, align, wrap, $$scope, slots];
}
var Flex = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment2, safe_not_equal, {
      direction: 2,
      justify: 3,
      align: 4,
      wrap: 5,
      width: 0,
      height: 1
    });
  }
};
var flex_default = Flex;

// src/svelte/shared/components/checkbox.svelte
function create_fragment3(ctx) {
  let div;
  let label_1;
  let t0;
  let t1;
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      label_1 = element("label");
      t0 = text(
        /*label*/
        ctx[1]
      );
      t1 = space();
      input = element("input");
      attr(
        label_1,
        "for",
        /*id*/
        ctx[0]
      );
      attr(
        input,
        "id",
        /*id*/
        ctx[0]
      );
      attr(input, "type", "checkbox");
      input.checked = /*value*/
      ctx[2];
      attr(div, "class", "vault-explorer-checkbox svelte-sbdz1k");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, label_1);
      append(label_1, t0);
      append(div, t1);
      append(div, input);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*handleChange*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*label*/
      2)
        set_data(
          t0,
          /*label*/
          ctx2[1]
        );
      if (dirty & /*id*/
      1) {
        attr(
          label_1,
          "for",
          /*id*/
          ctx2[0]
        );
      }
      if (dirty & /*id*/
      1) {
        attr(
          input,
          "id",
          /*id*/
          ctx2[0]
        );
      }
      if (dirty & /*value*/
      4) {
        input.checked = /*value*/
        ctx2[2];
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  let { id } = $$props;
  let { label } = $$props;
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function handleChange(event) {
    dispatch("change", { nativeEvent: event });
  }
  $$self.$$set = ($$props2) => {
    if ("id" in $$props2)
      $$invalidate(0, id = $$props2.id);
    if ("label" in $$props2)
      $$invalidate(1, label = $$props2.label);
    if ("value" in $$props2)
      $$invalidate(2, value = $$props2.value);
  };
  return [id, label, value, handleChange];
}
var Checkbox = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment3, safe_not_equal, { id: 0, label: 1, value: 2 });
  }
};
var checkbox_default = Checkbox;

// src/svelte/app/components/favorites-filter.svelte
function create_fragment4(ctx) {
  let checkbox;
  let current;
  checkbox = new checkbox_default({
    props: {
      id: "favorites",
      label: "Favorites",
      value: (
        /*value*/
        ctx[0]
      )
    }
  });
  checkbox.$on(
    "change",
    /*change_handler*/
    ctx[1]
  );
  return {
    c() {
      create_component(checkbox.$$.fragment);
    },
    m(target, anchor) {
      mount_component(checkbox, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const checkbox_changes = {};
      if (dirty & /*value*/
      1)
        checkbox_changes.value = /*value*/
        ctx2[0];
      checkbox.$set(checkbox_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(checkbox.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(checkbox.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(checkbox, detaching);
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  let { value } = $$props;
  function change_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  return [value, change_handler];
}
var Favorites_filter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance4, create_fragment4, safe_not_equal, { value: 0 });
  }
};
var favorites_filter_default = Favorites_filter;

// node_modules/svelte/src/runtime/store/index.js
var subscriber_queue = [];
function writable(value, start = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set, update2) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0 && stop) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}

// src/svelte/shared/components/tab-list.svelte
function create_default_slot(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  return {
    c() {
      if (default_slot)
        default_slot.c();
    },
    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment5(ctx) {
  let div;
  let stack;
  let div_class_value;
  let current;
  stack = new stack_default({
    props: {
      spacing: "sm",
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(stack.$$.fragment);
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[0]
      ) + " svelte-19t7wuc");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(stack, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const stack_changes = {};
      if (dirty & /*$$scope*/
      32) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
      if (!current || dirty & /*className*/
      1 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[0]
      ) + " svelte-19t7wuc")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(stack);
    }
  };
}
function instance5($$self, $$props, $$invalidate) {
  let className;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { initialSelectedIndex = 0 } = $$props;
  let { variant = "rounded" } = $$props;
  let registeredTabs = [];
  const selectedTab = writable();
  function registerTab(id) {
    $$invalidate(3, registeredTabs = [...registeredTabs, id]);
  }
  function unregisterTab(id) {
    $$invalidate(3, registeredTabs = registeredTabs.filter((tabId) => tabId !== id));
  }
  setContext("selectedTab", selectedTab);
  setContext("registerTab", registerTab);
  setContext("unregisterTab", unregisterTab);
  setContext("variant", variant);
  $$self.$$set = ($$props2) => {
    if ("initialSelectedIndex" in $$props2)
      $$invalidate(1, initialSelectedIndex = $$props2.initialSelectedIndex);
    if ("variant" in $$props2)
      $$invalidate(2, variant = $$props2.variant);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*initialSelectedIndex, registeredTabs*/
    10) {
      $:
        initialSelectedIndex, registeredTabs.length, selectedTab.set(registeredTabs[initialSelectedIndex]);
    }
    if ($$self.$$.dirty & /*variant*/
    4) {
      $:
        $$invalidate(0, className = "vault-explorer-tab-list" + (variant === "line" ? " vault-explorer-tab-list--line" : ""));
    }
  };
  return [className, initialSelectedIndex, variant, registeredTabs, slots, $$scope];
}
var Tab_list = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance5, create_fragment5, safe_not_equal, { initialSelectedIndex: 1, variant: 2 });
  }
};
var tab_list_default = Tab_list;

// node_modules/nanoid/index.browser.js
var random = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
var customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
  let step = -~(1.6 * mask * defaultSize / alphabet.length);
  return (size = defaultSize) => {
    let id = "";
    while (true) {
      let bytes = getRandom(step);
      let j = step;
      while (j--) {
        id += alphabet[bytes[j] & mask] || "";
        if (id.length === size)
          return id;
      }
    }
  };
};
var customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);

// src/svelte/shared/services/random.ts
var nanoid = customAlphabet(
  "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
);
var generateRandomId = () => {
  return nanoid(16);
};
var generateRandomDeviceId = () => {
  return nanoid(12);
};

// src/svelte/shared/components/tab.svelte
function create_fragment6(ctx) {
  let div;
  let div_class_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "tabindex", "0");
      attr(div, "role", "button");
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-1mmhyf5");
      attr(
        div,
        "draggable",
        /*draggable*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            div,
            "click",
            /*handleClick*/
            ctx[6]
          ),
          listen(
            div,
            "dragstart",
            /*handleDragStart*/
            ctx[3]
          ),
          listen(
            div,
            "dragover",
            /*handleDragOver*/
            ctx[4]
          ),
          listen(
            div,
            "drop",
            /*handleDrop*/
            ctx[5]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[11]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-1mmhyf5")) {
        attr(div, "class", div_class_value);
      }
      if (!current || dirty & /*draggable*/
      1) {
        attr(
          div,
          "draggable",
          /*draggable*/
          ctx2[0]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance6($$self, $$props, $$invalidate) {
  let isSelected;
  let className;
  let $selectedTab;
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch = createEventDispatcher();
  let { draggable = false } = $$props;
  const id = generateRandomId();
  const selectedTab = getContext("selectedTab");
  component_subscribe($$self, selectedTab, (value) => $$invalidate(8, $selectedTab = value));
  const registerTab = getContext("registerTab");
  const unregisterTab = getContext("unregisterTab");
  const variant = getContext("variant");
  onMount(() => {
    registerTab(id);
    return () => {
      unregisterTab(id);
    };
  });
  function handleDragStart(event) {
    dispatch("dragstart", { nativeEvent: event });
  }
  function handleDragOver(event) {
    dispatch("dragover", { nativeEvent: event });
  }
  function handleDrop(event) {
    dispatch("drop", { nativeEvent: event });
  }
  function handleClick(event) {
    selectedTab.set(id);
    dispatch("click", { nativeEvent: event });
  }
  function findClassName(variant2, isSelected2) {
    let className2 = "vault-explorer-tab";
    if (variant2 === "line") {
      className2 += " vault-explorer-tab__line";
      if (isSelected2) {
        className2 += "--active";
      }
    } else if (variant2 === "rounded") {
      className2 += " vault-explorer-tab__rounded";
      if (isSelected2) {
        className2 += "--active";
      }
    }
    return className2;
  }
  const keydown_handler = (e) => (e.key === "Enter" || e.key === " ") && handleClick(e);
  $$self.$$set = ($$props2) => {
    if ("draggable" in $$props2)
      $$invalidate(0, draggable = $$props2.draggable);
    if ("$$scope" in $$props2)
      $$invalidate(9, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$selectedTab*/
    256) {
      $:
        $$invalidate(7, isSelected = $selectedTab === id);
    }
    if ($$self.$$.dirty & /*isSelected*/
    128) {
      $:
        $$invalidate(1, className = findClassName(variant, isSelected));
    }
  };
  return [
    draggable,
    className,
    selectedTab,
    handleDragStart,
    handleDragOver,
    handleDrop,
    handleClick,
    isSelected,
    $selectedTab,
    $$scope,
    slots,
    keydown_handler
  ];
}
var Tab = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance6, create_fragment6, safe_not_equal, { draggable: 0 });
  }
};
var tab_default = Tab;

// src/svelte/app/index.svelte
var import_obsidian14 = require("obsidian");

// src/svelte/shared/services/store.ts
var plugin = writable();
var store_default = { plugin };

// src/svelte/shared/components/icon-button.svelte
var import_obsidian = require("obsidian");

// src/svelte/shared/services/get-svg-data.ts
var LUCIDE_ELLIPSIS_VERTICAL = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-ellipsis-vertical"><circle cx="12" cy="12" r="1"/><circle cx="12" cy="5" r="1"/><circle cx="12" cy="19" r="1"/></svg>`;
var getSvgData = (iconId) => {
  switch (iconId) {
    case "ellipsis-vertical":
      return LUCIDE_ELLIPSIS_VERTICAL;
    default:
      return "";
  }
};

// src/svelte/shared/components/icon-button.svelte
function create_fragment7(ctx) {
  let button;
  let button_class_value;
  let button_tabindex_value;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      attr(button, "class", button_class_value = null_to_empty(
        /*className*/
        ctx[5]
      ) + " svelte-94mg5c");
      attr(button, "tabindex", button_tabindex_value = /*isTabbable*/
      ctx[2] ? 0 : -1);
      button.disabled = /*disabled*/
      ctx[1];
      attr(
        button,
        "aria-label",
        /*ariaLabel*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, button, anchor);
      button.innerHTML = /*svgData*/
      ctx[4];
      ctx[9](button);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*handleClick*/
          ctx[6]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*svgData*/
      16)
        button.innerHTML = /*svgData*/
        ctx2[4];
      ;
      if (dirty & /*className*/
      32 && button_class_value !== (button_class_value = null_to_empty(
        /*className*/
        ctx2[5]
      ) + " svelte-94mg5c")) {
        attr(button, "class", button_class_value);
      }
      if (dirty & /*isTabbable*/
      4 && button_tabindex_value !== (button_tabindex_value = /*isTabbable*/
      ctx2[2] ? 0 : -1)) {
        attr(button, "tabindex", button_tabindex_value);
      }
      if (dirty & /*disabled*/
      2) {
        button.disabled = /*disabled*/
        ctx2[1];
      }
      if (dirty & /*ariaLabel*/
      1) {
        attr(
          button,
          "aria-label",
          /*ariaLabel*/
          ctx2[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      ctx[9](null);
      mounted = false;
      dispose();
    }
  };
}
function instance7($$self, $$props, $$invalidate) {
  let className;
  let svgData;
  let { ariaLabel = "" } = $$props;
  let { iconId = "" } = $$props;
  let { disabled = false } = $$props;
  let { noPadding = false } = $$props;
  let { isTabbable = true } = $$props;
  const dispatch = createEventDispatcher();
  let ref;
  onMount(() => {
    if (iconId === "ellipsis-vertical")
      return;
    (0, import_obsidian.setIcon)(ref, iconId);
  });
  function handleClick(event) {
    dispatch("click", { nativeEvent: event });
  }
  function button_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(3, ref);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("ariaLabel" in $$props2)
      $$invalidate(0, ariaLabel = $$props2.ariaLabel);
    if ("iconId" in $$props2)
      $$invalidate(7, iconId = $$props2.iconId);
    if ("disabled" in $$props2)
      $$invalidate(1, disabled = $$props2.disabled);
    if ("noPadding" in $$props2)
      $$invalidate(8, noPadding = $$props2.noPadding);
    if ("isTabbable" in $$props2)
      $$invalidate(2, isTabbable = $$props2.isTabbable);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*noPadding*/
    256) {
      $:
        $$invalidate(5, className = "clickable-icon" + (noPadding == true ? " vault-explorer-icon--no-padding" : ""));
    }
    if ($$self.$$.dirty & /*iconId*/
    128) {
      $:
        $$invalidate(4, svgData = getSvgData(iconId));
    }
  };
  return [
    ariaLabel,
    disabled,
    isTabbable,
    ref,
    svgData,
    className,
    handleClick,
    iconId,
    noPadding,
    button_binding
  ];
}
var Icon_button = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance7, create_fragment7, safe_not_equal, {
      ariaLabel: 0,
      iconId: 7,
      disabled: 1,
      noPadding: 8,
      isTabbable: 2
    });
  }
};
var icon_button_default = Icon_button;

// src/svelte/shared/components/tag.svelte
function create_fragment8(ctx) {
  let a;
  let t0;
  let t1;
  let a_class_value;
  let a_href_value;
  let mounted;
  let dispose;
  return {
    c() {
      a = element("a");
      t0 = text("#");
      t1 = text(
        /*name*/
        ctx[0]
      );
      attr(a, "class", a_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-1npt9s7");
      attr(a, "href", a_href_value = `#${/*name*/
      ctx[0]}`);
      attr(a, "target", "_blank");
      attr(a, "rel", "noopener");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, t0);
      append(a, t1);
      if (!mounted) {
        dispose = listen(
          a,
          "click",
          /*handleClick*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*name*/
      1)
        set_data(
          t1,
          /*name*/
          ctx2[0]
        );
      if (dirty & /*className*/
      2 && a_class_value !== (a_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-1npt9s7")) {
        attr(a, "class", a_class_value);
      }
      if (dirty & /*name*/
      1 && a_href_value !== (a_href_value = `#${/*name*/
      ctx2[0]}`)) {
        attr(a, "href", a_href_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(a);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  let className;
  let { name } = $$props;
  let { variant = "default" } = $$props;
  let plugin2;
  store_default.plugin.subscribe((p) => {
    plugin2 = p;
  });
  function handleClick(e) {
    e.stopPropagation();
    const searchPlugin = plugin2.app.internalPlugins.plugins["global-search"];
    if (searchPlugin) {
      searchPlugin.instance.openGlobalSearch(`tag:#${name}`);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(0, name = $$props2.name);
    if ("variant" in $$props2)
      $$invalidate(3, variant = $$props2.variant);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*variant*/
    8) {
      $:
        $$invalidate(1, className = `vault-explorer-tag vault-explorer-tag--${variant}`);
    }
  };
  return [name, className, handleClick, variant];
}
var Tag = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance8, create_fragment8, safe_not_equal, { name: 0, variant: 3 });
  }
};
var tag_default = Tag;

// src/svelte/shared/components/property.svelte
function create_fragment9(ctx) {
  let a;
  let t;
  let mounted;
  let dispose;
  return {
    c() {
      a = element("a");
      t = text(
        /*formattedValue*/
        ctx[0]
      );
      attr(a, "href", "none");
      attr(a, "class", "tag vault-explorer-property svelte-3natje");
      attr(a, "target", "_blank");
      attr(a, "rel", "noopener");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, t);
      if (!mounted) {
        dispose = listen(
          a,
          "click",
          /*handleClick*/
          ctx[1]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*formattedValue*/
      1)
        set_data(
          t,
          /*formattedValue*/
          ctx2[0]
        );
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(a);
      }
      mounted = false;
      dispose();
    }
  };
}
function instance9($$self, $$props, $$invalidate) {
  let { name } = $$props;
  let { value } = $$props;
  let formattedValue;
  let plugin2;
  store_default.plugin.subscribe((p) => {
    plugin2 = p;
  });
  function handleClick() {
    const searchPlugin = plugin2.app.internalPlugins.plugins["global-search"];
    if (searchPlugin) {
      searchPlugin.instance.openGlobalSearch(`["${name}":${formattedValue}]`);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(2, name = $$props2.name);
    if ("value" in $$props2)
      $$invalidate(3, value = $$props2.value);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value, formattedValue*/
    9) {
      $: {
        if (typeof value === "string") {
          $$invalidate(0, formattedValue = value);
          $$invalidate(0, formattedValue = formattedValue.replace(/\[/g, ""));
          $$invalidate(0, formattedValue = formattedValue.replace(/\]/g, ""));
        }
      }
    }
  };
  return [formattedValue, handleClick, name, value];
}
var Property = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance9, create_fragment9, safe_not_equal, { name: 2, value: 3 });
  }
};
var property_default = Property;

// src/svelte/shared/components/wrap.svelte
function create_fragment10(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[11].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[10],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", "vault-explorer-wrap");
      set_style(div, "display", "flex");
      set_style(
        div,
        "flex-wrap",
        /*wrap*/
        ctx[5]
      );
      set_style(
        div,
        "flex-direction",
        /*direction*/
        ctx[2]
      );
      set_style(
        div,
        "justify-content",
        /*justify*/
        ctx[0]
      );
      set_style(
        div,
        "align-items",
        /*align*/
        ctx[1]
      );
      set_style(
        div,
        "column-gap",
        /*xSpacingPx*/
        ctx[6] + "px"
      );
      set_style(
        div,
        "row-gap",
        /*ySpacingPx*/
        ctx[7] + "px"
      );
      set_style(
        div,
        "width",
        /*width*/
        ctx[3]
      );
      set_style(
        div,
        "height",
        /*height*/
        ctx[4]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        1024)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[10],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[10]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[10],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*wrap*/
      32) {
        set_style(
          div,
          "flex-wrap",
          /*wrap*/
          ctx2[5]
        );
      }
      if (!current || dirty & /*direction*/
      4) {
        set_style(
          div,
          "flex-direction",
          /*direction*/
          ctx2[2]
        );
      }
      if (!current || dirty & /*justify*/
      1) {
        set_style(
          div,
          "justify-content",
          /*justify*/
          ctx2[0]
        );
      }
      if (!current || dirty & /*align*/
      2) {
        set_style(
          div,
          "align-items",
          /*align*/
          ctx2[1]
        );
      }
      if (!current || dirty & /*xSpacingPx*/
      64) {
        set_style(
          div,
          "column-gap",
          /*xSpacingPx*/
          ctx2[6] + "px"
        );
      }
      if (!current || dirty & /*ySpacingPx*/
      128) {
        set_style(
          div,
          "row-gap",
          /*ySpacingPx*/
          ctx2[7] + "px"
        );
      }
      if (!current || dirty & /*width*/
      8) {
        set_style(
          div,
          "width",
          /*width*/
          ctx2[3]
        );
      }
      if (!current || dirty & /*height*/
      16) {
        set_style(
          div,
          "height",
          /*height*/
          ctx2[4]
        );
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance10($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { spacingX = "md" } = $$props;
  let { spacingY = "md" } = $$props;
  let { justify = "unset" } = $$props;
  let { align = "unset" } = $$props;
  let { direction = "row" } = $$props;
  let { width = "unset" } = $$props;
  let { height = "unset" } = $$props;
  let { wrap = "wrap" } = $$props;
  let xSpacingPx = 0;
  let ySpacingPx = 0;
  if (spacingX === "xs") {
    xSpacingPx = 4;
  } else if (spacingX === "sm") {
    xSpacingPx = 8;
  } else if (spacingX === "md") {
    xSpacingPx = 16;
  } else if (spacingX === "lg") {
    xSpacingPx = 24;
  } else if (spacingX === "xl") {
    xSpacingPx = 32;
  }
  if (spacingY === "xs") {
    ySpacingPx = 4;
  } else if (spacingY === "sm") {
    ySpacingPx = 8;
  } else if (spacingY === "md") {
    ySpacingPx = 16;
  } else if (spacingY === "lg") {
    ySpacingPx = 24;
  } else if (spacingY === "xl") {
    ySpacingPx = 32;
  }
  $$self.$$set = ($$props2) => {
    if ("spacingX" in $$props2)
      $$invalidate(8, spacingX = $$props2.spacingX);
    if ("spacingY" in $$props2)
      $$invalidate(9, spacingY = $$props2.spacingY);
    if ("justify" in $$props2)
      $$invalidate(0, justify = $$props2.justify);
    if ("align" in $$props2)
      $$invalidate(1, align = $$props2.align);
    if ("direction" in $$props2)
      $$invalidate(2, direction = $$props2.direction);
    if ("width" in $$props2)
      $$invalidate(3, width = $$props2.width);
    if ("height" in $$props2)
      $$invalidate(4, height = $$props2.height);
    if ("wrap" in $$props2)
      $$invalidate(5, wrap = $$props2.wrap);
    if ("$$scope" in $$props2)
      $$invalidate(10, $$scope = $$props2.$$scope);
  };
  return [
    justify,
    align,
    direction,
    width,
    height,
    wrap,
    xSpacingPx,
    ySpacingPx,
    spacingX,
    spacingY,
    $$scope,
    slots
  ];
}
var Wrap = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance10, create_fragment10, safe_not_equal, {
      spacingX: 8,
      spacingY: 9,
      justify: 0,
      align: 1,
      direction: 2,
      width: 3,
      height: 4,
      wrap: 5
    });
  }
};
var wrap_default = Wrap;

// src/event/event-manager.ts
var import_js_logger = __toESM(require_logger());
var EventManager = class {
  constructor() {
    this.eventListeners = {};
  }
  // Ensures only one instance is created
  static getInstance() {
    if (!EventManager.instance) {
      EventManager.instance = new EventManager();
    }
    return EventManager.instance;
  }
  // Method to add an event listener
  on(eventName, callback) {
    if (!this.eventListeners[eventName]) {
      this.eventListeners[eventName] = [];
    }
    this.eventListeners[eventName].push(callback);
  }
  // Method to remove an event listener
  off(eventName, callbackToRemove) {
    if (!this.eventListeners[eventName]) {
      return;
    }
    this.eventListeners[eventName] = this.eventListeners[eventName].filter(
      (callback) => callback !== callbackToRemove
    );
  }
  // Method to trigger all callbacks associated with an event
  emit(eventName, ...data) {
    import_js_logger.default.trace({ fileName: "event-manager.ts", functionName: "emit", message: "called" });
    if (!this.eventListeners[eventName]) {
      import_js_logger.default.debug({ fileName: "event-manager.ts", functionName: "emit", message: "no event listeners found for event. returning..." }, eventName);
      return;
    }
    import_js_logger.default.debug({ fileName: "event-manager.ts", functionName: "emit", message: "emiting event" }, eventName);
    this.eventListeners[eventName].forEach((callback) => {
      callback(...data);
    });
  }
};

// src/svelte/shared/components/icon.svelte
var import_obsidian2 = require("obsidian");
function create_fragment11(ctx) {
  let div;
  let div_class_value;
  return {
    c() {
      div = element("div");
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[4]
      ) + " svelte-rw1rf");
      set_style(
        div,
        "color",
        /*color*/
        ctx[1]
      );
      attr(
        div,
        "aria-label",
        /*ariaLabel*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      div.innerHTML = /*svgData*/
      ctx[3];
      ctx[8](div);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*svgData*/
      8)
        div.innerHTML = /*svgData*/
        ctx2[3];
      ;
      if (dirty & /*className*/
      16 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[4]
      ) + " svelte-rw1rf")) {
        attr(div, "class", div_class_value);
      }
      if (dirty & /*color*/
      2) {
        set_style(
          div,
          "color",
          /*color*/
          ctx2[1]
        );
      }
      if (dirty & /*ariaLabel*/
      1) {
        attr(
          div,
          "aria-label",
          /*ariaLabel*/
          ctx2[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      ctx[8](null);
    }
  };
}
function instance11($$self, $$props, $$invalidate) {
  let className;
  let svgData;
  let { ariaLabel = "" } = $$props;
  let { iconId } = $$props;
  let { size = "md" } = $$props;
  let { color = "" } = $$props;
  let { fill = "" } = $$props;
  let ref = null;
  onMount(() => {
    updateIcon();
  });
  afterUpdate(() => {
    updateIcon();
  });
  function updateIcon() {
    if (!ref)
      return;
    if (iconId === "ellipsis-vertical")
      return;
    (0, import_obsidian2.setIcon)(ref, iconId);
    const icon = ref.querySelector("svg");
    if (icon) {
      icon.style.setProperty("fill", fill);
      const sizeVariable = getSizeVariable();
      icon.style.setProperty("width", sizeVariable);
      icon.style.setProperty("height", sizeVariable);
    }
  }
  function getSizeVariable() {
    if (size === "xs")
      return `var(--icon-xs)`;
    if (size === "sm")
      return `var(--icon-sm)`;
    if (size === "md")
      return `var(--icon-m)`;
    return "";
  }
  function getClassName(size2) {
    let className2 = "vault-explorer-icon";
    if (size2 === "xs") {
      className2 += " vault-explorer-icon--xs";
    } else if (size2 === "sm") {
      className2 += " vault-explorer-icon--sm";
    } else if (size2 === "md") {
      className2 += " vault-explorer-icon--md";
    }
    return className2;
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(2, ref);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("ariaLabel" in $$props2)
      $$invalidate(0, ariaLabel = $$props2.ariaLabel);
    if ("iconId" in $$props2)
      $$invalidate(5, iconId = $$props2.iconId);
    if ("size" in $$props2)
      $$invalidate(6, size = $$props2.size);
    if ("color" in $$props2)
      $$invalidate(1, color = $$props2.color);
    if ("fill" in $$props2)
      $$invalidate(7, fill = $$props2.fill);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*size*/
    64) {
      $:
        $$invalidate(4, className = getClassName(size));
    }
    if ($$self.$$.dirty & /*iconId*/
    32) {
      $:
        $$invalidate(3, svgData = getSvgData(iconId));
    }
  };
  return [ariaLabel, color, ref, svgData, className, iconId, size, fill, div_binding];
}
var Icon = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance11, create_fragment11, safe_not_equal, {
      ariaLabel: 0,
      iconId: 5,
      size: 6,
      color: 1,
      fill: 7
    });
  }
};
var icon_default = Icon;

// src/svelte/app/services/file-icon.ts
var import_js_logger2 = __toESM(require_logger());
var getIconIdForFile = (baseName, extension) => {
  if (baseName.endsWith(".excalidraw")) {
    return "excalidraw-icon";
  }
  switch (extension) {
    case "md":
      return "file";
    case "canvas":
      return "layout-dashboard";
    case "zip":
      return "file-archive";
    case "png":
    case "jpg":
    case "jpeg":
    case "gif":
    case "webp":
    case "svg":
    case "avif":
    case "bmp":
      return "file-image";
    case "mp3":
    case "wav":
    case "aac":
    case "flac":
    case "ogg":
    case "wma":
    case "alac":
    case "aiff":
      return "file-audio";
    case "mp4":
    case "avi":
    case "mkv":
    case "mov":
    case "wmv":
    case "flv":
    case "webm":
    case "mpeg":
    case "m4v":
    case "3gp":
      return "file-video";
    case "xls":
    case "xlsx":
      return "file-spreadsheet";
    case "xml":
    case "json":
      return "file-code";
    case "ppt":
    case "pptx":
      return "images";
    case "doc":
    case "docx":
      return "file-type";
    case "pdf":
    case "txt":
      return "file-text";
    default:
      import_js_logger2.default.warn(`No icon found for file extension: ${extension}`);
      return "file";
  }
};

// src/svelte/shared/services/license.ts
var import_js_logger4 = __toESM(require_logger());
var import_obsidian3 = require("obsidian");

// src/svelte/shared/services/device-id-utils.ts
var import_js_logger3 = __toESM(require_logger());
var LOCAL_STORAGE_KEY = "vault-explorer-id";
var loadDeviceId = () => {
  import_js_logger3.default.trace({ fileName: "license-utils.ts", functionName: "loadDeviceId", message: "called" });
  const deviceId = localStorage.getItem(LOCAL_STORAGE_KEY);
  if (deviceId !== null) {
    import_js_logger3.default.trace({ fileName: "license-utils.ts", functionName: "loadDeviceId", message: "found device id" });
  } else {
    import_js_logger3.default.trace({ fileName: "license-utils.ts", functionName: "loadDeviceId", message: "creating device id" });
    const newDeviceId = generateRandomDeviceId();
    localStorage.setItem(LOCAL_STORAGE_KEY, newDeviceId);
  }
};
var readDeviceId = () => {
  import_js_logger3.default.trace({ fileName: "license-utils.ts", functionName: "readDeviceId", message: "called" });
  const deviceId = localStorage.getItem(LOCAL_STORAGE_KEY);
  if (deviceId === null) {
    throw new Error("Device id not found. Please call loadDeviceId() first.");
  }
  return deviceId;
};

// src/svelte/shared/services/license.ts
var LICENSE_KEY_LENGTH = 8;
var LOCAL_STORAGE_LICENSE_KEY = "vault-explorer-license-key";
var LOCAL_STORAGE_DEVICE_REGISTERED = "vault-explorer-device-registration";
var License = class {
  constructor() {
    this.isDeviceRegisteredStore = writable();
    const storedDeviceRegistered = this.getStoredDeviceRegistered();
    this.isDeviceRegistered = storedDeviceRegistered;
    this.isDeviceRegisteredStore.set(storedDeviceRegistered);
    import_js_logger4.default.debug({ fileName: "license.ts", functionName: "constructor", message: "loaded stored device registration" }, storedDeviceRegistered);
    this.responseMessage = "";
    const storedKey = this.getStoredLicenseKey();
    this.licenseKey = storedKey;
    import_js_logger4.default.debug({ fileName: "license.ts", functionName: "constructor", message: "loaded stored license key" }, storedKey);
  }
  async registerDevice(licenseKey) {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "registerDevice", message: "called" });
    const deviceId = readDeviceId();
    const result = await this.postRegisterDevice(licenseKey, deviceId);
    if (result) {
      this.updateDeviceRegistered(true);
      this.updateLicenseKey(licenseKey);
    }
    return result;
  }
  async unregisterDevice() {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "unregisterDevice", message: "called" });
    const deviceId = readDeviceId();
    const result = await this.postUnregisterDevice(this.licenseKey, deviceId);
    if (result) {
      this.updateLicenseKey("");
      this.updateDeviceRegistered(false);
    }
    return result;
  }
  async verifyLicense() {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "verifyLicense", message: "called" });
    if (this.licenseKey === "") {
      import_js_logger4.default.debug({ fileName: "license.ts", functionName: "verifyLicense", message: "no license key set. returning..." });
      return;
    } else if (this.licenseKey.length !== LICENSE_KEY_LENGTH) {
      import_js_logger4.default.debug({ fileName: "license.ts", functionName: "verifyLicense", message: "license key is not the correct length. returning..." });
      return;
    }
    const deviceId = readDeviceId();
    const result = await this.postVerifyDevice(this.licenseKey, deviceId);
    if (result) {
      this.updateDeviceRegistered(true);
    } else {
      this.updateDeviceRegistered(false);
    }
  }
  async postVerifyDevice(licenseKey, deviceId) {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "postVerifyDevice", message: "called" });
    try {
      const response = await (0, import_obsidian3.requestUrl)({
        url: "https://api.vaultexplorer.com/licenses/verify",
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          licenseKey,
          deviceId
        })
      });
      const body = response.json;
      import_js_logger4.default.debug({ fileName: "license.ts", functionName: "postVerifyDevice", message: "response" }, body);
      return true;
    } catch (err) {
      const error = err;
      import_js_logger4.default.error({ fileName: "license.ts", functionName: "postVerifyDevice", message: "error verifying device" }, error.message);
      if (error.message.contains("net::ERR_INTERNET_DISCONNECTED")) {
        const deviceRegistered = License.getInstance().getIsDeviceRegistered();
        import_js_logger4.default.debug({ fileName: "license.ts", functionName: "postVerifyDevice", message: "returning last deviceRegistered state" }, deviceRegistered);
        return deviceRegistered;
      }
      return false;
    }
  }
  async postRegisterDevice(licenseKey, deviceId) {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "postRegisterDevice", message: "called" });
    try {
      const response = await (0, import_obsidian3.requestUrl)({
        url: "https://api.vaultexplorer.com/licenses/register",
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          licenseKey,
          deviceId
        })
      });
      const body = response.json;
      import_js_logger4.default.debug({ fileName: "license.ts", functionName: "postRegisterDevice", message: "response" }, body);
      this.responseMessage = "Device successfully registered.";
      return true;
    } catch (err) {
      const error = err;
      let message = "";
      if (error.message.contains("net::ERR_INTERNET_DISCONNECTED")) {
        message = "Internet is disconnected. Please try again";
      } else if (error.message.contains("429")) {
        message = "Too many requests. Try again later";
      } else if (error.message.contains("404")) {
        message = "Invalid license key";
      } else if (error.message.contains("400")) {
        message = "Device already registered to this license";
      } else if (error.message.contains("402")) {
        message = "Maximum number of devices reached for this license key";
      } else if (error.message.contains("502")) {
        message = "Server is offline. Please try again later";
      } else {
        message = "Server error. Please open an issue on GitHub";
      }
      this.responseMessage = message;
      import_js_logger4.default.error({ fileName: "license.ts", functionName: "postRegisterDevice", message: "error registering device" }, error.message);
      return false;
    }
  }
  async postUnregisterDevice(licenseKey, deviceId) {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "postUnregisterDevice", message: "called" });
    try {
      const response = await (0, import_obsidian3.requestUrl)({
        url: "https://api.vaultexplorer.com/licenses/unregister",
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          licenseKey,
          deviceId
        })
      });
      const body = response.json;
      import_js_logger4.default.debug({ fileName: "license.ts", functionName: "postUnregisterDevice", message: "response" }, body);
      this.responseMessage = "";
      return true;
    } catch (err) {
      const error = err;
      let message = "";
      if (error.message.contains("net::ERR_INTERNET_DISCONNECTED")) {
        message = "Internet is disconnected. Please try again";
      } else if (error.message.contains("429")) {
        message = "Too many requests. Try again later";
      } else if (error.message.contains("400")) {
        message = "Device is not connected to a license key";
      } else if (error.message.contains("502")) {
        message = "Server is offline. Please try again later";
      } else {
        message = "Server error. Please open an issue on GitHub";
      }
      this.responseMessage = message;
      import_js_logger4.default.error({ fileName: "license.ts", functionName: "postUnregisterDevice", message: "error unregistering device" }, error.message);
      return false;
    }
  }
  /**
   * Sets the class licenseKey and updates local storage
   * @param value - The license key
   */
  updateLicenseKey(value) {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "updateLicenseKey", message: "called" });
    this.licenseKey = value;
    this.setStoredLicenseKey(value);
  }
  /**
   * Sets the class registration flag and updates local storage
   * @param value - The registration status of the device
   */
  updateDeviceRegistered(value) {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "updateDeviceRegistered", message: "called" });
    this.isDeviceRegistered = value;
    this.isDeviceRegisteredStore.set(value);
    this.setStoredDeviceRegistered(value);
  }
  setStoredLicenseKey(value) {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "setStoredLicenseKey", message: "called" });
    localStorage.setItem(LOCAL_STORAGE_LICENSE_KEY, value);
  }
  getStoredLicenseKey() {
    var _a;
    return (_a = localStorage.getItem(LOCAL_STORAGE_LICENSE_KEY)) != null ? _a : "";
  }
  getStoredDeviceRegistered() {
    const value = localStorage.getItem(LOCAL_STORAGE_DEVICE_REGISTERED);
    if (value) {
      return value === "true";
    }
    return false;
  }
  setStoredDeviceRegistered(value) {
    import_js_logger4.default.trace({ fileName: "license.ts", functionName: "setStoredDeviceRegistered", message: "called" });
    localStorage.setItem(LOCAL_STORAGE_DEVICE_REGISTERED, value.toString());
  }
  getIsDeviceRegistered() {
    return this.isDeviceRegistered;
  }
  getIsDeviceRegisteredStore() {
    return this.isDeviceRegisteredStore;
  }
  getLicenseKey() {
    return this.licenseKey;
  }
  getResponseMessage() {
    return this.responseMessage;
  }
  static getInstance() {
    if (!this.instance) {
      this.instance = new License();
    }
    return this.instance;
  }
};

// src/svelte/app/services/social-media-image.ts
var import_js_logger5 = __toESM(require_logger());
var import_obsidian4 = require("obsidian");
var fetchSocialMediaImage = async (url) => {
  import_js_logger5.default.trace({
    fileName: "social-media-image.ts",
    functionName: "fetchSocialMediaImage",
    message: "called"
  });
  try {
    const response = await (0, import_obsidian4.requestUrl)({
      url,
      method: "GET"
    });
    const html = response.text;
    const parser = new DOMParser();
    const document2 = parser.parseFromString(html, "text/html");
    const ogImage = getMetaTagContent(document2, "og:image");
    const twitterImage = getMetaTagContent(document2, "twitter:image");
    const imageUrl = ogImage || twitterImage;
    if (imageUrl) {
      import_js_logger5.default.debug(
        {
          fileName: "social-media-image.ts",
          functionName: "fetchSocialMediaImage",
          message: "found image"
        },
        { imageUrl }
      );
    } else {
      import_js_logger5.default.warn(
        {
          fileName: "social-media-image.ts",
          functionName: "fetchSocialMediaImage",
          message: "no image found"
        },
        { url }
      );
    }
    return imageUrl != null ? imageUrl : null;
  } catch (error) {
    import_js_logger5.default.error(
      {
        fileName: "social-media-image.ts",
        functionName: "fetchSocialMediaImage",
        message: "failed to fetch"
      },
      { url, error }
    );
    return null;
  }
};
var getMetaTagContent = (document2, property) => {
  const tag = document2.querySelector(`meta[property='${property}']`) || document2.querySelector(`meta[name='${property}']`);
  return tag ? tag.getAttribute("content") : "";
};

// src/svelte/app/components/grid-card-container.svelte
function create_if_block_1(ctx) {
  let div;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "tabindex", "0");
      attr(div, "role", "button");
      attr(div, "class", "vault-explorer-grid-card vault-explorer-grid-card--interactive svelte-1a5btws");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            div,
            "click",
            /*handleClick*/
            ctx[1]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[6]
          ),
          listen(
            div,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[7]
          ),
          listen(div, "focus", focus_handler),
          listen(
            div,
            "mouseover",
            /*mouseover_handler*/
            ctx[5]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", "vault-explorer-grid-card svelte-1a5btws");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment12(ctx) {
  let t;
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*fileInteractionStyle*/
    ctx[0] === "content" && create_if_block_1(ctx)
  );
  let if_block1 = (
    /*fileInteractionStyle*/
    ctx[0] === "title" && create_if_block(ctx)
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*fileInteractionStyle*/
        ctx2[0] === "content"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_1(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t.parentNode, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*fileInteractionStyle*/
        ctx2[0] === "title"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(if_block1_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
var focus_handler = () => {
};
function instance12($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { fileInteractionStyle } = $$props;
  const dispatch = createEventDispatcher();
  function handleClick() {
    dispatch("click");
  }
  function handleContextMenu(e) {
    dispatch("contextmenu", { nativeEvent: e });
  }
  function mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  const keydown_handler = (e) => {
    if (e.key === "Enter" || e.key === " ") {
      handleClick();
    }
  };
  const contextmenu_handler = (e) => {
    e.preventDefault();
    handleContextMenu(e);
  };
  $$self.$$set = ($$props2) => {
    if ("fileInteractionStyle" in $$props2)
      $$invalidate(0, fileInteractionStyle = $$props2.fileInteractionStyle);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  return [
    fileInteractionStyle,
    handleClick,
    handleContextMenu,
    $$scope,
    slots,
    mouseover_handler,
    keydown_handler,
    contextmenu_handler
  ];
}
var Grid_card_container = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance12, create_fragment12, safe_not_equal, { fileInteractionStyle: 0 });
  }
};
var grid_card_container_default = Grid_card_container;

// src/svelte/app/components/grid-card-title.svelte
function create_if_block_12(ctx) {
  let div;
  let div_class_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "tabindex", "0");
      attr(div, "role", "link");
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-f88w03");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(div, "focus", focus_handler2),
          listen(
            div,
            "click",
            /*click_handler*/
            ctx[7]
          ),
          listen(
            div,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[8]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[9]
          ),
          listen(
            div,
            "mouseover",
            /*mouseover_handler*/
            ctx[6]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-f88w03")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block2(ctx) {
  let div;
  let div_class_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-f88w03");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-f88w03")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment13(ctx) {
  let t;
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*fileInteractionStyle*/
    ctx[0] === "title" && create_if_block_12(ctx)
  );
  let if_block1 = (
    /*fileInteractionStyle*/
    ctx[0] === "content" && create_if_block2(ctx)
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*fileInteractionStyle*/
        ctx2[0] === "title"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_12(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t.parentNode, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*fileInteractionStyle*/
        ctx2[0] === "content"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block2(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(if_block1_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
var focus_handler2 = () => {
};
function instance13($$self, $$props, $$invalidate) {
  let className;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { fileInteractionStyle } = $$props;
  const dispatch = createEventDispatcher();
  function handleClick() {
    dispatch("click");
  }
  function handleContextMenu(e) {
    dispatch("contextmenu", { nativeEvent: e });
  }
  function mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  const click_handler = (e) => {
    e.preventDefault();
    handleClick();
  };
  const contextmenu_handler = (e) => {
    e.preventDefault();
    handleContextMenu(e);
  };
  const keydown_handler = (e) => {
    if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      handleClick();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("fileInteractionStyle" in $$props2)
      $$invalidate(0, fileInteractionStyle = $$props2.fileInteractionStyle);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*fileInteractionStyle*/
    1) {
      $:
        $$invalidate(1, className = `vault-explorer-grid-card__title ${fileInteractionStyle === "content" ? "" : "vault-explorer-grid-card__title--interactive"}`);
    }
  };
  return [
    fileInteractionStyle,
    className,
    handleClick,
    handleContextMenu,
    $$scope,
    slots,
    mouseover_handler,
    click_handler,
    contextmenu_handler,
    keydown_handler
  ];
}
var Grid_card_title = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance13, create_fragment13, safe_not_equal, { fileInteractionStyle: 0 });
  }
};
var grid_card_title_default = Grid_card_title;

// src/svelte/app/services/context-menu.ts
var import_obsidian5 = require("obsidian");
var openContextMenu = (plugin2, filePath, e, {
  isFavorite,
  onFavoriteChange
}) => {
  const menu = new import_obsidian5.Menu();
  menu.setUseNativeMenu(true);
  menu.addItem((item) => {
    item.setTitle("Open in new tab");
    item.onClick(() => openInNewTab(plugin2, filePath));
  });
  menu.addItem((item) => {
    item.setTitle("Open to the right");
    item.onClick(() => openToTheRight(plugin2, filePath));
  });
  menu.addItem((item) => {
    item.setTitle("Open in new window");
    item.onClick(() => openInNewWindow(plugin2, filePath));
  });
  menu.addSeparator();
  menu.addItem((item) => {
    item.setTitle(
      isFavorite ? "Remove from favorites" : "Add to favorites"
    );
    item.onClick(() => {
      const newValue = isFavorite !== null ? !isFavorite : true;
      onFavoriteChange(filePath, newValue);
    });
  });
  menu.showAtMouseEvent(e);
};
var openToTheRight = (plugin2, filePath) => {
  plugin2.app.workspace.openLinkText("", filePath, "split", {
    active: false
  });
};
var openInNewTab = (plugin2, filePath) => {
  plugin2.app.workspace.openLinkText("", filePath, "tab", {
    active: false
  });
};
var openInNewWindow = (plugin2, filePath) => {
  plugin2.app.workspace.openLinkText("", filePath, "window");
};

// src/svelte/app/services/open-file.ts
var openInCurrentTab = (plugin2, filePath) => {
  const leaves = plugin2.app.workspace.getLeavesOfType("markdown");
  const leaf = leaves.find((leaf2) => {
    var _a, _b;
    return ((_b = (_a = leaf2.view.file) == null ? void 0 : _a.path) != null ? _b : "") === filePath;
  });
  if (leaf) {
    plugin2.app.workspace.setActiveLeaf(leaf);
  } else {
    plugin2.app.workspace.openLinkText("", filePath, "tab", {
      active: true
    });
  }
};

// src/svelte/app/components/grid-card.svelte
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i];
  return child_ctx;
}
function create_if_block_8(ctx) {
  let img;
  let img_src_value;
  return {
    c() {
      img = element("img");
      attr(img, "class", "vault-explorer-grid-card__image svelte-crb4qu");
      if (!src_url_equal(img.src, img_src_value = /*imageUrl*/
      ctx[0]))
        attr(img, "src", img_src_value);
    },
    m(target, anchor) {
      insert(target, img, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*imageUrl*/
      1 && !src_url_equal(img.src, img_src_value = /*imageUrl*/
      ctx2[0])) {
        attr(img, "src", img_src_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(img);
      }
    }
  };
}
function create_if_block_7(ctx) {
  let div;
  let flex;
  let current;
  flex = new flex_default({
    props: {
      justify: "center",
      align: "center",
      width: "100%",
      height: "100%",
      $$slots: { default: [create_default_slot_6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(flex.$$.fragment);
      attr(div, "class", "vault-explorer-grid-card__favorite svelte-crb4qu");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(flex, div, null);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(flex.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(flex.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(flex);
    }
  };
}
function create_default_slot_6(ctx) {
  let icon;
  let current;
  icon = new icon_default({
    props: { iconId: "star", ariaLabel: "Favorite" }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block_6(ctx) {
  let icon;
  let current;
  icon = new icon_default({
    props: {
      iconId: getIconIdForFile(
        /*baseName*/
        ctx[2],
        /*extension*/
        ctx[3]
      )
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[0] & /*baseName, extension*/
      12)
        icon_changes.iconId = getIconIdForFile(
          /*baseName*/
          ctx2[2],
          /*extension*/
          ctx2[3]
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_default_slot_5(ctx) {
  let t0;
  let div;
  let t1;
  let current;
  let if_block = (
    /*enableFileIcons*/
    ctx[11] && create_if_block_6(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t0 = space();
      div = element("div");
      t1 = text(
        /*displayName*/
        ctx[1]
      );
      attr(div, "class", "vault-explorer-grid-card__title-text svelte-crb4qu");
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t0, anchor);
      insert(target, div, anchor);
      append(div, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*enableFileIcons*/
        ctx2[11]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*enableFileIcons*/
          2048) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_6(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*displayName*/
      2)
        set_data(
          t1,
          /*displayName*/
          ctx2[1]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_default_slot_4(ctx) {
  let stack;
  let current;
  stack = new stack_default({
    props: {
      spacing: "xs",
      $$slots: { default: [create_default_slot_5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty[0] & /*displayName, baseName, extension, enableFileIcons*/
      2062 | dirty[1] & /*$$scope*/
      1) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(stack, detaching);
    }
  };
}
function create_if_block_5(ctx) {
  let iconbutton;
  let current;
  iconbutton = new icon_button_default({
    props: {
      iconId: "external-link",
      ariaLabel: "Open in browser",
      noPadding: true
    }
  });
  iconbutton.$on(
    "click",
    /*handleUrlClick*/
    ctx[14]
  );
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_if_block_4(ctx) {
  let div;
  let wrap;
  let current;
  wrap = new wrap_default({
    props: {
      spacingX: "sm",
      spacingY: "sm",
      $$slots: { default: [create_default_slot_3] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(wrap.$$.fragment);
      attr(div, "class", "vault-explorer-grid-card__tags");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(wrap, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const wrap_changes = {};
      if (dirty[0] & /*tags*/
      32 | dirty[1] & /*$$scope*/
      1) {
        wrap_changes.$$scope = { dirty, ctx: ctx2 };
      }
      wrap.$set(wrap_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(wrap.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(wrap.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(wrap);
    }
  };
}
function create_each_block(ctx) {
  let tag_1;
  let current;
  tag_1 = new tag_default({ props: { name: (
    /*tag*/
    ctx[28]
  ) } });
  return {
    c() {
      create_component(tag_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tag_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tag_1_changes = {};
      if (dirty[0] & /*tags*/
      32)
        tag_1_changes.name = /*tag*/
        ctx2[28];
      tag_1.$set(tag_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(tag_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tag_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tag_1, detaching);
    }
  };
}
function create_default_slot_3(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*tags*/
    ctx[5]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*tags*/
      32) {
        each_value = ensure_array_like(
          /*tags*/
          ctx2[5]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block3(ctx) {
  let div;
  let wrap;
  let current;
  wrap = new wrap_default({
    props: {
      spacingX: "xs",
      spacingY: "xs",
      $$slots: { default: [create_default_slot_2] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(wrap.$$.fragment);
      attr(div, "class", "vault-explorer-grid-card__properties");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(wrap, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const wrap_changes = {};
      if (dirty[0] & /*plugin, custom3, custom2, custom1*/
      1472 | dirty[1] & /*$$scope*/
      1) {
        wrap_changes.$$scope = { dirty, ctx: ctx2 };
      }
      wrap.$set(wrap_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(wrap.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(wrap.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(wrap);
    }
  };
}
function create_if_block_3(ctx) {
  let property;
  let current;
  property = new property_default({
    props: {
      name: (
        /*plugin*/
        ctx[10].settings.properties.custom1
      ),
      value: (
        /*custom1*/
        ctx[6]
      )
    }
  });
  return {
    c() {
      create_component(property.$$.fragment);
    },
    m(target, anchor) {
      mount_component(property, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const property_changes = {};
      if (dirty[0] & /*plugin*/
      1024)
        property_changes.name = /*plugin*/
        ctx2[10].settings.properties.custom1;
      if (dirty[0] & /*custom1*/
      64)
        property_changes.value = /*custom1*/
        ctx2[6];
      property.$set(property_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(property.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(property.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(property, detaching);
    }
  };
}
function create_if_block_2(ctx) {
  let property;
  let current;
  property = new property_default({
    props: {
      name: (
        /*plugin*/
        ctx[10].settings.properties.custom2
      ),
      value: (
        /*custom2*/
        ctx[7]
      )
    }
  });
  return {
    c() {
      create_component(property.$$.fragment);
    },
    m(target, anchor) {
      mount_component(property, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const property_changes = {};
      if (dirty[0] & /*plugin*/
      1024)
        property_changes.name = /*plugin*/
        ctx2[10].settings.properties.custom2;
      if (dirty[0] & /*custom2*/
      128)
        property_changes.value = /*custom2*/
        ctx2[7];
      property.$set(property_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(property.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(property.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(property, detaching);
    }
  };
}
function create_if_block_13(ctx) {
  let property;
  let current;
  property = new property_default({
    props: {
      name: (
        /*plugin*/
        ctx[10].settings.properties.custom3
      ),
      value: (
        /*custom3*/
        ctx[8]
      )
    }
  });
  return {
    c() {
      create_component(property.$$.fragment);
    },
    m(target, anchor) {
      mount_component(property, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const property_changes = {};
      if (dirty[0] & /*plugin*/
      1024)
        property_changes.name = /*plugin*/
        ctx2[10].settings.properties.custom3;
      if (dirty[0] & /*custom3*/
      256)
        property_changes.value = /*custom3*/
        ctx2[8];
      property.$set(property_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(property.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(property.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(property, detaching);
    }
  };
}
function create_default_slot_2(ctx) {
  let t0;
  let t1;
  let if_block2_anchor;
  let current;
  let if_block0 = (
    /*custom1*/
    ctx[6] !== null && create_if_block_3(ctx)
  );
  let if_block1 = (
    /*custom2*/
    ctx[7] !== null && create_if_block_2(ctx)
  );
  let if_block2 = (
    /*custom3*/
    ctx[8] !== null && create_if_block_13(ctx)
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      if (if_block2)
        if_block2.c();
      if_block2_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t0, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t1, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, if_block2_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*custom1*/
        ctx2[6] !== null
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*custom1*/
          64) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_3(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*custom2*/
        ctx2[7] !== null
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*custom2*/
          128) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_2(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t1.parentNode, t1);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*custom3*/
        ctx2[8] !== null
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty[0] & /*custom3*/
          256) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_13(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(if_block2_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
      if (if_block2)
        if_block2.d(detaching);
    }
  };
}
function create_default_slot_1(ctx) {
  let div;
  let gridcardtitle;
  let t0;
  let t1;
  let t2;
  let if_block2_anchor;
  let current;
  gridcardtitle = new grid_card_title_default({
    props: {
      fileInteractionStyle: (
        /*fileInteractionStyle*/
        ctx[12]
      ),
      $$slots: { default: [create_default_slot_4] },
      $$scope: { ctx }
    }
  });
  gridcardtitle.$on(
    "click",
    /*handleTitleClick*/
    ctx[18]
  );
  gridcardtitle.$on(
    "contextmenu",
    /*handleTitleContextMenu*/
    ctx[19]
  );
  gridcardtitle.$on(
    "mouseover",
    /*handleTitleMouseOver*/
    ctx[20]
  );
  let if_block0 = (
    /*url*/
    ctx[4] !== null && create_if_block_5(ctx)
  );
  let if_block1 = (
    /*tags*/
    ctx[5] !== null && create_if_block_4(ctx)
  );
  let if_block2 = (
    /*custom1*/
    (ctx[6] !== null || /*custom2*/
    ctx[7] !== null || /*custom3*/
    ctx[8] !== null) && create_if_block3(ctx)
  );
  return {
    c() {
      div = element("div");
      create_component(gridcardtitle.$$.fragment);
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      t2 = space();
      if (if_block2)
        if_block2.c();
      if_block2_anchor = empty();
      attr(div, "class", "vault-explorer-grid-card__head svelte-crb4qu");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(gridcardtitle, div, null);
      append(div, t0);
      if (if_block0)
        if_block0.m(div, null);
      insert(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t2, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, if_block2_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const gridcardtitle_changes = {};
      if (dirty[0] & /*fileInteractionStyle*/
      4096)
        gridcardtitle_changes.fileInteractionStyle = /*fileInteractionStyle*/
        ctx2[12];
      if (dirty[0] & /*displayName, baseName, extension, enableFileIcons*/
      2062 | dirty[1] & /*$$scope*/
      1) {
        gridcardtitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      gridcardtitle.$set(gridcardtitle_changes);
      if (
        /*url*/
        ctx2[4] !== null
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*url*/
          16) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_5(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, null);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*tags*/
        ctx2[5] !== null
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*tags*/
          32) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_4(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t2.parentNode, t2);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*custom1*/
        ctx2[6] !== null || /*custom2*/
        ctx2[7] !== null || /*custom3*/
        ctx2[8] !== null
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty[0] & /*custom1, custom2, custom3*/
          448) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block3(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(gridcardtitle.$$.fragment, local);
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(gridcardtitle.$$.fragment, local);
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t1);
        detach(t2);
        detach(if_block2_anchor);
      }
      destroy_component(gridcardtitle);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d(detaching);
      if (if_block2)
        if_block2.d(detaching);
    }
  };
}
function create_default_slot2(ctx) {
  let div0;
  let t0;
  let t1;
  let div1;
  let stack;
  let current;
  let if_block0 = (
    /*imageUrl*/
    ctx[0] !== null && create_if_block_8(ctx)
  );
  let if_block1 = (
    /*isFavorite*/
    ctx[9] === true && create_if_block_7(ctx)
  );
  stack = new stack_default({
    props: {
      spacing: (
        /*hasBodyContent*/
        ctx[13] ? "sm" : "none"
      ),
      direction: "column",
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div0 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      div1 = element("div");
      create_component(stack.$$.fragment);
      attr(div0, "class", "vault-explorer-grid-card__cover svelte-crb4qu");
      attr(div1, "class", "vault-explorer-grid-card__content svelte-crb4qu");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      if (if_block0)
        if_block0.m(div0, null);
      append(div0, t0);
      if (if_block1)
        if_block1.m(div0, null);
      insert(target, t1, anchor);
      insert(target, div1, anchor);
      mount_component(stack, div1, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*imageUrl*/
        ctx2[0] !== null
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_8(ctx2);
          if_block0.c();
          if_block0.m(div0, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*isFavorite*/
        ctx2[9] === true
      ) {
        if (if_block1) {
          if (dirty[0] & /*isFavorite*/
          512) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_7(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div0, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      const stack_changes = {};
      if (dirty[0] & /*hasBodyContent*/
      8192)
        stack_changes.spacing = /*hasBodyContent*/
        ctx2[13] ? "sm" : "none";
      if (dirty[0] & /*plugin, custom3, custom2, custom1, tags, url, fileInteractionStyle, displayName, baseName, extension, enableFileIcons*/
      7678 | dirty[1] & /*$$scope*/
      1) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block1);
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block1);
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t1);
        detach(div1);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      destroy_component(stack);
    }
  };
}
function create_fragment14(ctx) {
  let gridcardcontainer;
  let current;
  gridcardcontainer = new grid_card_container_default({
    props: {
      fileInteractionStyle: (
        /*fileInteractionStyle*/
        ctx[12]
      ),
      $$slots: { default: [create_default_slot2] },
      $$scope: { ctx }
    }
  });
  gridcardcontainer.$on(
    "click",
    /*handleCardClick*/
    ctx[15]
  );
  gridcardcontainer.$on(
    "contextmenu",
    /*handleCardContextMenu*/
    ctx[16]
  );
  gridcardcontainer.$on(
    "mouseover",
    /*handleCardMouseOver*/
    ctx[17]
  );
  return {
    c() {
      create_component(gridcardcontainer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(gridcardcontainer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const gridcardcontainer_changes = {};
      if (dirty[0] & /*fileInteractionStyle*/
      4096)
        gridcardcontainer_changes.fileInteractionStyle = /*fileInteractionStyle*/
        ctx2[12];
      if (dirty[0] & /*hasBodyContent, plugin, custom3, custom2, custom1, tags, url, fileInteractionStyle, displayName, baseName, extension, enableFileIcons, isFavorite, imageUrl*/
      16383 | dirty[1] & /*$$scope*/
      1) {
        gridcardcontainer_changes.$$scope = { dirty, ctx: ctx2 };
      }
      gridcardcontainer.$set(gridcardcontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(gridcardcontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(gridcardcontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(gridcardcontainer, detaching);
    }
  };
}
function instance14($$self, $$props, $$invalidate) {
  let hasBodyContent;
  let { displayName } = $$props;
  let { path } = $$props;
  let { baseName } = $$props;
  let { extension } = $$props;
  let { url } = $$props;
  let { imageUrl } = $$props;
  let { tags } = $$props;
  let { custom1 } = $$props;
  let { custom2 } = $$props;
  let { custom3 } = $$props;
  let { isFavorite } = $$props;
  let plugin2;
  let wordBreak = "normal";
  let enableFileIcons = false;
  let loadSocialMediaImage = true;
  let isDeviceRegistered = false;
  let fileInteractionStyle = "content";
  store_default.plugin.subscribe((p) => {
    $$invalidate(10, plugin2 = p);
    wordBreak = plugin2.settings.titleWrapping;
    $$invalidate(12, fileInteractionStyle = plugin2.settings.fileInteractionStyle);
    $$invalidate(11, enableFileIcons = plugin2.settings.enableFileIcons);
    $$invalidate(22, loadSocialMediaImage = plugin2.settings.views.grid.loadSocialMediaImage);
  });
  const dispatch = createEventDispatcher();
  License.getInstance().getIsDeviceRegisteredStore().subscribe((isRegistered) => {
    isDeviceRegistered = isRegistered;
  });
  onMount(() => {
    getSocialImageUrl();
  });
  onMount(() => {
    function handleFileInteractionStyleChange() {
      $$invalidate(12, fileInteractionStyle = plugin2.settings.fileInteractionStyle);
    }
    EventManager.getInstance().on("file-interaction-style-setting-change" /* FILE_INTERACTION_STYLE */, handleFileInteractionStyleChange);
    return () => {
      EventManager.getInstance().off("file-interaction-style-setting-change" /* FILE_INTERACTION_STYLE */, handleFileInteractionStyleChange);
    };
  });
  onMount(() => {
    function handleLoadSocialMediaImageChange() {
      $$invalidate(22, loadSocialMediaImage = plugin2.settings.views.grid.loadSocialMediaImage);
    }
    EventManager.getInstance().on("load-social-media-image-setting-change" /* LOAD_SOCIAL_MEDIA_IMAGE_SETTING_CHANGE */, handleLoadSocialMediaImageChange);
    return () => {
      EventManager.getInstance().off("load-social-media-image-setting-change" /* LOAD_SOCIAL_MEDIA_IMAGE_SETTING_CHANGE */, handleLoadSocialMediaImageChange);
    };
  });
  onMount(() => {
    function handleFileIconsChange() {
      $$invalidate(11, enableFileIcons = plugin2.settings.enableFileIcons);
    }
    EventManager.getInstance().on("file-icons-setting-change" /* FILE_ICONS_SETTING_CHANGE */, handleFileIconsChange);
    return () => {
      EventManager.getInstance().off("file-icons-setting-change" /* FILE_ICONS_SETTING_CHANGE */, handleFileIconsChange);
    };
  });
  onMount(() => {
    function handleTitleWrappingSettingChange() {
      wordBreak = plugin2.settings.titleWrapping;
    }
    EventManager.getInstance().on("title-wrapping-setting-change" /* TITLE_WRAPPING_SETTING_CHANGE */, handleTitleWrappingSettingChange);
    return () => {
      EventManager.getInstance().off("title-wrapping-setting-change" /* TITLE_WRAPPING_SETTING_CHANGE */, handleTitleWrappingSettingChange);
    };
  });
  function handleUrlClick(e) {
    const { nativeEvent } = e.detail;
    nativeEvent.stopPropagation();
    if (url != null) {
      window.open(url, "_blank");
    }
  }
  function getSocialImageUrl() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!isDeviceRegistered)
        return;
      if (!loadSocialMediaImage)
        return;
      if (imageUrl === null && url !== null) {
        $$invalidate(0, imageUrl = yield fetchSocialMediaImage(url));
      }
    });
  }
  function handleCardClick() {
    openInCurrentTab(plugin2, path);
  }
  function handleFavoriteChange(filePath, value) {
    dispatch("favoritePropertyChange", { filePath, value });
  }
  function handleCardContextMenu(e) {
    const { nativeEvent } = e.detail;
    openContextMenu(plugin2, path, nativeEvent, {
      isFavorite,
      onFavoriteChange: handleFavoriteChange
    });
  }
  function handleCardMouseOver(e) {
    const targetEl = e.currentTarget;
    plugin2.app.workspace.trigger("hover-link", {
      event: e,
      linktext: path,
      source: HOVER_LINK_SOURCE_ID,
      targetEl,
      hoverParent: targetEl.parentElement
    });
  }
  function handleTitleClick() {
    handleCardClick();
  }
  function handleTitleContextMenu(e) {
    handleCardContextMenu(e);
  }
  function handleTitleMouseOver(e) {
    handleCardMouseOver(e);
  }
  $$self.$$set = ($$props2) => {
    if ("displayName" in $$props2)
      $$invalidate(1, displayName = $$props2.displayName);
    if ("path" in $$props2)
      $$invalidate(21, path = $$props2.path);
    if ("baseName" in $$props2)
      $$invalidate(2, baseName = $$props2.baseName);
    if ("extension" in $$props2)
      $$invalidate(3, extension = $$props2.extension);
    if ("url" in $$props2)
      $$invalidate(4, url = $$props2.url);
    if ("imageUrl" in $$props2)
      $$invalidate(0, imageUrl = $$props2.imageUrl);
    if ("tags" in $$props2)
      $$invalidate(5, tags = $$props2.tags);
    if ("custom1" in $$props2)
      $$invalidate(6, custom1 = $$props2.custom1);
    if ("custom2" in $$props2)
      $$invalidate(7, custom2 = $$props2.custom2);
    if ("custom3" in $$props2)
      $$invalidate(8, custom3 = $$props2.custom3);
    if ("isFavorite" in $$props2)
      $$invalidate(9, isFavorite = $$props2.isFavorite);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*loadSocialMediaImage*/
    4194304) {
      $:
        loadSocialMediaImage, getSocialImageUrl();
    }
    if ($$self.$$.dirty[0] & /*tags, custom1, custom2, custom3*/
    480) {
      $:
        $$invalidate(13, hasBodyContent = tags != null || custom1 != null || custom2 != null || custom3 != null);
    }
  };
  return [
    imageUrl,
    displayName,
    baseName,
    extension,
    url,
    tags,
    custom1,
    custom2,
    custom3,
    isFavorite,
    plugin2,
    enableFileIcons,
    fileInteractionStyle,
    hasBodyContent,
    handleUrlClick,
    handleCardClick,
    handleCardContextMenu,
    handleCardMouseOver,
    handleTitleClick,
    handleTitleContextMenu,
    handleTitleMouseOver,
    path,
    loadSocialMediaImage
  ];
}
var Grid_card = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance14,
      create_fragment14,
      safe_not_equal,
      {
        displayName: 1,
        path: 21,
        baseName: 2,
        extension: 3,
        url: 4,
        imageUrl: 0,
        tags: 5,
        custom1: 6,
        custom2: 7,
        custom3: 8,
        isFavorite: 9
      },
      null,
      [-1, -1]
    );
  }
};
var grid_card_default = Grid_card;

// src/svelte/app/components/grid-view.svelte
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[5] = list[i];
  return child_ctx;
}
function create_each_block2(key_1, ctx) {
  let first;
  let gridcard;
  let current;
  gridcard = new grid_card_default({
    props: {
      displayName: (
        /*fileRenderData*/
        ctx[5].displayName
      ),
      path: (
        /*fileRenderData*/
        ctx[5].path
      ),
      baseName: (
        /*fileRenderData*/
        ctx[5].baseName
      ),
      extension: (
        /*fileRenderData*/
        ctx[5].extension
      ),
      imageUrl: (
        /*fileRenderData*/
        ctx[5].imageUrl
      ),
      url: (
        /*fileRenderData*/
        ctx[5].url
      ),
      tags: (
        /*fileRenderData*/
        ctx[5].tags
      ),
      custom1: (
        /*fileRenderData*/
        ctx[5].custom1
      ),
      custom2: (
        /*fileRenderData*/
        ctx[5].custom2
      ),
      custom3: (
        /*fileRenderData*/
        ctx[5].custom3
      ),
      isFavorite: (
        /*fileRenderData*/
        ctx[5].isFavorite
      )
    }
  });
  gridcard.$on(
    "favoritePropertyChange",
    /*favoritePropertyChange_handler*/
    ctx[4]
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(gridcard.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(gridcard, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const gridcard_changes = {};
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.displayName = /*fileRenderData*/
        ctx[5].displayName;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.path = /*fileRenderData*/
        ctx[5].path;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.baseName = /*fileRenderData*/
        ctx[5].baseName;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.extension = /*fileRenderData*/
        ctx[5].extension;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.imageUrl = /*fileRenderData*/
        ctx[5].imageUrl;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.url = /*fileRenderData*/
        ctx[5].url;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.tags = /*fileRenderData*/
        ctx[5].tags;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.custom1 = /*fileRenderData*/
        ctx[5].custom1;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.custom2 = /*fileRenderData*/
        ctx[5].custom2;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.custom3 = /*fileRenderData*/
        ctx[5].custom3;
      if (dirty & /*filteredItems*/
      1)
        gridcard_changes.isFavorite = /*fileRenderData*/
        ctx[5].isFavorite;
      gridcard.$set(gridcard_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(gridcard.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(gridcard.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      destroy_component(gridcard, detaching);
    }
  };
}
function create_fragment15(ctx) {
  let div1;
  let div0;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let current;
  let each_value = ensure_array_like(
    /*filteredItems*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*fileRenderData*/
    ctx2[5].id
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context2(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block2(key, child_ctx));
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div0, "class", "vault-explorer-grid-view__container svelte-q9ur25");
      attr(div1, "class", "vault-explorer-grid-view");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*filteredItems*/
      1) {
        each_value = ensure_array_like(
          /*filteredItems*/
          ctx2[0]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div0, outro_and_destroy_block, create_each_block2, null, get_each_context2);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }
  };
}
function instance15($$self, $$props, $$invalidate) {
  let { data } = $$props;
  let { startIndex } = $$props;
  let { pageLength } = $$props;
  let filteredItems = [];
  function favoritePropertyChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2)
      $$invalidate(1, data = $$props2.data);
    if ("startIndex" in $$props2)
      $$invalidate(2, startIndex = $$props2.startIndex);
    if ("pageLength" in $$props2)
      $$invalidate(3, pageLength = $$props2.pageLength);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*startIndex, data, pageLength*/
    14) {
      $: {
        if (startIndex < data.length) {
          $$invalidate(0, filteredItems = Array.from({ length: pageLength }, (_3, i) => {
            const index = startIndex + i;
            return data[index];
          }));
        } else {
          $$invalidate(0, filteredItems = []);
        }
      }
    }
  };
  return [filteredItems, data, startIndex, pageLength, favoritePropertyChange_handler];
}
var Grid_view = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance15, create_fragment15, safe_not_equal, { data: 1, startIndex: 2, pageLength: 3 });
  }
};
var grid_view_default = Grid_view;

// src/svelte/app/components/list-item-container.svelte
function create_if_block_14(ctx) {
  let div;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "tabindex", "0");
      attr(div, "role", "button");
      attr(div, "class", "vault-explorer-list-item vault-explorer-list-item--interactive svelte-17s3hb9");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[7](div);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            div,
            "click",
            /*handleClick*/
            ctx[2]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[8]
          ),
          listen(
            div,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[9]
          ),
          listen(div, "focus", focus_handler3),
          listen(
            div,
            "mouseover",
            /*mouseover_handler*/
            ctx[6]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[7](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block4(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", "vault-explorer-list-item svelte-17s3hb9");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[10](div);
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[10](null);
    }
  };
}
function create_fragment16(ctx) {
  let t;
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*fileInteractionStyle*/
    ctx[1] === "content" && create_if_block_14(ctx)
  );
  let if_block1 = (
    /*fileInteractionStyle*/
    ctx[1] === "title" && create_if_block4(ctx)
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*fileInteractionStyle*/
        ctx2[1] === "content"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_14(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t.parentNode, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*fileInteractionStyle*/
        ctx2[1] === "title"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block4(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(if_block1_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
var focus_handler3 = () => {
};
function instance16($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { fileInteractionStyle } = $$props;
  let { ref = null } = $$props;
  const dispatch = createEventDispatcher();
  function handleClick() {
    dispatch("click");
  }
  function handleContextMenu(e) {
    dispatch("contextmenu", { nativeEvent: e });
  }
  function mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(0, ref);
    });
  }
  const keydown_handler = (e) => {
    if (e.key === "Enter" || e.key === " ") {
      handleClick();
    }
  };
  const contextmenu_handler = (e) => {
    e.preventDefault();
    handleContextMenu(e);
  };
  function div_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(0, ref);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("fileInteractionStyle" in $$props2)
      $$invalidate(1, fileInteractionStyle = $$props2.fileInteractionStyle);
    if ("ref" in $$props2)
      $$invalidate(0, ref = $$props2.ref);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  return [
    ref,
    fileInteractionStyle,
    handleClick,
    handleContextMenu,
    $$scope,
    slots,
    mouseover_handler,
    div_binding,
    keydown_handler,
    contextmenu_handler,
    div_binding_1
  ];
}
var List_item_container = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance16, create_fragment16, safe_not_equal, { fileInteractionStyle: 1, ref: 0 });
  }
};
var list_item_container_default = List_item_container;

// src/svelte/app/components/list-item-title.svelte
function create_if_block_15(ctx) {
  let div;
  let div_class_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "tabindex", "0");
      attr(div, "role", "link");
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-13dume7");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(div, "focus", focus_handler4),
          listen(
            div,
            "click",
            /*click_handler*/
            ctx[8]
          ),
          listen(
            div,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[9]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[10]
          ),
          listen(
            div,
            "mouseover",
            /*mouseover_handler*/
            ctx[7]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-13dume7")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block5(ctx) {
  let div;
  let div_class_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[6].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[5],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-13dume7");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[5],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[5]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[5],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-13dume7")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment17(ctx) {
  let t;
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*fileInteractionStyle*/
    ctx[0] === "title" && create_if_block_15(ctx)
  );
  let if_block1 = (
    /*fileInteractionStyle*/
    ctx[0] === "content" && create_if_block5(ctx)
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*fileInteractionStyle*/
        ctx2[0] === "title"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_15(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t.parentNode, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*fileInteractionStyle*/
        ctx2[0] === "content"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block5(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(if_block1_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
var focus_handler4 = () => {
};
function instance17($$self, $$props, $$invalidate) {
  let className;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { fileInteractionStyle } = $$props;
  let { isSmallScreenSize } = $$props;
  const dispatch = createEventDispatcher();
  function handleClick() {
    dispatch("click");
  }
  function handleContextMenu(e) {
    dispatch("contextmenu", { nativeEvent: e });
  }
  function mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  const click_handler = (e) => {
    e.preventDefault();
    handleClick();
  };
  const contextmenu_handler = (e) => {
    e.preventDefault();
    handleContextMenu(e);
  };
  const keydown_handler = (e) => {
    if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      handleClick();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("fileInteractionStyle" in $$props2)
      $$invalidate(0, fileInteractionStyle = $$props2.fileInteractionStyle);
    if ("isSmallScreenSize" in $$props2)
      $$invalidate(4, isSmallScreenSize = $$props2.isSmallScreenSize);
    if ("$$scope" in $$props2)
      $$invalidate(5, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*fileInteractionStyle, isSmallScreenSize*/
    17) {
      $:
        $$invalidate(1, className = `vault-explorer-list-item__title ${fileInteractionStyle === "content" ? "" : "vault-explorer-list-item__title--interactive"} ${isSmallScreenSize ? "vault-explorer-list-item__title--screen-size-sm" : ""}`);
    }
  };
  return [
    fileInteractionStyle,
    className,
    handleClick,
    handleContextMenu,
    isSmallScreenSize,
    $$scope,
    slots,
    mouseover_handler,
    click_handler,
    contextmenu_handler,
    keydown_handler
  ];
}
var List_item_title = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance17, create_fragment17, safe_not_equal, {
      fileInteractionStyle: 0,
      isSmallScreenSize: 4
    });
  }
};
var list_item_title_default = List_item_title;

// src/svelte/app/constants.ts
var DEBOUNCE_INPUT_TIME = 300;
var SCREEN_SIZE_MD = 600;
var SCREEN_SIZE_LG = 1024;

// src/svelte/app/components/list-item.svelte
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[22] = list[i];
  return child_ctx;
}
function create_if_block_16(ctx) {
  let icon;
  let current;
  icon = new icon_default({
    props: {
      iconId: getIconIdForFile(
        /*baseName*/
        ctx[1],
        /*extension*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty & /*baseName, extension*/
      6)
        icon_changes.iconId = getIconIdForFile(
          /*baseName*/
          ctx2[1],
          /*extension*/
          ctx2[2]
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_default_slot_42(ctx) {
  let t0;
  let div;
  let t1;
  let current;
  let if_block = (
    /*enableFileIcons*/
    ctx[5] && create_if_block_16(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t0 = space();
      div = element("div");
      t1 = text(
        /*displayName*/
        ctx[0]
      );
      attr(div, "class", "vault-explorer-list-item__title-text svelte-1hnshi");
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t0, anchor);
      insert(target, div, anchor);
      append(div, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*enableFileIcons*/
        ctx2[5]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*enableFileIcons*/
          32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_16(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty & /*displayName*/
      1)
        set_data(
          t1,
          /*displayName*/
          ctx2[0]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_default_slot_32(ctx) {
  let stack;
  let current;
  stack = new stack_default({
    props: {
      spacing: "xs",
      $$slots: { default: [create_default_slot_42] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty & /*$$scope, displayName, baseName, extension, enableFileIcons*/
      33554471) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(stack, detaching);
    }
  };
}
function create_if_block6(ctx) {
  let wrap;
  let current;
  wrap = new wrap_default({
    props: {
      spacingX: "xs",
      spacingY: "xs",
      justify: (
        /*isSmallScreenSize*/
        ctx[4] ? "flex-start" : "flex-end"
      ),
      $$slots: { default: [create_default_slot_22] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(wrap.$$.fragment);
    },
    m(target, anchor) {
      mount_component(wrap, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const wrap_changes = {};
      if (dirty & /*isSmallScreenSize*/
      16)
        wrap_changes.justify = /*isSmallScreenSize*/
        ctx2[4] ? "flex-start" : "flex-end";
      if (dirty & /*$$scope, tags*/
      33554440) {
        wrap_changes.$$scope = { dirty, ctx: ctx2 };
      }
      wrap.$set(wrap_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(wrap.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(wrap.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(wrap, detaching);
    }
  };
}
function create_each_block3(ctx) {
  let tag_1;
  let current;
  tag_1 = new tag_default({
    props: {
      name: (
        /*tag*/
        ctx[22]
      ),
      variant: "unstyled"
    }
  });
  return {
    c() {
      create_component(tag_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tag_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tag_1_changes = {};
      if (dirty & /*tags*/
      8)
        tag_1_changes.name = /*tag*/
        ctx2[22];
      tag_1.$set(tag_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(tag_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tag_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tag_1, detaching);
    }
  };
}
function create_default_slot_22(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*tags*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*tags*/
      8) {
        each_value = ensure_array_like(
          /*tags*/
          ctx2[3]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context3(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block3(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_12(ctx) {
  let listitemtitle;
  let t;
  let div;
  let div_class_value;
  let current;
  listitemtitle = new list_item_title_default({
    props: {
      isSmallScreenSize: (
        /*isSmallScreenSize*/
        ctx[4]
      ),
      fileInteractionStyle: (
        /*fileInteractionStyle*/
        ctx[6]
      ),
      $$slots: { default: [create_default_slot_32] },
      $$scope: { ctx }
    }
  });
  listitemtitle.$on(
    "click",
    /*handleTitleClick*/
    ctx[9]
  );
  listitemtitle.$on(
    "contextmenu",
    /*handleTitleContextMenu*/
    ctx[11]
  );
  listitemtitle.$on(
    "mouseover",
    /*handleTitleMouseOver*/
    ctx[13]
  );
  let if_block = (
    /*tags*/
    ctx[3] !== null && create_if_block6(ctx)
  );
  return {
    c() {
      create_component(listitemtitle.$$.fragment);
      t = space();
      div = element("div");
      if (if_block)
        if_block.c();
      attr(div, "class", div_class_value = null_to_empty(
        /*tagsClassName*/
        ctx[8]
      ) + " svelte-1hnshi");
    },
    m(target, anchor) {
      mount_component(listitemtitle, target, anchor);
      insert(target, t, anchor);
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const listitemtitle_changes = {};
      if (dirty & /*isSmallScreenSize*/
      16)
        listitemtitle_changes.isSmallScreenSize = /*isSmallScreenSize*/
        ctx2[4];
      if (dirty & /*fileInteractionStyle*/
      64)
        listitemtitle_changes.fileInteractionStyle = /*fileInteractionStyle*/
        ctx2[6];
      if (dirty & /*$$scope, displayName, baseName, extension, enableFileIcons*/
      33554471) {
        listitemtitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      listitemtitle.$set(listitemtitle_changes);
      if (
        /*tags*/
        ctx2[3] !== null
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*tags*/
          8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block6(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty & /*tagsClassName*/
      256 && div_class_value !== (div_class_value = null_to_empty(
        /*tagsClassName*/
        ctx2[8]
      ) + " svelte-1hnshi")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(listitemtitle.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(listitemtitle.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(div);
      }
      destroy_component(listitemtitle, detaching);
      if (if_block)
        if_block.d();
    }
  };
}
function create_default_slot3(ctx) {
  let wrap;
  let current;
  wrap = new wrap_default({
    props: {
      spacingX: "lg",
      spacingY: "sm",
      align: "center",
      wrap: (
        /*isSmallScreenSize*/
        ctx[4] ? "wrap" : "nowrap"
      ),
      $$slots: { default: [create_default_slot_12] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(wrap.$$.fragment);
    },
    m(target, anchor) {
      mount_component(wrap, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const wrap_changes = {};
      if (dirty & /*isSmallScreenSize*/
      16)
        wrap_changes.wrap = /*isSmallScreenSize*/
        ctx2[4] ? "wrap" : "nowrap";
      if (dirty & /*$$scope, tagsClassName, isSmallScreenSize, tags, fileInteractionStyle, displayName, baseName, extension, enableFileIcons*/
      33554815) {
        wrap_changes.$$scope = { dirty, ctx: ctx2 };
      }
      wrap.$set(wrap_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(wrap.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(wrap.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(wrap, detaching);
    }
  };
}
function create_fragment18(ctx) {
  let listitemcontainer;
  let updating_ref;
  let current;
  function listitemcontainer_ref_binding(value) {
    ctx[17](value);
  }
  let listitemcontainer_props = {
    fileInteractionStyle: (
      /*fileInteractionStyle*/
      ctx[6]
    ),
    $$slots: { default: [create_default_slot3] },
    $$scope: { ctx }
  };
  if (
    /*ref*/
    ctx[7] !== void 0
  ) {
    listitemcontainer_props.ref = /*ref*/
    ctx[7];
  }
  listitemcontainer = new list_item_container_default({ props: listitemcontainer_props });
  binding_callbacks.push(() => bind(listitemcontainer, "ref", listitemcontainer_ref_binding));
  listitemcontainer.$on(
    "click",
    /*handleItemClick*/
    ctx[10]
  );
  listitemcontainer.$on(
    "contextmenu",
    /*handleItemContextMenu*/
    ctx[12]
  );
  listitemcontainer.$on(
    "mouseover",
    /*handleItemMouseOver*/
    ctx[14]
  );
  return {
    c() {
      create_component(listitemcontainer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(listitemcontainer, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const listitemcontainer_changes = {};
      if (dirty & /*fileInteractionStyle*/
      64)
        listitemcontainer_changes.fileInteractionStyle = /*fileInteractionStyle*/
        ctx2[6];
      if (dirty & /*$$scope, isSmallScreenSize, tagsClassName, tags, fileInteractionStyle, displayName, baseName, extension, enableFileIcons*/
      33554815) {
        listitemcontainer_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref && dirty & /*ref*/
      128) {
        updating_ref = true;
        listitemcontainer_changes.ref = /*ref*/
        ctx2[7];
        add_flush_callback(() => updating_ref = false);
      }
      listitemcontainer.$set(listitemcontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(listitemcontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listitemcontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(listitemcontainer, detaching);
    }
  };
}
function instance18($$self, $$props, $$invalidate) {
  let tagsClassName;
  let { displayName } = $$props;
  let { baseName } = $$props;
  let { extension } = $$props;
  let { path } = $$props;
  let { tags } = $$props;
  let { isFavorite } = $$props;
  let enableFileIcons = false;
  let fileInteractionStyle = "content";
  let isSmallScreenSize = false;
  let ref = null;
  let plugin2;
  const dispatch = createEventDispatcher();
  store_default.plugin.subscribe((p) => {
    plugin2 = p;
    $$invalidate(5, enableFileIcons = plugin2.settings.enableFileIcons);
    $$invalidate(6, fileInteractionStyle = plugin2.settings.fileInteractionStyle);
  });
  onMount(() => {
    function handleFileIconsChange() {
      $$invalidate(5, enableFileIcons = plugin2.settings.enableFileIcons);
    }
    EventManager.getInstance().on("file-icons-setting-change" /* FILE_ICONS_SETTING_CHANGE */, handleFileIconsChange);
    return () => {
      EventManager.getInstance().off("file-icons-setting-change" /* FILE_ICONS_SETTING_CHANGE */, handleFileIconsChange);
    };
  });
  onMount(() => {
    function handleFileInteractionStyleChange() {
      $$invalidate(6, fileInteractionStyle = plugin2.settings.fileInteractionStyle);
    }
    EventManager.getInstance().on("file-interaction-style-setting-change" /* FILE_INTERACTION_STYLE */, handleFileInteractionStyleChange);
    return () => {
      EventManager.getInstance().off("file-interaction-style-setting-change" /* FILE_INTERACTION_STYLE */, handleFileInteractionStyleChange);
    };
  });
  onMount(() => {
    let resizeObserver;
    const leafEl = ref === null || ref === void 0 ? void 0 : ref.closest(".workspace-leaf-content");
    if (leafEl) {
      checkLeafWidth(leafEl);
      resizeObserver = new ResizeObserver(() => {
        checkLeafWidth(leafEl);
      });
      resizeObserver.observe(leafEl);
    }
    return () => {
      resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
    };
  });
  function checkLeafWidth(leafEl) {
    const { clientWidth } = leafEl;
    if (clientWidth < SCREEN_SIZE_MD) {
      $$invalidate(4, isSmallScreenSize = true);
    } else {
      $$invalidate(4, isSmallScreenSize = false);
    }
  }
  function handleTitleClick() {
    handleItemClick();
  }
  function handleItemClick() {
    openInCurrentTab(plugin2, path);
  }
  function handleTitleContextMenu(e) {
    handleItemContextMenu(e);
  }
  function handleFavoriteChange(filePath, value) {
    dispatch("favoritePropertyChange", { filePath, value });
  }
  function handleItemContextMenu(e) {
    const { nativeEvent } = e.detail;
    openContextMenu(plugin2, path, nativeEvent, {
      isFavorite,
      onFavoriteChange: handleFavoriteChange
    });
  }
  function handleTitleMouseOver(e) {
    handleItemMouseOver(e);
  }
  function handleItemMouseOver(e) {
    const targetEl = e.currentTarget;
    plugin2.app.workspace.trigger("hover-link", {
      event: e,
      linktext: path,
      source: HOVER_LINK_SOURCE_ID,
      targetEl,
      hoverParent: targetEl.parentElement
    });
  }
  function listitemcontainer_ref_binding(value) {
    ref = value;
    $$invalidate(7, ref);
  }
  $$self.$$set = ($$props2) => {
    if ("displayName" in $$props2)
      $$invalidate(0, displayName = $$props2.displayName);
    if ("baseName" in $$props2)
      $$invalidate(1, baseName = $$props2.baseName);
    if ("extension" in $$props2)
      $$invalidate(2, extension = $$props2.extension);
    if ("path" in $$props2)
      $$invalidate(15, path = $$props2.path);
    if ("tags" in $$props2)
      $$invalidate(3, tags = $$props2.tags);
    if ("isFavorite" in $$props2)
      $$invalidate(16, isFavorite = $$props2.isFavorite);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*isSmallScreenSize*/
    16) {
      $:
        $$invalidate(8, tagsClassName = `vault-explorer-list-item__tags ${isSmallScreenSize ? "vault-explorer-list-item__tags--screen-size-sm" : ""}`);
    }
  };
  return [
    displayName,
    baseName,
    extension,
    tags,
    isSmallScreenSize,
    enableFileIcons,
    fileInteractionStyle,
    ref,
    tagsClassName,
    handleTitleClick,
    handleItemClick,
    handleTitleContextMenu,
    handleItemContextMenu,
    handleTitleMouseOver,
    handleItemMouseOver,
    path,
    isFavorite,
    listitemcontainer_ref_binding
  ];
}
var List_item = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance18, create_fragment18, safe_not_equal, {
      displayName: 0,
      baseName: 1,
      extension: 2,
      path: 15,
      tags: 3,
      isFavorite: 16
    });
  }
};
var list_item_default = List_item;

// src/svelte/app/components/list-view.svelte
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[5] = list[i];
  return child_ctx;
}
function create_each_block4(key_1, ctx) {
  let first;
  let listitem;
  let current;
  listitem = new list_item_default({
    props: {
      displayName: (
        /*fileRenderData*/
        ctx[5].displayName
      ),
      extension: (
        /*fileRenderData*/
        ctx[5].extension
      ),
      baseName: (
        /*fileRenderData*/
        ctx[5].baseName
      ),
      path: (
        /*fileRenderData*/
        ctx[5].path
      ),
      tags: (
        /*fileRenderData*/
        ctx[5].tags
      ),
      isFavorite: (
        /*fileRenderData*/
        ctx[5].isFavorite
      )
    }
  });
  listitem.$on(
    "favoritePropertyChange",
    /*favoritePropertyChange_handler*/
    ctx[4]
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(listitem.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(listitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const listitem_changes = {};
      if (dirty & /*filteredItems*/
      1)
        listitem_changes.displayName = /*fileRenderData*/
        ctx[5].displayName;
      if (dirty & /*filteredItems*/
      1)
        listitem_changes.extension = /*fileRenderData*/
        ctx[5].extension;
      if (dirty & /*filteredItems*/
      1)
        listitem_changes.baseName = /*fileRenderData*/
        ctx[5].baseName;
      if (dirty & /*filteredItems*/
      1)
        listitem_changes.path = /*fileRenderData*/
        ctx[5].path;
      if (dirty & /*filteredItems*/
      1)
        listitem_changes.tags = /*fileRenderData*/
        ctx[5].tags;
      if (dirty & /*filteredItems*/
      1)
        listitem_changes.isFavorite = /*fileRenderData*/
        ctx[5].isFavorite;
      listitem.$set(listitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(listitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      destroy_component(listitem, detaching);
    }
  };
}
function create_fragment19(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let current;
  let each_value = ensure_array_like(
    /*filteredItems*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*fileRenderData*/
    ctx2[5].id
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context4(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block4(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "vault-explorer-list-view");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & /*filteredItems*/
      1) {
        each_value = ensure_array_like(
          /*filteredItems*/
          ctx2[0]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block4, null, get_each_context4);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
    }
  };
}
function instance19($$self, $$props, $$invalidate) {
  let { data } = $$props;
  let { startIndex } = $$props;
  let { pageLength } = $$props;
  let filteredItems = [];
  function favoritePropertyChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("data" in $$props2)
      $$invalidate(1, data = $$props2.data);
    if ("startIndex" in $$props2)
      $$invalidate(2, startIndex = $$props2.startIndex);
    if ("pageLength" in $$props2)
      $$invalidate(3, pageLength = $$props2.pageLength);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*startIndex, data, pageLength*/
    14) {
      $: {
        if (startIndex < data.length) {
          $$invalidate(0, filteredItems = Array.from({ length: pageLength }, (_3, i) => {
            const index = startIndex + i;
            return data[index];
          }));
        } else {
          $$invalidate(0, filteredItems = []);
        }
      }
    }
  };
  return [filteredItems, data, startIndex, pageLength, favoritePropertyChange_handler];
}
var List_view = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance19, create_fragment19, safe_not_equal, { data: 1, startIndex: 2, pageLength: 3 });
  }
};
var list_view_default = List_view;

// src/svelte/app/services/filters/favorite-filter.ts
var filterByFavorites = (file, onlyFavorites) => {
  if (onlyFavorites) {
    return file.isFavorite;
  }
  return true;
};

// src/svelte/app/services/filters/search-filter.ts
var filterBySearch = (file, value) => {
  if (value === "") {
    return true;
  }
  const compare = value.toLowerCase().trim();
  const { displayName, path, content } = file;
  if (displayName.toLowerCase().includes(compare)) {
    return true;
  }
  if (path.toLowerCase().includes(compare)) {
    return true;
  }
  if (content !== null && content.toLowerCase().includes(compare)) {
    return true;
  }
  return false;
};

// src/svelte/app/services/filters/timestamp-filter.ts
var filterByTimestamp = ({
  value,
  createdMillis,
  modifiedMillis,
  startOfTodayMillis,
  startOfThisWeekMillis,
  startOfLastWeekMillis
}) => {
  if (value === "modified-this-week") {
    return modifiedMillis > startOfThisWeekMillis;
  } else if (value === "created-this-week") {
    return createdMillis > startOfThisWeekMillis;
  } else if (value === "modified-2-weeks") {
    return modifiedMillis > startOfLastWeekMillis;
  } else if (value === "created-2-weeks") {
    return createdMillis > startOfLastWeekMillis;
  } else if (value === "modified-today") {
    return modifiedMillis > startOfTodayMillis;
  } else if (value === "created-today") {
    return createdMillis > startOfTodayMillis;
  }
  return true;
};

// src/svelte/shared/services/load-property-value.ts
var import_js_logger6 = __toESM(require_logger());

// src/svelte/shared/services/time-utils.ts
var import_obsidian6 = require("obsidian");
var DATE_FORMATS = ["YYYY-MM-DDTHH:mm:ss", "YYYY-MM-DDTHH:mm", "YYYY-MM-DD"];
var getStartOfTodayMillis = () => {
  return (0, import_obsidian6.moment)().startOf("day").valueOf();
};
var getStartOfThisWeekMillis = () => {
  return (0, import_obsidian6.moment)().startOf("week").valueOf();
};
var getMomentDate = (date) => {
  return (0, import_obsidian6.moment)(date, DATE_FORMATS, true);
};
var getDateDaysAgo = (daysAgo) => {
  return (0, import_obsidian6.moment)().subtract(daysAgo, "days").format("YYYY-MM-DD");
};
var getDateDaysAhead = (daysAgo) => {
  return (0, import_obsidian6.moment)().add(daysAgo, "days").format("YYYY-MM-DD");
};
var getStartOfLastWeekMillis = () => {
  return (0, import_obsidian6.moment)().subtract(1, "weeks").startOf("week").valueOf();
};
var getTimeMillis = (date) => {
  const momentDate = (0, import_obsidian6.moment)(date, DATE_FORMATS, true);
  if (!momentDate.isValid()) {
    throw new Error(`Date format not handled: ${date}`);
  }
  return momentDate.valueOf();
};
var isDateSupported = (date) => {
  const momentDate = (0, import_obsidian6.moment)(date, DATE_FORMATS, true);
  return momentDate.isValid();
};

// src/svelte/shared/services/load-property-value.ts
var loadPropertyValue = (frontmatter, propertyName, expectedType) => {
  if (!frontmatter) {
    return null;
  }
  if (propertyName === "") {
    return null;
  }
  const propertyValue = frontmatter[propertyName];
  if (propertyValue === void 0 || propertyValue === null) {
    return null;
  }
  if (expectedType === "text" /* TEXT */) {
    if (typeof propertyValue !== "string") {
      import_js_logger6.default.warn(`Property value of type 'text' is not a string: ${propertyValue}`);
      return null;
    }
  } else if (expectedType === "number" /* NUMBER */) {
    if (typeof propertyValue !== "number") {
      import_js_logger6.default.warn(`Property value of type 'number' is not a number: ${propertyValue}`);
      return null;
    }
  } else if (expectedType === "date" /* DATE */) {
    if (typeof propertyValue !== "string") {
      import_js_logger6.default.warn(`Property value of type 'date' is not a string: ${propertyValue}`);
      return null;
    }
  } else if (expectedType === "datetime" /* DATETIME */) {
    if (typeof propertyValue !== "string") {
      import_js_logger6.default.warn(`Property value of type 'datetime' is not a string: ${propertyValue}`);
      return null;
    }
  } else if (expectedType === "checkbox" /* CHECKBOX */) {
    if (typeof propertyValue !== "boolean") {
      import_js_logger6.default.warn(`Property value of type 'checkbox' is not a boolean: ${propertyValue}`);
      return null;
    }
  } else if (expectedType === "list" /* LIST */) {
    if (!Array.isArray(propertyValue)) {
      import_js_logger6.default.warn(`Property value of type 'list' is not an array: ${propertyValue}`);
    }
  }
  if (expectedType === "date" /* DATE */) {
    if (!isDateSupported(propertyValue)) {
      import_js_logger6.default.warn(`Property value of type 'date' has unsupported date format: ${propertyValue}`);
      return null;
    }
  } else if (expectedType === "datetime" /* DATETIME */) {
    if (!isDateSupported(propertyValue)) {
      import_js_logger6.default.warn(`Property value of type 'datetime' has unsupported date format: ${propertyValue}`);
      return null;
    }
  }
  if (expectedType === "list" /* LIST */) {
    if (!Array.isArray(propertyValue)) {
      return [propertyValue];
    }
    return propertyValue.filter((v) => v !== null && v !== void 0);
  }
  return propertyValue;
};

// src/svelte/app/services/filters/custom/match-text-property-filter.ts
var matchTextPropertyFilter = (propertyValue, compare, condition, matchIfNull) => {
  if (propertyValue) {
    console.assert(propertyValue === propertyValue.toLowerCase(), `TextFilter propertyValue "${propertyValue}" must be lowercase`);
    console.assert(/^\s/.test(propertyValue) === false, `TextFilter propertyValue "${propertyValue}" must not contain whitespace`);
    console.assert(/\s$/.test(propertyValue) === false, `TextFilter propertyValue "${propertyValue}" must not contain whitespace`);
  }
  console.assert(compare === compare.toLowerCase(), `TextFilter compare "${compare}" must be lowercase`);
  console.assert(/^\s/.test(compare) === false, `TextFilter compare "${compare}" must not contain whitespace`);
  console.assert(/\s$/.test(compare) === false, `TextFilter compare "${compare}" must not contain whitespace`);
  switch (condition) {
    case "is" /* IS */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare.length === 0)
        return true;
      return propertyValue === compare;
    case "is-not" /* IS_NOT */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare.length === 0)
        return true;
      return propertyValue !== compare;
    case "contains" /* CONTAINS */:
      if (propertyValue === null)
        return matchIfNull;
      return propertyValue.includes(compare);
    case "does-not-contain" /* DOES_NOT_CONTAIN */:
      if (propertyValue === null)
        return matchIfNull;
      return !propertyValue.includes(compare);
    case "starts-with" /* STARTS_WITH */:
      if (propertyValue === null)
        return matchIfNull;
      return propertyValue.startsWith(compare);
    case "ends-with" /* ENDS_WITH */:
      if (propertyValue === null)
        return matchIfNull;
      return propertyValue.endsWith(compare);
    case "exists" /* EXISTS */:
      return propertyValue !== null;
    case "does-not-exist" /* DOES_NOT_EXIST */:
      return propertyValue === null;
    default:
      throw new Error(`TextFilterCondition not supported: ${condition}`);
  }
};

// src/svelte/app/services/filters/custom/match-checkbox-property-filter.ts
var matchCheckboxPropertyFilter = (propertyValue, compare, condition, matchIfNull) => {
  switch (condition) {
    case "is" /* IS */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare === null)
        return true;
      return propertyValue === compare;
    case "is-not" /* IS_NOT */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare === null)
        return true;
      return propertyValue !== compare;
    case "exists" /* EXISTS */:
      return propertyValue !== null;
    case "does-not-exist" /* DOES_NOT_EXIST */:
      return propertyValue === null;
    default:
      throw new Error(`CheckboxFilterCondition not supported: ${condition}`);
  }
};

// src/svelte/app/services/filters/custom/match-list-property-filter.ts
var matchListPropertyFilter = (propertyValue, compare, condition, matchIfNull) => {
  if (propertyValue) {
    console.assert(propertyValue.every((value) => value.length > 0), `ListPropertyFilter propertyValue "${propertyValue}" must not contain empty strings`);
    console.assert(propertyValue.every((value) => value === value.toLowerCase()), `ListPropertyFilter propertyValue "${propertyValue}" must be lowercase`);
    console.assert(propertyValue.every((value) => /^\s/.test(value) === false), `ListPropertyFilter propertyValue "${propertyValue}" must not contain whitespace`);
    console.assert(propertyValue.every((value) => /\s$/.test(value) === false), `ListPropertyFilter propertyValue "${propertyValue}" must not contain whitespace`);
  }
  console.assert(compare.every((value) => value === value.toLowerCase()), `ListPropertyFilter compare "${compare}" must be lowercase`);
  console.assert(compare.every((value) => /^\s/.test(value) === false), `ListPropertyFilter compare "${compare}" must not contain whitespace`);
  console.assert(compare.every((value) => /\s$/.test(value) === false), `ListPropertyFilter compare "${compare}" must not contain whitespace`);
  switch (condition) {
    case "contains" /* CONTAINS */:
      if (propertyValue === null)
        return matchIfNull;
      return compare.every(
        (c) => propertyValue.some((value) => value.includes(c))
      );
    case "does-not-contain" /* DOES_NOT_CONTAIN */:
      if (propertyValue === null)
        return matchIfNull;
      return compare.every(
        (c) => propertyValue.every((value) => !value.includes(c))
      );
    case "exists" /* EXISTS */:
      return propertyValue !== null;
    case "does-not-exist" /* DOES_NOT_EXIST */:
      return propertyValue === null;
    default:
      throw new Error(`ListFilterCondition not supported: ${condition}`);
  }
};

// src/svelte/app/services/filters/custom/match-date-property-filter.ts
var matchDatePropertyFilter = (propertyValue, compare, condition, matchIfNull) => {
  if (propertyValue) {
    console.assert(isDateSupported(propertyValue), `DatePropertyFilter propertyValue "${propertyValue}" must be supported date format`);
  }
  console.assert(isDateSupported(compare), `DatePropertyFilter compare "${compare}" must be supported date format`);
  switch (condition) {
    case "is" /* IS */: {
      if (propertyValue === null)
        return matchIfNull;
      const propertyValueDate = getMomentDate(propertyValue);
      const compareDate = getMomentDate(compare);
      return propertyValueDate.isSame(compareDate, "day");
    }
    case "is-after" /* IS_AFTER */: {
      if (propertyValue === null)
        return matchIfNull;
      const propertyValueDate = getMomentDate(propertyValue);
      const compareDate = getMomentDate(compare);
      return propertyValueDate.isAfter(compareDate, "day");
    }
    case "is-on-or-after" /* IS_ON_OR_AFTER */: {
      if (propertyValue === null)
        return matchIfNull;
      const propertyValueDate = getMomentDate(propertyValue);
      const compareDate = getMomentDate(compare);
      return propertyValueDate.isAfter(compareDate, "day") || propertyValueDate.isSame(compareDate, "day");
    }
    case "is-before" /* IS_BEFORE */: {
      if (propertyValue === null)
        return matchIfNull;
      const propertyValueDate = getMomentDate(propertyValue);
      const compareDate = getMomentDate(compare);
      return propertyValueDate.isBefore(compareDate, "day");
    }
    case "is-on-or-before" /* IS_ON_OR_BEFORE */: {
      if (propertyValue === null)
        return matchIfNull;
      const propertyValueDate = getMomentDate(propertyValue);
      const compareDate = getMomentDate(compare);
      return propertyValueDate.isBefore(compareDate, "day") || propertyValueDate.isSame(compareDate, "day");
    }
    case "exists" /* EXISTS */:
      return propertyValue !== null;
    case "does-not-exist" /* DOES_NOT_EXIST */:
      return propertyValue === null;
    default:
      throw new Error(`DateFilterCondition not supported: ${condition}`);
  }
};

// src/svelte/app/services/filters/custom/match-number-property-filter.ts
var matchNumberPropertyFilter = (propertyValue, compare, condition, matchIfNull) => {
  switch (condition) {
    case "is-equal" /* IS_EQUAL */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare === null)
        return true;
      return propertyValue === compare;
    case "is-greater" /* IS_GREATER */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare === null)
        return true;
      return propertyValue > compare;
    case "is-greater-or-equal" /* IS_GREATER_OR_EQUAL */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare === null)
        return true;
      return propertyValue >= compare;
    case "is-less" /* IS_LESS */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare === null)
        return true;
      return propertyValue < compare;
    case "is-less-or-equal" /* IS_LESS_OR_EQUAL */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare === null)
        return true;
      return propertyValue <= compare;
    case "is-not-equal" /* IS_NOT_EQUAL */:
      if (propertyValue === null)
        return matchIfNull;
      if (compare === null)
        return true;
      return propertyValue !== compare;
    case "exists" /* EXISTS */:
      return propertyValue !== null;
    case "does-not-exist" /* DOES_NOT_EXIST */:
      return propertyValue === null;
    default:
      throw new Error(`NumberFilterCondition not supported: ${condition}`);
  }
};

// src/svelte/app/services/filters/custom/match-file-name-filter.ts
var matchFileNameFilter = (fileName, compare, condition) => {
  console.assert(fileName === fileName.toLowerCase(), `FileNameFilter fileName "${fileName}" must be lowercase`);
  console.assert(/^\s/.test(fileName) === false, `FileNameFilter fileName "${fileName}" must not contain whitespace`);
  console.assert(compare === compare.toLowerCase(), `FileNameFilter compare "${compare}" must be lowercase`);
  console.assert(/\s$/.test(compare) === false, `FileNameFilter compare "${compare}" must not contain whitespace`);
  switch (condition) {
    case "is" /* IS */:
      if (compare.length === 0)
        return true;
      return fileName === compare;
    case "is-not" /* IS_NOT */:
      if (compare.length === 0)
        return true;
      return fileName !== compare;
    case "contains" /* CONTAINS */:
      return fileName.includes(compare);
    case "does-not-contain" /* DOES_NOT_CONTAIN */:
      return !fileName.includes(compare);
    case "starts-with" /* STARTS_WITH */:
      return fileName.startsWith(compare);
    case "ends-with" /* ENDS_WITH */:
      return fileName.endsWith(compare);
    default:
      throw new Error(`FileNameFilterCondition not supported: ${condition}`);
  }
};

// src/svelte/app/services/filters/custom/match-content-filter.ts
var matchContentFilter = (content, compare, condition) => {
  console.assert(content === content.toLowerCase(), `ContentFilter content "${content}" must be lowercase`);
  console.assert(/^\s/.test(content) === false, `ContentFilter content "${content}" must not contain whitespace`);
  console.assert(compare === compare.toLowerCase(), `ContentFilter compare "${compare}" must be lowercase`);
  console.assert(/\s$/.test(compare) === false, `ContentFilter compare "${compare}" must not contain whitespace`);
  switch (condition) {
    case "contains" /* CONTAINS */:
      return content.includes(compare);
    case "does-not-contain" /* DOES_NOT_CONTAIN */:
      return !content.includes(compare);
    case "is-empty" /* IS_EMPTY */:
      return content === "";
    case "is-not-empty" /* IS_NOT_EMPTY */:
      return content !== "";
    default:
      throw new Error(`ContentFilterCondition not supported: ${condition}`);
  }
};

// src/svelte/app/services/filters/custom/match-folder-filter.ts
var matchFolderFilter = (filePath, compare, condition, options) => {
  console.assert(filePath === filePath.toLowerCase(), `FolderFilter filePath "${filePath}" must be lowercase`);
  console.assert(/^\s/.test(filePath) === false, `FolderFilter filePath "${filePath}" must not contain whitespace`);
  console.assert(compare === compare.toLowerCase(), `FolderFilter compare "${compare}" must be lowercase`);
  console.assert(/\s$/.test(compare) === false, `FolderFilter compare "${compare}" must not contain whitespace`);
  if (compare === "/") {
    return true;
  }
  const { includeSubfolders } = options;
  switch (condition) {
    case "is" /* IS */:
      if (compare.length === 0)
        return true;
      if (includeSubfolders)
        return filePath.startsWith(compare);
      return filePath === compare;
    case "is-not" /* IS_NOT */:
      if (compare.length === 0)
        return true;
      if (includeSubfolders)
        return !filePath.startsWith(compare);
      return filePath !== compare;
    default:
      throw new Error(`FolderFilterCondition not supported: ${condition}`);
  }
};

// src/svelte/app/services/utils/content-utils.ts
var removeFrontmatter = (content) => {
  return content.replace(/^---\n[\s\S]*?\n---/, "");
};
var removeEmptyLines = (content) => {
  const emptyLineRegex = /^\s*[\r\n]/gm;
  return content.replace(emptyLineRegex, "");
};
var removeNewLines = (content) => {
  return content.replace(/\n/g, " ");
};
var removeExtraNewLines = (content) => {
  return content.split("\n").filter((line) => line.trim() !== "").join("\n");
};
var removeMarkdownHashes = (content) => {
  const headerRegex = /^(#{1,6})\s*(.*)$/gm;
  return content.replace(headerRegex, (_match, _hashes, text2) => `${text2}`);
};
var removeLevel1Headers = (content) => {
  const header1Regex = /^#\s.*$/gm;
  return content.replace(header1Regex, "");
};
var removeItalicsMarkdown = (content) => {
  const italicRegex = /\*(.*?)\*/g;
  return content.replace(italicRegex, "$1");
};
var removeBoldMarkdown = (content) => {
  const boldRegex = /\*\*(.*?)\*\*/g;
  return content.replace(boldRegex, "$1");
};
var removeMarkdownHighlight = (content) => {
  const highlightRegex = /==(.*?)==/g;
  return content.replace(highlightRegex, "$1");
};
var removeCodeBlocks = (content) => {
  const codeBlockRegex = /```[\s\S]*?```/g;
  return content.replace(codeBlockRegex, "");
};
var removeMarkdownTables = (content) => {
  const tableRegex = /\|.*\n\|[-:| ]+\n(\|.*\n)*/g;
  return content.replace(tableRegex, "");
};
var removeWikiLinks = (content) => {
  const wikiLinkRegex = /\[\[(.*?)\]\]/g;
  return content.replace(wikiLinkRegex, "$1");
};

// src/svelte/app/services/filters/custom/filter-by-groups.ts
var filterByGroups = (fileName, filePath, fileFrontmatter, fileContent, groups) => {
  return groups.every((group) => {
    if (!group.isEnabled)
      return true;
    return filterByGroup(
      fileName,
      filePath,
      fileFrontmatter,
      fileContent,
      group
    );
  });
};
var filterByGroup = (fileName, filePath, fileFrontmatter, fileContent, group) => {
  let result = null;
  group.rules.forEach((filter, i) => {
    if (!filter.isEnabled)
      return;
    const doesMatch = filterByRule(
      fileName,
      filePath,
      fileFrontmatter,
      fileContent,
      filter
    );
    if (result === null) {
      result = doesMatch;
    } else {
      if (filter.operator === "and") {
        result = result && doesMatch;
      } else {
        result = result || doesMatch;
      }
    }
  });
  return result != null ? result : true;
};
var filterByRule = (fileName, filePath, frontmatter, fileContent, filter) => {
  const { type } = filter;
  if (type === "property" /* PROPERTY */) {
    return filterByPropertyType(frontmatter, filter);
  } else if (type === "file-name" /* FILE_NAME */) {
    return filterByFileName(fileName, filter);
  } else if (type === "folder" /* FOLDER */) {
    return filterByFolder(filePath, filter);
  } else if (type === "content" /* CONTENT */) {
    return filterByContent(fileContent, filter);
  } else {
    throw new Error(`FilterRuleType not supported: ${type}`);
  }
};
var filterByPropertyType = (frontmatter, filter) => {
  const {
    condition,
    value,
    type,
    matchWhenPropertyDNE,
    propertyType,
    propertyName
  } = filter;
  if (propertyName === "") {
    return true;
  }
  if (propertyType === "text") {
    let propertyValue = loadPropertyValue(
      frontmatter,
      propertyName,
      propertyType
    );
    if (propertyValue) {
      propertyValue = propertyValue.toLowerCase().trim();
    }
    const compare = value.toLowerCase().trim();
    const doesMatch = matchTextPropertyFilter(
      propertyValue,
      compare,
      condition,
      matchWhenPropertyDNE
    );
    return doesMatch;
  } else if (propertyType === "number") {
    const propertyValue = loadPropertyValue(
      frontmatter,
      propertyName,
      propertyType
    );
    const compare = parseFloat(value.trim());
    const doesMatch = matchNumberPropertyFilter(
      propertyValue,
      compare,
      condition,
      matchWhenPropertyDNE
    );
    return doesMatch;
  } else if (propertyType === "checkbox") {
    const propertyValue = loadPropertyValue(
      frontmatter,
      propertyName,
      propertyType
    );
    let compare = null;
    if (value === "true") {
      compare = true;
    } else if (value === "false") {
      compare = false;
    }
    const doesMatch = matchCheckboxPropertyFilter(
      propertyValue,
      compare,
      condition,
      matchWhenPropertyDNE
    );
    return doesMatch;
  } else if (propertyType === "date" || propertyType === "datetime") {
    const propertyValue = loadPropertyValue(
      frontmatter,
      propertyName,
      propertyType
    );
    const { valueData } = filter;
    let compare = valueData;
    if (value === "today" /* TODAY */) {
      compare = getDateDaysAgo(0);
    } else if (value === "yesterday" /* YESTERDAY */) {
      compare = getDateDaysAgo(1);
    } else if (value === "tomorrow" /* TOMORROW */) {
      compare = getDateDaysAhead(1);
    } else if (value === "one-week-ago" /* ONE_WEEK_AGO */) {
      compare = getDateDaysAgo(7);
    } else if (value === "one-week-from-now" /* ONE_WEEK_FROM_NOW */) {
      compare = getDateDaysAhead(7);
    } else if (value === "one-month-ago" /* ONE_MONTH_AGO */) {
      compare = getDateDaysAgo(30);
    } else if (value === "one-month-from-now" /* ONE_MONTH_FROM_NOW */) {
      compare = getDateDaysAhead(30);
    }
    const doesMatch = matchDatePropertyFilter(
      propertyValue,
      compare,
      condition,
      matchWhenPropertyDNE
    );
    return doesMatch;
  } else if (propertyType === "list") {
    let propertyValue = loadPropertyValue(
      frontmatter,
      propertyName,
      propertyType
    );
    if (propertyValue) {
      propertyValue = propertyValue.map((v) => v.toLowerCase().trim());
    }
    const compare = value.trim().split(",").map((v) => v.toLowerCase().trim()).filter((v) => v !== "");
    const doesMatch = matchListPropertyFilter(
      propertyValue,
      compare,
      condition,
      matchWhenPropertyDNE
    );
    return doesMatch;
  } else {
    throw new Error(`PropertyFilterType not supported: ${type}`);
  }
};
var filterByFileName = (fileName, filter) => {
  const value = fileName.toLowerCase();
  const compare = filter.value.toLowerCase().trim();
  const doesMatch = matchFileNameFilter(value, compare, filter.condition);
  return doesMatch;
};
var filterByFolder = (filePath, filter) => {
  const { condition, includeSubfolders } = filter;
  let value = filePath.toLowerCase();
  const parts = value.split("/");
  if (parts.length === 1) {
    value = "/";
  } else {
    value = parts.slice(0, parts.length - 1).join("/");
  }
  const compare = filter.value.toLowerCase().trim();
  const doesMatch = matchFolderFilter(value, compare, condition, {
    includeSubfolders
  });
  return doesMatch;
};
var filterByContent = (fileContent, filter) => {
  if (fileContent === null) {
    return true;
  }
  let value = removeFrontmatter(fileContent);
  value = value.toLowerCase().trim();
  const compare = filter.value.toLocaleLowerCase().trim();
  const doesMatch = matchContentFilter(value, compare, filter.condition);
  return doesMatch;
};

// src/svelte/app/services/render-data.ts
var import_js_logger7 = __toESM(require_logger());

// src/svelte/app/services/utils/image-utils.ts
var isImageExtension = (extension) => {
  switch (extension) {
    case "png":
    case "jpg":
    case "jpeg":
    case "gif":
    case "webp":
    case "svg":
    case "avif":
    case "bmp":
      return true;
    default:
      return false;
  }
};

// src/svelte/app/services/render-data.ts
var formatFileDataForRender = ({
  app,
  settings,
  file,
  fileId,
  fileFrontmatter,
  fileContent,
  fileFavorite
}) => {
  const { name, basename, extension, path } = file;
  const {
    createdDate: createdDateProp,
    modifiedDate: modifiedDateProp,
    url: urlProp,
    favorite: favoriteProp,
    imageUrl: imageUrlProp,
    custom1: custom1Prop,
    custom2: custom2Prop,
    custom3: custom3Prop
  } = settings.properties;
  const tags = loadPropertyValue(
    fileFrontmatter,
    "tags",
    "list" /* LIST */
  );
  const url = loadPropertyValue(
    fileFrontmatter,
    urlProp,
    "text" /* TEXT */
  );
  let isFavorite;
  if (fileFavorite === null) {
    isFavorite = loadPropertyValue(
      fileFrontmatter,
      favoriteProp,
      "checkbox" /* CHECKBOX */
    );
  } else {
    isFavorite = fileFavorite;
  }
  const creationDate = loadPropertyValue(
    fileFrontmatter,
    createdDateProp,
    "date" /* DATE */ || "datetime" /* DATETIME */
  );
  const modifiedDate = loadPropertyValue(
    fileFrontmatter,
    modifiedDateProp,
    "date" /* DATE */ || "datetime" /* DATETIME */
  );
  const custom1 = loadPropertyValue(
    fileFrontmatter,
    custom1Prop,
    "text" /* TEXT */
  );
  const custom2 = loadPropertyValue(
    fileFrontmatter,
    custom2Prop,
    "text" /* TEXT */
  );
  const custom3 = loadPropertyValue(
    fileFrontmatter,
    custom3Prop,
    "text" /* TEXT */
  );
  let createdMillis = file.stat.ctime;
  if (creationDate != null) {
    if (isDateSupported(creationDate)) {
      createdMillis = getTimeMillis(creationDate);
    } else {
      import_js_logger7.default.warn(
        `Property value has unsupported date format: ${creationDate}`
      );
    }
  }
  let modifiedMillis = file.stat.mtime;
  if (modifiedDate != null) {
    if (isDateSupported(modifiedDate)) {
      modifiedMillis = getTimeMillis(modifiedDate);
    } else {
      import_js_logger7.default.warn(
        `Property value has unsupported date format: ${creationDate}`
      );
    }
  }
  let imageUrl = loadPropertyValue(
    fileFrontmatter,
    imageUrlProp,
    "text" /* TEXT */
  );
  if ((imageUrl == null ? void 0 : imageUrl.startsWith("[[")) && imageUrl.endsWith("]]")) {
    const link = imageUrl.substring(2, imageUrl.length - 2);
    const linkFile = app.metadataCache.getFirstLinkpathDest(link, path);
    if (linkFile) {
      const resourcePath = app.vault.getResourcePath(linkFile);
      imageUrl = resourcePath;
    } else {
      import_js_logger7.default.error(`Link path for image url not found: ${link}`);
      imageUrl = null;
    }
  } else if (isImageExtension(extension)) {
    imageUrl = app.vault.getResourcePath(file);
  }
  const displayName = extension === "md" ? basename : name;
  return {
    id: fileId,
    displayName,
    baseName: basename,
    path,
    extension,
    url,
    content: fileContent,
    tags,
    imageUrl,
    isFavorite,
    createdMillis,
    modifiedMillis,
    custom1,
    custom2,
    custom3
  };
};

// src/svelte/app/index.svelte
var import_lodash3 = __toESM(require_lodash());

// src/svelte/app/services/display-name.ts
var getDisplayNameForView = (view) => {
  switch (view) {
    case "dashboard" /* DASHBOARD */:
      return "Dashboard";
    case "grid" /* GRID */:
      return "Grid";
    case "list" /* LIST */:
      return "List";
    case "feed" /* FEED */:
      return "Feed";
    case "table" /* TABLE */:
      return "Table";
    case "recommended" /* RECOMMENDED */:
      return "Recommended";
    case "related" /* RELATED */:
      return "Related";
    default:
      throw new Error(`Unhandled view type: ${TExplorerView}`);
  }
};

// src/svelte/app/index.svelte
var import_js_logger11 = __toESM(require_logger());

// src/svelte/app/components/search-filter.svelte
function create_if_block7(ctx) {
  let div;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "tabindex", "0");
      attr(div, "role", "button");
      attr(div, "aria-label", "Clear search");
      attr(div, "class", "search-input-clear-button");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = [
          listen(
            div,
            "click",
            /*click_handler*/
            ctx[3]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[4]
          )
        ];
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment20(ctx) {
  let div;
  let input;
  let t;
  let mounted;
  let dispose;
  let if_block = (
    /*value*/
    ctx[0].length > 0 && create_if_block7(ctx)
  );
  return {
    c() {
      div = element("div");
      input = element("input");
      t = space();
      if (if_block)
        if_block.c();
      attr(input, "type", "text");
      attr(input, "placeholder", "Search...");
      input.value = /*value*/
      ctx[0];
      attr(input, "class", "svelte-5awa12");
      attr(div, "class", "vault-explorer-search-filter svelte-5awa12");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, input);
      append(div, t);
      if (if_block)
        if_block.m(div, null);
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*input_handler*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*value*/
      1 && input.value !== /*value*/
      ctx2[0]) {
        input.value = /*value*/
        ctx2[0];
      }
      if (
        /*value*/
        ctx2[0].length > 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block7(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block)
        if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function instance20($$self, $$props, $$invalidate) {
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function handleClearClick() {
    dispatch("clear", { value: "" });
  }
  function input_handler(event) {
    bubble.call(this, $$self, event);
  }
  const click_handler = () => handleClearClick();
  const keydown_handler = (e) => {
    if (e.key === "Enter") {
      handleClearClick();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
  };
  return [value, handleClearClick, input_handler, click_handler, keydown_handler];
}
var Search_filter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance20, create_fragment20, safe_not_equal, { value: 0 });
  }
};
var search_filter_default = Search_filter;

// src/svelte/app/components/timestamp-filter.svelte
var import_obsidian7 = require("obsidian");
function create_fragment21(ctx) {
  let iconbutton;
  let current;
  iconbutton = new icon_button_default({
    props: {
      ariaLabel: "Change timestamp filter",
      iconId: "clock"
    }
  });
  iconbutton.$on(
    "click",
    /*handleButtonClick*/
    ctx[0]
  );
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function instance21($$self, $$props, $$invalidate) {
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function handleValueChange(value2) {
    dispatch("change", { value: value2 });
  }
  function handleButtonClick(e) {
    const nativeEvent = e.detail.nativeEvent;
    const menu = new import_obsidian7.Menu();
    menu.setUseNativeMenu(true);
    menu.addItem((item) => {
      item.setTitle("All");
      item.setChecked(value === "all");
      item.onClick(() => handleValueChange("all"));
    });
    menu.addSeparator();
    menu.addItem((item) => {
      item.setTitle("Modified today");
      item.setChecked(value === "modified-today");
      item.onClick(() => handleValueChange("modified-today"));
    });
    menu.addItem((item) => {
      item.setTitle("Created today");
      item.setChecked(value === "created-today");
      item.onClick(() => handleValueChange("created-today"));
    });
    menu.addSeparator();
    menu.addItem((item) => {
      item.setTitle("Modifed this week");
      item.setChecked(value === "modified-this-week");
      item.onClick(() => handleValueChange("modified-this-week"));
    });
    menu.addItem((item) => {
      item.setTitle("Created this week");
      item.setChecked(value === "created-this-week");
      item.onClick(() => handleValueChange("created-this-week"));
    });
    menu.addSeparator();
    menu.addItem((item) => {
      item.setTitle("Modifed 2 weeks");
      item.setChecked(value === "modified-2-weeks");
      item.onClick(() => handleValueChange("modified-2-weeks"));
    });
    menu.addItem((item) => {
      item.setTitle("Created 2 weeks");
      item.setChecked(value === "created-2-weeks");
      item.onClick(() => handleValueChange("created-2-weeks"));
    });
    menu.showAtMouseEvent(nativeEvent);
  }
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(1, value = $$props2.value);
  };
  return [handleButtonClick, value];
}
var Timestamp_filter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance21, create_fragment21, safe_not_equal, { value: 1 });
  }
};
var timestamp_filter_default = Timestamp_filter;

// src/svelte/app/components/sort-filter.svelte
var import_obsidian8 = require("obsidian");
function create_fragment22(ctx) {
  let iconbutton;
  let current;
  iconbutton = new icon_button_default({
    props: {
      ariaLabel: "Change sort order",
      iconId: "arrow-up-narrow-wide"
    }
  });
  iconbutton.$on(
    "click",
    /*handleButtonClick*/
    ctx[0]
  );
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function instance22($$self, $$props, $$invalidate) {
  let { value } = $$props;
  const dispatch = createEventDispatcher();
  function handleValueChange(value2) {
    dispatch("change", { value: value2 });
  }
  function handleButtonClick(e) {
    const nativeEvent = e.detail.nativeEvent;
    const menu = new import_obsidian8.Menu();
    menu.setUseNativeMenu(true);
    menu.addItem((item) => {
      item.setTitle("File name (A-Z)");
      item.setChecked(value === "file-name-asc");
      item.onClick(() => handleValueChange("file-name-asc"));
    });
    menu.addItem((item) => {
      item.setTitle("File name (Z-A)");
      item.setChecked(value === "file-name-desc");
      item.onClick(() => handleValueChange("file-name-desc"));
    });
    menu.addSeparator();
    menu.addItem((item) => {
      item.setTitle("Modified time (new to old)");
      item.setChecked(value === "modified-desc");
      item.onClick(() => handleValueChange("modified-desc"));
    });
    menu.addItem((item) => {
      item.setTitle("Modified time (old to new)");
      item.setChecked(value === "modified-asc");
      item.onClick(() => handleValueChange("modified-asc"));
    });
    menu.addSeparator();
    menu.addItem((item) => {
      item.setTitle("Random");
      item.setChecked(value === "random");
      item.onClick(() => handleValueChange("random"));
    });
    menu.showAtMouseEvent(nativeEvent);
  }
  $$self.$$set = ($$props2) => {
    if ("value" in $$props2)
      $$invalidate(1, value = $$props2.value);
  };
  return [handleButtonClick, value];
}
var Sort_filter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance22, create_fragment22, safe_not_equal, { value: 1 });
  }
};
var sort_filter_default = Sort_filter;

// src/svelte/shared/components/premium-link.svelte
function create_fragment23(ctx) {
  let a;
  return {
    c() {
      a = element("a");
      a.textContent = "Learn more";
      attr(a, "class", "vault-explorer-premium-link svelte-uq2fxx");
      attr(a, "href", "https://vaultexplorer.com/docs/premium/");
      attr(a, "target", "_blank");
      attr(a, "rel", "noopener");
    },
    m(target, anchor) {
      insert(target, a, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(a);
      }
    }
  };
}
var Premium_link = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment23, safe_not_equal, {});
  }
};
var premium_link_default = Premium_link;

// src/svelte/shared/components/premium-message.svelte
function create_fragment24(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.textContent = "This feature requires a premium license";
      attr(div, "class", "vault-explorer-premium-message svelte-11s6kni");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
var Premium_message = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment24, safe_not_equal, {});
  }
};
var premium_message_default = Premium_message;

// src/svelte/app/services/time-string.ts
var import_obsidian9 = require("obsidian");
var formatAsBearTimeString = (milliseconds) => {
  const now2 = (0, import_obsidian9.moment)();
  const time = (0, import_obsidian9.moment)(milliseconds);
  const diffInSeconds = now2.diff(time, "seconds");
  const diffInMinutes = now2.diff(time, "minutes");
  const diffInHours = now2.diff(time, "hours");
  const diffInDays = now2.diff(time, "days");
  if (diffInSeconds < 60) {
    return "Just now";
  }
  if (diffInMinutes < 60) {
    return `${diffInMinutes} minutes ago`;
  }
  if (diffInHours < 24) {
    return `${diffInHours} hours ago`;
  }
  if (diffInDays === 1) {
    return `Yesterday at ${time.format("hh:mm A")}`;
  }
  if (time.year() === now2.year()) {
    return time.format("MMMM D");
  }
  return time.format("MMMM D, YYYY");
};

// src/svelte/app/components/feed-card-container.svelte
function create_if_block_17(ctx) {
  let div;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "tabindex", "0");
      attr(div, "role", "button");
      attr(div, "class", "vault-explorer-feed-card vault-explorer-feed-card--interactive svelte-aqws8g");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[7](div);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            div,
            "click",
            /*handleClick*/
            ctx[2]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[8]
          ),
          listen(
            div,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[9]
          ),
          listen(div, "focus", focus_handler5),
          listen(
            div,
            "mouseover",
            /*mouseover_handler*/
            ctx[6]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[7](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block8(ctx) {
  let div;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", "vault-explorer-feed-card svelte-aqws8g");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[10](div);
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[10](null);
    }
  };
}
function create_fragment25(ctx) {
  let t;
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*fileInteractionStyle*/
    ctx[1] === "content" && create_if_block_17(ctx)
  );
  let if_block1 = (
    /*fileInteractionStyle*/
    ctx[1] === "title" && create_if_block8(ctx)
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*fileInteractionStyle*/
        ctx2[1] === "content"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_17(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t.parentNode, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*fileInteractionStyle*/
        ctx2[1] === "title"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          2) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block8(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(if_block1_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
var focus_handler5 = () => {
};
function instance23($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  let { fileInteractionStyle } = $$props;
  const dispatch = createEventDispatcher();
  let { ref = null } = $$props;
  function handleClick() {
    dispatch("click");
  }
  function handleContextMenu(e) {
    dispatch("contextmenu", { nativeEvent: e });
  }
  function mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(0, ref);
    });
  }
  const keydown_handler = (e) => {
    if (e.key === "Enter" || e.key === " ") {
      handleClick();
    }
  };
  const contextmenu_handler = (e) => {
    e.preventDefault();
    handleContextMenu(e);
  };
  function div_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(0, ref);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("fileInteractionStyle" in $$props2)
      $$invalidate(1, fileInteractionStyle = $$props2.fileInteractionStyle);
    if ("ref" in $$props2)
      $$invalidate(0, ref = $$props2.ref);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  return [
    ref,
    fileInteractionStyle,
    handleClick,
    handleContextMenu,
    $$scope,
    slots,
    mouseover_handler,
    div_binding,
    keydown_handler,
    contextmenu_handler,
    div_binding_1
  ];
}
var Feed_card_container = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance23, create_fragment25, safe_not_equal, { fileInteractionStyle: 1, ref: 0 });
  }
};
var feed_card_container_default = Feed_card_container;

// src/svelte/app/components/feed-card-title.svelte
function create_if_block_18(ctx) {
  let div;
  let div_class_value;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "tabindex", "0");
      attr(div, "role", "link");
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-7mofgd");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(div, "focus", focus_handler6),
          listen(
            div,
            "click",
            /*click_handler*/
            ctx[7]
          ),
          listen(
            div,
            "contextmenu",
            /*contextmenu_handler*/
            ctx[8]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[9]
          ),
          listen(
            div,
            "mouseover",
            /*mouseover_handler*/
            ctx[6]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-7mofgd")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block9(ctx) {
  let div;
  let div_class_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[5].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[4],
    null
  );
  return {
    c() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-7mofgd");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[4],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[4]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[4],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*className*/
      2 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-7mofgd")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function create_fragment26(ctx) {
  let t;
  let if_block1_anchor;
  let current;
  let if_block0 = (
    /*fileInteractionStyle*/
    ctx[0] === "title" && create_if_block_18(ctx)
  );
  let if_block1 = (
    /*fileInteractionStyle*/
    ctx[0] === "content" && create_if_block9(ctx)
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*fileInteractionStyle*/
        ctx2[0] === "title"
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_18(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t.parentNode, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*fileInteractionStyle*/
        ctx2[0] === "content"
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*fileInteractionStyle*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block9(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(if_block1_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
var focus_handler6 = () => {
};
function instance24($$self, $$props, $$invalidate) {
  let className;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { fileInteractionStyle } = $$props;
  const dispatch = createEventDispatcher();
  function handleClick() {
    dispatch("click");
  }
  function handleContextMenu(e) {
    dispatch("contextmenu", { nativeEvent: e });
  }
  function mouseover_handler(event) {
    bubble.call(this, $$self, event);
  }
  const click_handler = (e) => {
    e.preventDefault();
    handleClick();
  };
  const contextmenu_handler = (e) => {
    e.preventDefault();
    handleContextMenu(e);
  };
  const keydown_handler = (e) => {
    if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      handleClick();
    }
  };
  $$self.$$set = ($$props2) => {
    if ("fileInteractionStyle" in $$props2)
      $$invalidate(0, fileInteractionStyle = $$props2.fileInteractionStyle);
    if ("$$scope" in $$props2)
      $$invalidate(4, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*fileInteractionStyle*/
    1) {
      $:
        $$invalidate(1, className = `vault-explorer-feed-card__title ${fileInteractionStyle === "content" ? "" : "vault-explorer-feed-card__title--interactive"}`);
    }
  };
  return [
    fileInteractionStyle,
    className,
    handleClick,
    handleContextMenu,
    $$scope,
    slots,
    mouseover_handler,
    click_handler,
    contextmenu_handler,
    keydown_handler
  ];
}
var Feed_card_title = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance24, create_fragment26, safe_not_equal, { fileInteractionStyle: 0 });
  }
};
var feed_card_title_default = Feed_card_title;

// src/svelte/app/components/feed-card.svelte
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[32] = list[i];
  return child_ctx;
}
function create_if_block_22(ctx) {
  let icon;
  let current;
  icon = new icon_default({
    props: {
      iconId: getIconIdForFile(
        /*baseName*/
        ctx[1],
        /*extension*/
        ctx[2]
      )
    }
  });
  return {
    c() {
      create_component(icon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const icon_changes = {};
      if (dirty[0] & /*baseName, extension*/
      6)
        icon_changes.iconId = getIconIdForFile(
          /*baseName*/
          ctx2[1],
          /*extension*/
          ctx2[2]
        );
      icon.$set(icon_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(icon, detaching);
    }
  };
}
function create_default_slot_43(ctx) {
  let t0;
  let div;
  let t1;
  let current;
  let if_block = (
    /*enableFileIcons*/
    ctx[5] && create_if_block_22(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      t0 = space();
      div = element("div");
      t1 = text(
        /*displayName*/
        ctx[0]
      );
      attr(div, "class", "vault-explorer-feed-card__title-text svelte-2wfhrr");
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t0, anchor);
      insert(target, div, anchor);
      append(div, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*enableFileIcons*/
        ctx2[5]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*enableFileIcons*/
          32) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_22(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & /*displayName*/
      1)
        set_data(
          t1,
          /*displayName*/
          ctx2[0]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_default_slot_33(ctx) {
  let stack;
  let current;
  stack = new stack_default({
    props: {
      spacing: "xs",
      $$slots: { default: [create_default_slot_43] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty[0] & /*displayName, baseName, extension, enableFileIcons*/
      39 | dirty[1] & /*$$scope*/
      16) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(stack, detaching);
    }
  };
}
function create_if_block_19(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "class", "vault-explorer-feed-card__content svelte-2wfhrr");
      set_style(
        div,
        "-webkit-line-clamp",
        /*currentLineClamp*/
        ctx[6]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
      div.innerHTML = /*displayContent*/
      ctx[8];
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*displayContent*/
      256)
        div.innerHTML = /*displayContent*/
        ctx2[8];
      ;
      if (dirty[0] & /*currentLineClamp*/
      64) {
        set_style(
          div,
          "-webkit-line-clamp",
          /*currentLineClamp*/
          ctx2[6]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block10(ctx) {
  let div;
  let wrap;
  let current;
  wrap = new wrap_default({
    props: {
      spacingX: "xs",
      spacingY: "xs",
      $$slots: { default: [create_default_slot_23] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(wrap.$$.fragment);
      attr(div, "class", "vault-explorer-feed-card__tags");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(wrap, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const wrap_changes = {};
      if (dirty[0] & /*tags*/
      8 | dirty[1] & /*$$scope*/
      16) {
        wrap_changes.$$scope = { dirty, ctx: ctx2 };
      }
      wrap.$set(wrap_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(wrap.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(wrap.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(wrap);
    }
  };
}
function create_each_block5(ctx) {
  let tag_1;
  let current;
  tag_1 = new tag_default({
    props: {
      name: (
        /*tag*/
        ctx[32]
      ),
      variant: "unstyled"
    }
  });
  return {
    c() {
      create_component(tag_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tag_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tag_1_changes = {};
      if (dirty[0] & /*tags*/
      8)
        tag_1_changes.name = /*tag*/
        ctx2[32];
      tag_1.$set(tag_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(tag_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tag_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tag_1, detaching);
    }
  };
}
function create_default_slot_23(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*tags*/
    ctx[3]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*tags*/
      8) {
        each_value = ensure_array_like(
          /*tags*/
          ctx2[3]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot_13(ctx) {
  let feedcardtitle;
  let t0;
  let t1;
  let t2;
  let div;
  let current;
  feedcardtitle = new feed_card_title_default({
    props: {
      fileInteractionStyle: (
        /*fileInteractionStyle*/
        ctx[7]
      ),
      $$slots: { default: [create_default_slot_33] },
      $$scope: { ctx }
    }
  });
  feedcardtitle.$on(
    "click",
    /*handleTitleClick*/
    ctx[9]
  );
  feedcardtitle.$on(
    "contextmenu",
    /*handleTitleContextMenu*/
    ctx[12]
  );
  feedcardtitle.$on(
    "mouseover",
    /*handleTitleMouseOver*/
    ctx[14]
  );
  let if_block0 = (
    /*displayContent*/
    ctx[8] != null && /*displayContent*/
    ctx[8].length > 0 && create_if_block_19(ctx)
  );
  let if_block1 = (
    /*tags*/
    ctx[3] != null && create_if_block10(ctx)
  );
  return {
    c() {
      create_component(feedcardtitle.$$.fragment);
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      t2 = space();
      div = element("div");
      div.textContent = `${/*creationString*/
      ctx[15]}`;
      attr(div, "class", "vault-explorer-feed-card__creation-time svelte-2wfhrr");
    },
    m(target, anchor) {
      mount_component(feedcardtitle, target, anchor);
      insert(target, t0, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t2, anchor);
      insert(target, div, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const feedcardtitle_changes = {};
      if (dirty[0] & /*fileInteractionStyle*/
      128)
        feedcardtitle_changes.fileInteractionStyle = /*fileInteractionStyle*/
        ctx2[7];
      if (dirty[0] & /*displayName, baseName, extension, enableFileIcons*/
      39 | dirty[1] & /*$$scope*/
      16) {
        feedcardtitle_changes.$$scope = { dirty, ctx: ctx2 };
      }
      feedcardtitle.$set(feedcardtitle_changes);
      if (
        /*displayContent*/
        ctx2[8] != null && /*displayContent*/
        ctx2[8].length > 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_19(ctx2);
          if_block0.c();
          if_block0.m(t1.parentNode, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*tags*/
        ctx2[3] != null
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*tags*/
          8) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block10(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t2.parentNode, t2);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(feedcardtitle.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(feedcardtitle.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(div);
      }
      destroy_component(feedcardtitle, detaching);
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
    }
  };
}
function create_default_slot4(ctx) {
  let stack;
  let current;
  stack = new stack_default({
    props: {
      spacing: "sm",
      direction: "column",
      $$slots: { default: [create_default_slot_13] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty[0] & /*tags, currentLineClamp, displayContent, fileInteractionStyle, displayName, baseName, extension, enableFileIcons*/
      495 | dirty[1] & /*$$scope*/
      16) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(stack, detaching);
    }
  };
}
function create_fragment27(ctx) {
  let feedcardcontainer;
  let updating_ref;
  let current;
  function feedcardcontainer_ref_binding(value) {
    ctx[22](value);
  }
  let feedcardcontainer_props = {
    fileInteractionStyle: (
      /*fileInteractionStyle*/
      ctx[7]
    ),
    $$slots: { default: [create_default_slot4] },
    $$scope: { ctx }
  };
  if (
    /*ref*/
    ctx[4] !== void 0
  ) {
    feedcardcontainer_props.ref = /*ref*/
    ctx[4];
  }
  feedcardcontainer = new feed_card_container_default({ props: feedcardcontainer_props });
  binding_callbacks.push(() => bind(feedcardcontainer, "ref", feedcardcontainer_ref_binding));
  feedcardcontainer.$on(
    "click",
    /*handleCardClick*/
    ctx[10]
  );
  feedcardcontainer.$on(
    "contextmenu",
    /*handleCardContextMenu*/
    ctx[11]
  );
  feedcardcontainer.$on(
    "mouseover",
    /*handleCardMouseOver*/
    ctx[13]
  );
  return {
    c() {
      create_component(feedcardcontainer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(feedcardcontainer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const feedcardcontainer_changes = {};
      if (dirty[0] & /*fileInteractionStyle*/
      128)
        feedcardcontainer_changes.fileInteractionStyle = /*fileInteractionStyle*/
        ctx2[7];
      if (dirty[0] & /*tags, currentLineClamp, displayContent, fileInteractionStyle, displayName, baseName, extension, enableFileIcons*/
      495 | dirty[1] & /*$$scope*/
      16) {
        feedcardcontainer_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_ref && dirty[0] & /*ref*/
      16) {
        updating_ref = true;
        feedcardcontainer_changes.ref = /*ref*/
        ctx2[4];
        add_flush_callback(() => updating_ref = false);
      }
      feedcardcontainer.$set(feedcardcontainer_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(feedcardcontainer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(feedcardcontainer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(feedcardcontainer, detaching);
    }
  };
}
function instance25($$self, $$props, $$invalidate) {
  let displayContent;
  let { displayName } = $$props;
  let { baseName } = $$props;
  let { extension } = $$props;
  let { path } = $$props;
  let { tags } = $$props;
  let { createdMillis } = $$props;
  let { content } = $$props;
  let { isFavorite } = $$props;
  let ref = null;
  let wordBreak = "normal";
  let enableFileIcons = false;
  let removeH1 = true;
  let lineClampSmall = 2;
  let lineClampMedium = 3;
  let lineClampLarge = 5;
  let collapseStyle = "no-new-lines";
  let currentLineClamp = lineClampLarge;
  let fileInteractionStyle = "content";
  const dispatch = createEventDispatcher();
  let plugin2;
  store_default.plugin.subscribe((value) => {
    plugin2 = value;
    wordBreak = plugin2.settings.titleWrapping;
    $$invalidate(5, enableFileIcons = plugin2.settings.enableFileIcons);
    $$invalidate(20, removeH1 = plugin2.settings.views.feed.removeH1);
    $$invalidate(21, collapseStyle = plugin2.settings.views.feed.collapseStyle);
    lineClampLarge = plugin2.settings.views.feed.lineClampLarge;
    lineClampMedium = plugin2.settings.views.feed.lineClampMedium;
    lineClampSmall = plugin2.settings.views.feed.lineClampSmall;
    $$invalidate(7, fileInteractionStyle = plugin2.settings.fileInteractionStyle);
  });
  onMount(() => {
    function handleFileIconsChange() {
      $$invalidate(5, enableFileIcons = plugin2.settings.enableFileIcons);
    }
    EventManager.getInstance().on("file-icons-setting-change" /* FILE_ICONS_SETTING_CHANGE */, handleFileIconsChange);
    return () => {
      EventManager.getInstance().off("file-icons-setting-change" /* FILE_ICONS_SETTING_CHANGE */, handleFileIconsChange);
    };
  });
  onMount(() => {
    function handleFileInteractionStyleChange() {
      $$invalidate(7, fileInteractionStyle = plugin2.settings.fileInteractionStyle);
    }
    EventManager.getInstance().on("file-interaction-style-setting-change" /* FILE_INTERACTION_STYLE */, handleFileInteractionStyleChange);
    return () => {
      EventManager.getInstance().off("file-interaction-style-setting-change" /* FILE_INTERACTION_STYLE */, handleFileInteractionStyleChange);
    };
  });
  onMount(() => {
    function handleTitleWrappingSettingChange() {
      wordBreak = plugin2.settings.titleWrapping;
    }
    EventManager.getInstance().on("title-wrapping-setting-change" /* TITLE_WRAPPING_SETTING_CHANGE */, handleTitleWrappingSettingChange);
    return () => {
      EventManager.getInstance().off("title-wrapping-setting-change" /* TITLE_WRAPPING_SETTING_CHANGE */, handleTitleWrappingSettingChange);
    };
  });
  onMount(() => {
    function handleCollapseFeedContentChange() {
      $$invalidate(20, removeH1 = plugin2.settings.views.feed.removeH1);
      $$invalidate(21, collapseStyle = plugin2.settings.views.feed.collapseStyle);
      lineClampLarge = plugin2.settings.views.feed.lineClampLarge;
      lineClampMedium = plugin2.settings.views.feed.lineClampMedium;
      lineClampSmall = plugin2.settings.views.feed.lineClampSmall;
      const leafEl = ref === null || ref === void 0 ? void 0 : ref.closest(".workspace-leaf-content");
      if (leafEl) {
        checkLeafWidth(leafEl);
      }
    }
    EventManager.getInstance().on("feed-content-setting-change" /* FEED_CONTENT_SETTING_CHANGE */, handleCollapseFeedContentChange);
    return () => {
      EventManager.getInstance().off("feed-content-setting-change" /* FEED_CONTENT_SETTING_CHANGE */, handleCollapseFeedContentChange);
    };
  });
  onMount(() => {
    let resizeObserver;
    const leafEl = ref === null || ref === void 0 ? void 0 : ref.closest(".workspace-leaf-content");
    if (leafEl) {
      checkLeafWidth(leafEl);
      resizeObserver = new ResizeObserver(() => {
        checkLeafWidth(leafEl);
      });
      resizeObserver.observe(leafEl);
    }
    return () => {
      resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
    };
  });
  function checkLeafWidth(leafEl) {
    const { clientWidth } = leafEl;
    if (clientWidth < SCREEN_SIZE_MD) {
      $$invalidate(6, currentLineClamp = lineClampSmall);
    } else if (clientWidth >= SCREEN_SIZE_MD && clientWidth < SCREEN_SIZE_LG) {
      $$invalidate(6, currentLineClamp = lineClampMedium);
    } else {
      $$invalidate(6, currentLineClamp = lineClampLarge);
    }
  }
  function handleTitleClick() {
    handleCardClick();
  }
  function handleCardClick() {
    openInCurrentTab(plugin2, path);
  }
  function handleFavoriteChange(filePath, value) {
    dispatch("favoritePropertyChange", { filePath, value });
  }
  function handleCardContextMenu(e) {
    const { nativeEvent } = e.detail;
    openContextMenu(plugin2, path, nativeEvent, {
      isFavorite,
      onFavoriteChange: handleFavoriteChange
    });
  }
  function handleTitleContextMenu(e) {
    handleCardContextMenu(e);
  }
  function handleCardMouseOver(e) {
    const targetEl = e.currentTarget;
    plugin2.app.workspace.trigger("hover-link", {
      event: e,
      linktext: path,
      source: HOVER_LINK_SOURCE_ID,
      targetEl,
      hoverParent: targetEl.parentElement
    });
  }
  function handleTitleMouseOver(e) {
    handleCardMouseOver(e);
  }
  const creationString = formatAsBearTimeString(createdMillis);
  function getDisplayContent(content2, removeH12, collapseStyle2) {
    if (content2 != null) {
      let displayContent2 = content2;
      displayContent2 = removeFrontmatter(displayContent2);
      if (removeH12) {
        displayContent2 = removeLevel1Headers(displayContent2);
      }
      displayContent2 = removeMarkdownHashes(displayContent2);
      displayContent2 = removeMarkdownTables(displayContent2);
      displayContent2 = removeBoldMarkdown(displayContent2);
      displayContent2 = removeItalicsMarkdown(displayContent2);
      displayContent2 = removeMarkdownHighlight(displayContent2);
      displayContent2 = removeCodeBlocks(displayContent2);
      displayContent2 = removeWikiLinks(displayContent2);
      displayContent2 = removeEmptyLines(displayContent2);
      if (collapseStyle2 === "no-new-lines") {
        displayContent2 = removeNewLines(displayContent2);
      } else {
        displayContent2 = removeExtraNewLines(displayContent2);
      }
      return displayContent2;
    }
    return content2;
  }
  function feedcardcontainer_ref_binding(value) {
    ref = value;
    $$invalidate(4, ref);
  }
  $$self.$$set = ($$props2) => {
    if ("displayName" in $$props2)
      $$invalidate(0, displayName = $$props2.displayName);
    if ("baseName" in $$props2)
      $$invalidate(1, baseName = $$props2.baseName);
    if ("extension" in $$props2)
      $$invalidate(2, extension = $$props2.extension);
    if ("path" in $$props2)
      $$invalidate(16, path = $$props2.path);
    if ("tags" in $$props2)
      $$invalidate(3, tags = $$props2.tags);
    if ("createdMillis" in $$props2)
      $$invalidate(17, createdMillis = $$props2.createdMillis);
    if ("content" in $$props2)
      $$invalidate(18, content = $$props2.content);
    if ("isFavorite" in $$props2)
      $$invalidate(19, isFavorite = $$props2.isFavorite);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*content, removeH1, collapseStyle*/
    3407872) {
      $:
        $$invalidate(8, displayContent = getDisplayContent(content, removeH1, collapseStyle));
    }
  };
  return [
    displayName,
    baseName,
    extension,
    tags,
    ref,
    enableFileIcons,
    currentLineClamp,
    fileInteractionStyle,
    displayContent,
    handleTitleClick,
    handleCardClick,
    handleCardContextMenu,
    handleTitleContextMenu,
    handleCardMouseOver,
    handleTitleMouseOver,
    creationString,
    path,
    createdMillis,
    content,
    isFavorite,
    removeH1,
    collapseStyle,
    feedcardcontainer_ref_binding
  ];
}
var Feed_card = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance25,
      create_fragment27,
      safe_not_equal,
      {
        displayName: 0,
        baseName: 1,
        extension: 2,
        path: 16,
        tags: 3,
        createdMillis: 17,
        content: 18,
        isFavorite: 19
      },
      null,
      [-1, -1]
    );
  }
};
var feed_card_default = Feed_card;

// src/svelte/app/components/feed-view.svelte
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function create_if_block_110(ctx) {
  let div;
  let premiummessage;
  let t;
  let premiumlink;
  let current;
  premiummessage = new premium_message_default({});
  premiumlink = new premium_link_default({});
  return {
    c() {
      div = element("div");
      create_component(premiummessage.$$.fragment);
      t = space();
      create_component(premiumlink.$$.fragment);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(premiummessage, div, null);
      append(div, t);
      mount_component(premiumlink, div, null);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(premiummessage.$$.fragment, local);
      transition_in(premiumlink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(premiummessage.$$.fragment, local);
      transition_out(premiumlink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(premiummessage);
      destroy_component(premiumlink);
    }
  };
}
function create_if_block11(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*filteredItems*/
    ctx[1]
  );
  const get_key = (ctx2) => (
    /*fileRenderData*/
    ctx2[6].id
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context6(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block6(key, child_ctx));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*filteredItems*/
      2) {
        each_value = ensure_array_like(
          /*filteredItems*/
          ctx2[1]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block6, each_1_anchor, get_each_context6);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d(detaching);
      }
    }
  };
}
function create_each_block6(key_1, ctx) {
  let first;
  let feedcard;
  let current;
  feedcard = new feed_card_default({
    props: {
      displayName: (
        /*fileRenderData*/
        ctx[6].displayName
      ),
      extension: (
        /*fileRenderData*/
        ctx[6].extension
      ),
      baseName: (
        /*fileRenderData*/
        ctx[6].baseName
      ),
      path: (
        /*fileRenderData*/
        ctx[6].path
      ),
      tags: (
        /*fileRenderData*/
        ctx[6].tags
      ),
      content: (
        /*fileRenderData*/
        ctx[6].content
      ),
      createdMillis: (
        /*fileRenderData*/
        ctx[6].createdMillis
      ),
      isFavorite: (
        /*fileRenderData*/
        ctx[6].isFavorite
      )
    }
  });
  feedcard.$on(
    "favoritePropertyChange",
    /*favoritePropertyChange_handler*/
    ctx[5]
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(feedcard.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(feedcard, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const feedcard_changes = {};
      if (dirty & /*filteredItems*/
      2)
        feedcard_changes.displayName = /*fileRenderData*/
        ctx[6].displayName;
      if (dirty & /*filteredItems*/
      2)
        feedcard_changes.extension = /*fileRenderData*/
        ctx[6].extension;
      if (dirty & /*filteredItems*/
      2)
        feedcard_changes.baseName = /*fileRenderData*/
        ctx[6].baseName;
      if (dirty & /*filteredItems*/
      2)
        feedcard_changes.path = /*fileRenderData*/
        ctx[6].path;
      if (dirty & /*filteredItems*/
      2)
        feedcard_changes.tags = /*fileRenderData*/
        ctx[6].tags;
      if (dirty & /*filteredItems*/
      2)
        feedcard_changes.content = /*fileRenderData*/
        ctx[6].content;
      if (dirty & /*filteredItems*/
      2)
        feedcard_changes.createdMillis = /*fileRenderData*/
        ctx[6].createdMillis;
      if (dirty & /*filteredItems*/
      2)
        feedcard_changes.isFavorite = /*fileRenderData*/
        ctx[6].isFavorite;
      feedcard.$set(feedcard_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(feedcard.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(feedcard.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      destroy_component(feedcard, detaching);
    }
  };
}
function create_fragment28(ctx) {
  let div;
  let t;
  let current;
  let if_block0 = !/*isDeviceRegistered*/
  ctx[0] && create_if_block_110(ctx);
  let if_block1 = (
    /*isDeviceRegistered*/
    ctx[0] && create_if_block11(ctx)
  );
  return {
    c() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      attr(div, "class", "vault-explorer-feed-view");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append(div, t);
      if (if_block1)
        if_block1.m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!/*isDeviceRegistered*/
      ctx2[0]) {
        if (if_block0) {
          if (dirty & /*isDeviceRegistered*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_110(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*isDeviceRegistered*/
        ctx2[0]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & /*isDeviceRegistered*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block11(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
    }
  };
}
function instance26($$self, $$props, $$invalidate) {
  let { isDeviceRegistered = false } = $$props;
  let { data = [] } = $$props;
  let { startIndex } = $$props;
  let { pageLength } = $$props;
  let filteredItems = [];
  License.getInstance().getIsDeviceRegisteredStore().subscribe((isRegistered) => {
    $$invalidate(0, isDeviceRegistered = isRegistered);
  });
  function favoritePropertyChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("isDeviceRegistered" in $$props2)
      $$invalidate(0, isDeviceRegistered = $$props2.isDeviceRegistered);
    if ("data" in $$props2)
      $$invalidate(2, data = $$props2.data);
    if ("startIndex" in $$props2)
      $$invalidate(3, startIndex = $$props2.startIndex);
    if ("pageLength" in $$props2)
      $$invalidate(4, pageLength = $$props2.pageLength);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*startIndex, data, pageLength*/
    28) {
      $: {
        if (startIndex < data.length) {
          $$invalidate(1, filteredItems = Array.from({ length: pageLength }, (_3, i) => {
            const index = startIndex + i;
            return data[index];
          }));
        } else {
          $$invalidate(1, filteredItems = []);
        }
      }
    }
  };
  return [
    isDeviceRegistered,
    filteredItems,
    data,
    startIndex,
    pageLength,
    favoritePropertyChange_handler
  ];
}
var Feed_view = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance26, create_fragment28, safe_not_equal, {
      isDeviceRegistered: 0,
      data: 2,
      startIndex: 3,
      pageLength: 4
    });
  }
};
var feed_view_default = Feed_view;

// src/svelte/app/components/pagination-indicator.svelte
function create_default_slot_34(ctx) {
  let span0;
  let t0_value = (
    /*startIndex*/
    ctx[0] + 1 + ""
  );
  let t0;
  let t1;
  let span1;
  let t3;
  let span2;
  let t4;
  return {
    c() {
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      span1.textContent = "-";
      t3 = space();
      span2 = element("span");
      t4 = text(
        /*endIndex*/
        ctx[1]
      );
    },
    m(target, anchor) {
      insert(target, span0, anchor);
      append(span0, t0);
      insert(target, t1, anchor);
      insert(target, span1, anchor);
      insert(target, t3, anchor);
      insert(target, span2, anchor);
      append(span2, t4);
    },
    p(ctx2, dirty) {
      if (dirty & /*startIndex*/
      1 && t0_value !== (t0_value = /*startIndex*/
      ctx2[0] + 1 + ""))
        set_data(t0, t0_value);
      if (dirty & /*endIndex*/
      2)
        set_data(
          t4,
          /*endIndex*/
          ctx2[1]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(span0);
        detach(t1);
        detach(span1);
        detach(t3);
        detach(span2);
      }
    }
  };
}
function create_default_slot_24(ctx) {
  let stack;
  let t0;
  let span0;
  let t2;
  let span1;
  let t3;
  let current;
  stack = new stack_default({
    props: {
      spacing: "xs",
      $$slots: { default: [create_default_slot_34] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
      t0 = space();
      span0 = element("span");
      span0.textContent = "of";
      t2 = space();
      span1 = element("span");
      t3 = text(
        /*totalItems*/
        ctx[4]
      );
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      insert(target, t0, anchor);
      insert(target, span0, anchor);
      insert(target, t2, anchor);
      insert(target, span1, anchor);
      append(span1, t3);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty & /*$$scope, endIndex, startIndex*/
      32771) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
      if (!current || dirty & /*totalItems*/
      16)
        set_data(
          t3,
          /*totalItems*/
          ctx2[4]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(span0);
        detach(t2);
        detach(span1);
      }
      destroy_component(stack, detaching);
    }
  };
}
function create_default_slot_14(ctx) {
  let iconbutton0;
  let t0;
  let iconbutton1;
  let t1;
  let iconbutton2;
  let t2;
  let iconbutton3;
  let current;
  iconbutton0 = new icon_button_default({
    props: {
      iconId: "chevrons-left",
      ariaLabel: "First page"
    }
  });
  iconbutton0.$on(
    "click",
    /*click_handler*/
    ctx[8]
  );
  iconbutton1 = new icon_button_default({
    props: {
      iconId: "chevron-left",
      ariaLabel: "Previous page",
      disabled: (
        /*currentPage*/
        ctx[2] === 1
      )
    }
  });
  iconbutton1.$on(
    "click",
    /*click_handler_1*/
    ctx[9]
  );
  iconbutton2 = new icon_button_default({
    props: {
      iconId: "chevron-right",
      ariaLabel: "Next page",
      disabled: (
        /*currentPage*/
        ctx[2] === /*totalPages*/
        ctx[3]
      )
    }
  });
  iconbutton2.$on(
    "click",
    /*click_handler_2*/
    ctx[10]
  );
  iconbutton3 = new icon_button_default({
    props: {
      iconId: "chevrons-right",
      ariaLabel: "Last page"
    }
  });
  iconbutton3.$on(
    "click",
    /*click_handler_3*/
    ctx[11]
  );
  return {
    c() {
      create_component(iconbutton0.$$.fragment);
      t0 = space();
      create_component(iconbutton1.$$.fragment);
      t1 = space();
      create_component(iconbutton2.$$.fragment);
      t2 = space();
      create_component(iconbutton3.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbutton0, target, anchor);
      insert(target, t0, anchor);
      mount_component(iconbutton1, target, anchor);
      insert(target, t1, anchor);
      mount_component(iconbutton2, target, anchor);
      insert(target, t2, anchor);
      mount_component(iconbutton3, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const iconbutton1_changes = {};
      if (dirty & /*currentPage*/
      4)
        iconbutton1_changes.disabled = /*currentPage*/
        ctx2[2] === 1;
      iconbutton1.$set(iconbutton1_changes);
      const iconbutton2_changes = {};
      if (dirty & /*currentPage, totalPages*/
      12)
        iconbutton2_changes.disabled = /*currentPage*/
        ctx2[2] === /*totalPages*/
        ctx2[3];
      iconbutton2.$set(iconbutton2_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(iconbutton0.$$.fragment, local);
      transition_in(iconbutton1.$$.fragment, local);
      transition_in(iconbutton2.$$.fragment, local);
      transition_in(iconbutton3.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton0.$$.fragment, local);
      transition_out(iconbutton1.$$.fragment, local);
      transition_out(iconbutton2.$$.fragment, local);
      transition_out(iconbutton3.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
      }
      destroy_component(iconbutton0, detaching);
      destroy_component(iconbutton1, detaching);
      destroy_component(iconbutton2, detaching);
      destroy_component(iconbutton3, detaching);
    }
  };
}
function create_default_slot5(ctx) {
  let stack;
  let t;
  let flex;
  let current;
  stack = new stack_default({
    props: {
      spacing: "xs",
      $$slots: { default: [create_default_slot_24] },
      $$scope: { ctx }
    }
  });
  flex = new flex_default({
    props: {
      $$slots: { default: [create_default_slot_14] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
      t = space();
      create_component(flex.$$.fragment);
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      insert(target, t, anchor);
      mount_component(flex, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty & /*$$scope, totalItems, endIndex, startIndex*/
      32787) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
      const flex_changes = {};
      if (dirty & /*$$scope, totalPages, currentPage*/
      32780) {
        flex_changes.$$scope = { dirty, ctx: ctx2 };
      }
      flex.$set(flex_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      transition_in(flex.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      transition_out(flex.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
      destroy_component(stack, detaching);
      destroy_component(flex, detaching);
    }
  };
}
function create_fragment29(ctx) {
  let div;
  let stack;
  let current;
  stack = new stack_default({
    props: {
      align: "center",
      direction: (
        /*isWrapped*/
        ctx[5] ? "row-reverse" : "row"
      ),
      justify: "flex-end",
      spacing: "md",
      $$slots: { default: [create_default_slot5] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(stack.$$.fragment);
      attr(div, "class", "vault-explorer-pagination-indicator svelte-1bhc0zr");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(stack, div, null);
      ctx[12](div);
      current = true;
    },
    p(ctx2, [dirty]) {
      const stack_changes = {};
      if (dirty & /*isWrapped*/
      32)
        stack_changes.direction = /*isWrapped*/
        ctx2[5] ? "row-reverse" : "row";
      if (dirty & /*$$scope, totalPages, currentPage, totalItems, endIndex, startIndex*/
      32799) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(stack);
      ctx[12](null);
    }
  };
}
function instance27($$self, $$props, $$invalidate) {
  let { startIndex } = $$props;
  let { endIndex } = $$props;
  let { currentPage } = $$props;
  let { totalPages } = $$props;
  let { totalItems } = $$props;
  let isWrapped = false;
  let ref = null;
  function checkWrapping() {
    const parentEl = ref === null || ref === void 0 ? void 0 : ref.parentElement;
    if (parentEl && ref) {
      if (ref.offsetWidth == parentEl.offsetWidth) {
        $$invalidate(5, isWrapped = true);
      } else {
        $$invalidate(5, isWrapped = false);
      }
    }
  }
  onMount(() => {
    let resizeObserver;
    const leafEl = ref === null || ref === void 0 ? void 0 : ref.closest(".workspace-leaf-content");
    if (leafEl) {
      checkWrapping();
      resizeObserver = new ResizeObserver(() => {
        checkWrapping();
      });
      resizeObserver.observe(leafEl);
    }
    return () => {
      resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
    };
  });
  const dispatch = createEventDispatcher();
  function handlePageChange(value) {
    dispatch("change", { value });
  }
  const click_handler = () => handlePageChange(1);
  const click_handler_1 = () => handlePageChange(currentPage - 1);
  const click_handler_2 = () => handlePageChange(currentPage + 1);
  const click_handler_3 = () => handlePageChange(totalPages);
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      ref = $$value;
      $$invalidate(6, ref);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("startIndex" in $$props2)
      $$invalidate(0, startIndex = $$props2.startIndex);
    if ("endIndex" in $$props2)
      $$invalidate(1, endIndex = $$props2.endIndex);
    if ("currentPage" in $$props2)
      $$invalidate(2, currentPage = $$props2.currentPage);
    if ("totalPages" in $$props2)
      $$invalidate(3, totalPages = $$props2.totalPages);
    if ("totalItems" in $$props2)
      $$invalidate(4, totalItems = $$props2.totalItems);
  };
  return [
    startIndex,
    endIndex,
    currentPage,
    totalPages,
    totalItems,
    isWrapped,
    ref,
    handlePageChange,
    click_handler,
    click_handler_1,
    click_handler_2,
    click_handler_3,
    div_binding
  ];
}
var Pagination_indicator = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance27, create_fragment29, safe_not_equal, {
      startIndex: 0,
      endIndex: 1,
      currentPage: 2,
      totalPages: 3,
      totalItems: 4
    });
  }
};
var pagination_indicator_default = Pagination_indicator;

// src/svelte/app/services/random-file-sort-store.ts
var import_js_logger8 = __toESM(require_logger());
function createRandomFileSortStore() {
  const { subscribe: subscribe2, set, update: update2 } = writable(/* @__PURE__ */ new Map());
  function load(app) {
    import_js_logger8.default.trace({
      fileName: "random-file-sort-store.ts",
      functionName: "load",
      message: "called"
    });
    const files = app.vault.getFiles();
    const randomSortFiles = new Map(
      files.map((file) => [file.path, randomSortKey()])
    );
    set(randomSortFiles);
  }
  function handleFileCreate(path) {
    update2((currentCache) => {
      const newCache = new Map(currentCache);
      newCache.set(path, randomSortKey());
      return newCache;
    });
  }
  function handleFileRename(oldPath, newPath) {
    update2((currentCache) => {
      const sortKey = currentCache.get(oldPath);
      if (sortKey !== void 0) {
        const newCache = new Map(currentCache);
        newCache.set(newPath, sortKey);
        newCache.delete(oldPath);
        return newCache;
      }
      return currentCache;
    });
  }
  function handleFileDelete(path) {
    update2((currentCache) => {
      const newCache = new Map(currentCache);
      newCache.delete(path);
      return newCache;
    });
  }
  function randomSortKey() {
    return Math.random();
  }
  return {
    load,
    subscribe: subscribe2,
    onFileCreate: handleFileCreate,
    onFileRename: handleFileRename,
    onFileDelete: handleFileDelete
  };
}
var randomFileSortStore = createRandomFileSortStore();

// src/svelte/app/services/file-content-store.ts
function createFileContentStore() {
  const { subscribe: subscribe2, set, update: update2 } = writable(/* @__PURE__ */ new Map());
  async function load(app) {
    const promises = [];
    const files = app.vault.getMarkdownFiles();
    for (let file of files) {
      promises.push(
        (async () => {
          const { basename, extension } = file;
          if (extension === "md" && !basename.endsWith(".excalidraw")) {
            const content = await app.vault.cachedRead(file);
            return {
              path: file.path,
              content
            };
          }
          return {
            path: file.path,
            content: null
          };
        })()
      );
    }
    const results = await Promise.all(promises);
    const contentForFiles = new Map(
      results.map((file) => [file.path, file.content])
    );
    set(contentForFiles);
  }
  async function handleFileCreate(app, file) {
    let content = null;
    if (file.extension === "md") {
      content = await app.vault.cachedRead(file);
    }
    update2((currentCache) => {
      const newCache = new Map(currentCache);
      newCache.set(file.path, content);
      return newCache;
    });
  }
  function handleFileRename(oldPath, newPath) {
    update2((currentCache) => {
      const content = currentCache.get(oldPath);
      if (content !== void 0) {
        const newCache = new Map(currentCache);
        newCache.set(newPath, content);
        newCache.delete(oldPath);
        return newCache;
      }
      return currentCache;
    });
  }
  function handleFileModify(path, newContent) {
    update2((currentCache) => {
      const newCache = new Map(currentCache);
      newCache.set(path, newContent);
      return newCache;
    });
  }
  function handleFileDelete(path) {
    update2((currentCache) => {
      const newCache = new Map(currentCache);
      newCache.delete(path);
      return newCache;
    });
  }
  return {
    load,
    subscribe: subscribe2,
    onFileCreate: handleFileCreate,
    onFileModify: handleFileModify,
    onFileRename: handleFileRename,
    onFileDelete: handleFileDelete
  };
}
var fileContentStore = createFileContentStore();

// src/svelte/app/services/file-store.ts
function createFileStore() {
  const { subscribe: subscribe2, set, update: update2 } = writable([]);
  async function load(app) {
    const files = app.vault.getFiles();
    const loadedFiles = files.map((file) => ({
      id: generateRandomId(),
      file
    }));
    set(loadedFiles);
  }
  async function handleFileCreate(file) {
    const newLoadedFile = {
      id: generateRandomId(),
      file
    };
    update2((loadedFiles) => {
      return [...loadedFiles, newLoadedFile];
    });
  }
  function handleFileRename(oldPath, updatedFile) {
    update2((loadedFiles) => {
      return loadedFiles.map((loadedFile) => {
        if (loadedFile.file.path === oldPath) {
          return {
            ...loadedFile,
            file: updatedFile
          };
        }
        return loadedFile;
      });
    });
  }
  function handleFileDelete(path) {
    update2((loadedFiles) => {
      return loadedFiles.filter(
        (loadedFiles2) => loadedFiles2.file.path !== path
      );
    });
  }
  return {
    load,
    subscribe: subscribe2,
    onFileCreate: handleFileCreate,
    onFileRename: handleFileRename,
    onFileDelete: handleFileDelete
  };
}
var fileStore = createFileStore();

// src/obsidian/custom-filter-modal.ts
var import_obsidian12 = require("obsidian");

// src/svelte/shared/components/divider.svelte
function create_fragment30(ctx) {
  let div;
  let div_class_value;
  return {
    c() {
      div = element("div");
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-118dkzv");
      set_style(
        div,
        "border-width",
        /*borderWidth*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*className*/
      2 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-118dkzv")) {
        attr(div, "class", div_class_value);
      }
      if (dirty & /*borderWidth*/
      1) {
        set_style(
          div,
          "border-width",
          /*borderWidth*/
          ctx2[0]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function instance28($$self, $$props, $$invalidate) {
  let className;
  let { direction = "horizontal" } = $$props;
  let { borderWidth = "var(--hr-thickness)" } = $$props;
  $$self.$$set = ($$props2) => {
    if ("direction" in $$props2)
      $$invalidate(2, direction = $$props2.direction);
    if ("borderWidth" in $$props2)
      $$invalidate(0, borderWidth = $$props2.borderWidth);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*direction*/
    4) {
      $:
        $$invalidate(1, className = `vault-explorer-divider vault-explorer-divider--${direction}`);
    }
  };
  return [borderWidth, className, direction];
}
var Divider = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance28, create_fragment30, safe_not_equal, { direction: 2, borderWidth: 0 });
  }
};
var divider_default = Divider;

// src/obsidian/utils.ts
var getAllObsidianProperties = (app) => {
  const properties = app.metadataTypeManager.getAllProperties();
  return Object.values(properties).sort((a, b) => a.name.localeCompare(b.name));
};
var getObsidianPropertiesByType = (app, type) => {
  return getAllObsidianProperties(app).filter((p) => p.type === type);
};
var getDropdownOptionsForProperties = (properties) => {
  return properties.reduce((acc, cur) => {
    acc[cur.name] = cur.name;
    return acc;
  }, { "": "Select a property" });
};

// src/svelte/shared/components/switch.svelte
function create_fragment31(ctx) {
  let div;
  let input;
  let div_class_value;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      input = element("input");
      attr(
        input,
        "id",
        /*id*/
        ctx[2]
      );
      attr(input, "type", "checkbox");
      attr(input, "class", "svelte-dc6puo");
      attr(div, "tabindex", "0");
      attr(div, "role", "switch");
      attr(
        div,
        "aria-checked",
        /*value*/
        ctx[1]
      );
      attr(
        div,
        "aria-label",
        /*ariaLabel*/
        ctx[0]
      );
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[3]
      ) + " svelte-dc6puo");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, input);
      if (!mounted) {
        dispose = [
          listen(
            div,
            "click",
            /*handleClick*/
            ctx[5]
          ),
          listen(
            div,
            "keydown",
            /*handleKeyDown*/
            ctx[4]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*id*/
      4) {
        attr(
          input,
          "id",
          /*id*/
          ctx2[2]
        );
      }
      if (dirty & /*value*/
      2) {
        attr(
          div,
          "aria-checked",
          /*value*/
          ctx2[1]
        );
      }
      if (dirty & /*ariaLabel*/
      1) {
        attr(
          div,
          "aria-label",
          /*ariaLabel*/
          ctx2[0]
        );
      }
      if (dirty & /*className*/
      8 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[3]
      ) + " svelte-dc6puo")) {
        attr(div, "class", div_class_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance29($$self, $$props, $$invalidate) {
  let className;
  let { ariaLabel = null } = $$props;
  let { value = false } = $$props;
  let { id = null } = $$props;
  const dispatch = createEventDispatcher();
  function handleKeyDown(e) {
    if (e.key === "Enter") {
      e.stopPropagation();
      dispatch("change", { value: !value });
    }
  }
  function handleClick(e) {
    e.stopPropagation();
    dispatch("change", { value: !value });
  }
  $$self.$$set = ($$props2) => {
    if ("ariaLabel" in $$props2)
      $$invalidate(0, ariaLabel = $$props2.ariaLabel);
    if ("value" in $$props2)
      $$invalidate(1, value = $$props2.value);
    if ("id" in $$props2)
      $$invalidate(2, id = $$props2.id);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*value*/
    2) {
      $:
        $$invalidate(3, className = "checkbox-container vault-explorer-switch" + (value ? " is-enabled" : ""));
    }
  };
  return [ariaLabel, value, id, className, handleKeyDown, handleClick];
}
var Switch = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance29, create_fragment31, safe_not_equal, { ariaLabel: 0, value: 1, id: 2 });
  }
};
var switch_default = Switch;

// src/svelte/custom-filter-app/components/filter-rule.svelte
var import_obsidian10 = require("obsidian");

// src/svelte/custom-filter-app/services/display-name-utils.ts
var getDisplayNameForFilterRuleType = (type) => {
  switch (type) {
    case "content" /* CONTENT */:
      return "content";
    case "file-name" /* FILE_NAME */:
      return "file name";
    case "folder" /* FOLDER */:
      return "folder";
    case "property" /* PROPERTY */:
      return "property";
    default:
      return "";
  }
};
var getDisplayNameForDatePropertyFilterValue = (value) => {
  switch (value) {
    case "today" /* TODAY */:
      return "today";
    case "tomorrow" /* TOMORROW */:
      return "tomorrow";
    case "yesterday" /* YESTERDAY */:
      return "yesterday";
    case "one-week-ago" /* ONE_WEEK_AGO */:
      return "one week ago";
    case "one-week-from-now" /* ONE_WEEK_FROM_NOW */:
      return "one week from now";
    case "one-month-ago" /* ONE_MONTH_AGO */:
      return "one month ago";
    case "one-month-from-now" /* ONE_MONTH_FROM_NOW */:
      return "one month from now";
    case "custom" /* CUSTOM */:
      return "custom";
    default:
      return "";
  }
};
var getDisplayNameForFilterCondition = (type) => {
  switch (type) {
    case "is" /* IS */:
    case "is" /* IS */:
    case "is" /* IS */:
    case "is" /* IS */:
    case "is" /* IS */:
      return "is";
    case "is-not" /* IS_NOT */:
    case "is-not" /* IS_NOT */:
    case "is-not" /* IS_NOT */:
    case "is-not" /* IS_NOT */:
      return "is not";
    case "contains" /* CONTAINS */:
    case "contains" /* CONTAINS */:
    case "contains" /* CONTAINS */:
    case "contains" /* CONTAINS */:
      return "contains";
    case "does-not-contain" /* DOES_NOT_CONTAIN */:
    case "does-not-contain" /* DOES_NOT_CONTAIN */:
    case "does-not-contain" /* DOES_NOT_CONTAIN */:
    case "does-not-contain" /* DOES_NOT_CONTAIN */:
      return "does not contain";
    case "starts-with" /* STARTS_WITH */:
    case "starts-with" /* STARTS_WITH */:
      return "starts with";
    case "ends-with" /* ENDS_WITH */:
    case "ends-with" /* ENDS_WITH */:
      return "ends with";
    case "exists" /* EXISTS */:
    case "exists" /* EXISTS */:
    case "exists" /* EXISTS */:
    case "exists" /* EXISTS */:
    case "exists" /* EXISTS */:
      return "exists";
    case "does-not-exist" /* DOES_NOT_EXIST */:
    case "does-not-exist" /* DOES_NOT_EXIST */:
    case "does-not-exist" /* DOES_NOT_EXIST */:
    case "does-not-exist" /* DOES_NOT_EXIST */:
    case "does-not-exist" /* DOES_NOT_EXIST */:
      return "does not exist";
    case "is-empty" /* IS_EMPTY */:
      return "is empty";
    case "is-not-empty" /* IS_NOT_EMPTY */:
      return "is not empty";
    case "is-equal" /* IS_EQUAL */:
      return "=";
    case "is-not-equal" /* IS_NOT_EQUAL */:
      return "!=";
    case "is-greater" /* IS_GREATER */:
      return ">";
    case "is-greater-or-equal" /* IS_GREATER_OR_EQUAL */:
      return ">=";
    case "is-less" /* IS_LESS */:
      return "<";
    case "is-less-or-equal" /* IS_LESS_OR_EQUAL */:
      return "<=";
    case "is-after" /* IS_AFTER */:
      return "is after";
    case "is-before" /* IS_BEFORE */:
      return "is before";
    case "is-on-or-after" /* IS_ON_OR_AFTER */:
      return "is on or after";
    case "is-on-or-before" /* IS_ON_OR_BEFORE */:
      return "is on or before";
    default:
      return "";
  }
};

// src/svelte/custom-filter-app/components/filter-rule.svelte
var get_after_toggle_slot_changes = (dirty) => ({});
var get_after_toggle_slot_context = (ctx) => ({});
var get_after_condition_slot_changes = (dirty) => ({});
var get_after_condition_slot_context = (ctx) => ({});
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i];
  return child_ctx;
}
var get_before_condition_slot_changes = (dirty) => ({});
var get_before_condition_slot_context = (ctx) => ({});
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[3] = list[i];
  return child_ctx;
}
function create_if_block12(ctx) {
  let select;
  let option0;
  let option1;
  let mounted;
  let dispose;
  return {
    c() {
      select = element("select");
      option0 = element("option");
      option0.textContent = "and";
      option1 = element("option");
      option1.textContent = "or";
      option0.__value = "and";
      set_input_value(option0, option0.__value);
      option1.__value = "or";
      set_input_value(option1, option1.__value);
      attr(select, "class", "vault-explorer-filter-rule__operator svelte-1nntcd6");
    },
    m(target, anchor) {
      insert(target, select, anchor);
      append(select, option0);
      append(select, option1);
      select_option(
        select,
        /*operator*/
        ctx[1]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*handleOperatorChange*/
          ctx[10]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*operator*/
      2) {
        select_option(
          select,
          /*operator*/
          ctx2[1]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(select);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_each_block_1(ctx) {
  let option;
  let t_value = getDisplayNameForFilterRuleType(
    /*type*/
    ctx[3]
  ) + "";
  let t;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t = text(t_value);
      option.__value = option_value_value = /*type*/
      ctx[3];
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_each_block7(ctx) {
  let option;
  let t0_value = getDisplayNameForFilterCondition(
    /*condition*/
    ctx[4]
  ) + "";
  let t0;
  let t1;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t0 = text(t0_value);
      t1 = space();
      option.__value = option_value_value = /*condition*/
      ctx[4];
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t0);
      append(option, t1);
    },
    p(ctx2, dirty) {
      if (dirty & /*filterConditions*/
      64 && t0_value !== (t0_value = getDisplayNameForFilterCondition(
        /*condition*/
        ctx2[4]
      ) + ""))
        set_data(t0, t0_value);
      if (dirty & /*filterConditions*/
      64 && option_value_value !== (option_value_value = /*condition*/
      ctx2[4])) {
        option.__value = option_value_value;
        set_input_value(option, option.__value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_default_slot_15(ctx) {
  let switch_1;
  let t0;
  let iconbutton;
  let t1;
  let current;
  switch_1 = new switch_default({ props: { value: (
    /*isEnabled*/
    ctx[2]
  ) } });
  switch_1.$on(
    "change",
    /*change_handler*/
    ctx[15]
  );
  iconbutton = new icon_button_default({
    props: {
      ariaLabel: "Rule actions",
      iconId: "ellipsis-vertical"
    }
  });
  iconbutton.$on(
    "click",
    /*handleActionsClick*/
    ctx[7]
  );
  const after_toggle_slot_template = (
    /*#slots*/
    ctx[14]["after-toggle"]
  );
  const after_toggle_slot = create_slot(
    after_toggle_slot_template,
    ctx,
    /*$$scope*/
    ctx[16],
    get_after_toggle_slot_context
  );
  return {
    c() {
      create_component(switch_1.$$.fragment);
      t0 = space();
      create_component(iconbutton.$$.fragment);
      t1 = space();
      if (after_toggle_slot)
        after_toggle_slot.c();
    },
    m(target, anchor) {
      mount_component(switch_1, target, anchor);
      insert(target, t0, anchor);
      mount_component(iconbutton, target, anchor);
      insert(target, t1, anchor);
      if (after_toggle_slot) {
        after_toggle_slot.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      const switch_1_changes = {};
      if (dirty & /*isEnabled*/
      4)
        switch_1_changes.value = /*isEnabled*/
        ctx2[2];
      switch_1.$set(switch_1_changes);
      if (after_toggle_slot) {
        if (after_toggle_slot.p && (!current || dirty & /*$$scope*/
        65536)) {
          update_slot_base(
            after_toggle_slot,
            after_toggle_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[16],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[16]
            ) : get_slot_changes(
              after_toggle_slot_template,
              /*$$scope*/
              ctx2[16],
              dirty,
              get_after_toggle_slot_changes
            ),
            get_after_toggle_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(switch_1.$$.fragment, local);
      transition_in(iconbutton.$$.fragment, local);
      transition_in(after_toggle_slot, local);
      current = true;
    },
    o(local) {
      transition_out(switch_1.$$.fragment, local);
      transition_out(iconbutton.$$.fragment, local);
      transition_out(after_toggle_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
      }
      destroy_component(switch_1, detaching);
      destroy_component(iconbutton, detaching);
      if (after_toggle_slot)
        after_toggle_slot.d(detaching);
    }
  };
}
function create_default_slot6(ctx) {
  let t0;
  let select0;
  let t1;
  let t2;
  let select1;
  let select1_disabled_value;
  let t3;
  let t4;
  let stack;
  let current;
  let mounted;
  let dispose;
  let if_block = (
    /*index*/
    ctx[0] > 0 && create_if_block12(ctx)
  );
  let each_value_1 = ensure_array_like(Object.values(FilterRuleType));
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  const before_condition_slot_template = (
    /*#slots*/
    ctx[14]["before-condition"]
  );
  const before_condition_slot = create_slot(
    before_condition_slot_template,
    ctx,
    /*$$scope*/
    ctx[16],
    get_before_condition_slot_context
  );
  let each_value = ensure_array_like(
    /*filterConditions*/
    ctx[6]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block7(get_each_context7(ctx, each_value, i));
  }
  const after_condition_slot_template = (
    /*#slots*/
    ctx[14]["after-condition"]
  );
  const after_condition_slot = create_slot(
    after_condition_slot_template,
    ctx,
    /*$$scope*/
    ctx[16],
    get_after_condition_slot_context
  );
  stack = new stack_default({
    props: {
      spacing: "sm",
      align: "center",
      $$slots: { default: [create_default_slot_15] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      if (if_block)
        if_block.c();
      t0 = space();
      select0 = element("select");
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t1 = space();
      if (before_condition_slot)
        before_condition_slot.c();
      t2 = space();
      select1 = element("select");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t3 = space();
      if (after_condition_slot)
        after_condition_slot.c();
      t4 = space();
      create_component(stack.$$.fragment);
      attr(select0, "class", "svelte-1nntcd6");
      select1.disabled = select1_disabled_value = /*type*/
      ctx[3] === "content" /* CONTENT */ && !/*isDeviceRegistered*/
      ctx[5];
      attr(select1, "class", "svelte-1nntcd6");
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t0, anchor);
      insert(target, select0, anchor);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(select0, null);
        }
      }
      select_option(
        select0,
        /*type*/
        ctx[3]
      );
      insert(target, t1, anchor);
      if (before_condition_slot) {
        before_condition_slot.m(target, anchor);
      }
      insert(target, t2, anchor);
      insert(target, select1, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(select1, null);
        }
      }
      select_option(
        select1,
        /*condition*/
        ctx[4]
      );
      insert(target, t3, anchor);
      if (after_condition_slot) {
        after_condition_slot.m(target, anchor);
      }
      insert(target, t4, anchor);
      mount_component(stack, target, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            select0,
            "change",
            /*handleTypeChange*/
            ctx[8]
          ),
          listen(
            select1,
            "change",
            /*handleConditionChange*/
            ctx[9]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (
        /*index*/
        ctx2[0] > 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block12(ctx2);
          if_block.c();
          if_block.m(t0.parentNode, t0);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & /*Object*/
      0) {
        each_value_1 = ensure_array_like(Object.values(FilterRuleType));
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
          } else {
            each_blocks_1[i] = create_each_block_1(child_ctx);
            each_blocks_1[i].c();
            each_blocks_1[i].m(select0, null);
          }
        }
        for (; i < each_blocks_1.length; i += 1) {
          each_blocks_1[i].d(1);
        }
        each_blocks_1.length = each_value_1.length;
      }
      if (!current || dirty & /*type, Object*/
      8) {
        select_option(
          select0,
          /*type*/
          ctx2[3]
        );
      }
      if (before_condition_slot) {
        if (before_condition_slot.p && (!current || dirty & /*$$scope*/
        65536)) {
          update_slot_base(
            before_condition_slot,
            before_condition_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[16],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[16]
            ) : get_slot_changes(
              before_condition_slot_template,
              /*$$scope*/
              ctx2[16],
              dirty,
              get_before_condition_slot_changes
            ),
            get_before_condition_slot_context
          );
        }
      }
      if (dirty & /*filterConditions*/
      64) {
        each_value = ensure_array_like(
          /*filterConditions*/
          ctx2[6]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context7(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block7(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (!current || dirty & /*type, isDeviceRegistered, Object*/
      40 && select1_disabled_value !== (select1_disabled_value = /*type*/
      ctx2[3] === "content" /* CONTENT */ && !/*isDeviceRegistered*/
      ctx2[5])) {
        select1.disabled = select1_disabled_value;
      }
      if (!current || dirty & /*condition, filterConditions*/
      80) {
        select_option(
          select1,
          /*condition*/
          ctx2[4]
        );
      }
      if (after_condition_slot) {
        if (after_condition_slot.p && (!current || dirty & /*$$scope*/
        65536)) {
          update_slot_base(
            after_condition_slot,
            after_condition_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[16],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[16]
            ) : get_slot_changes(
              after_condition_slot_template,
              /*$$scope*/
              ctx2[16],
              dirty,
              get_after_condition_slot_changes
            ),
            get_after_condition_slot_context
          );
        }
      }
      const stack_changes = {};
      if (dirty & /*$$scope, isEnabled*/
      65540) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(before_condition_slot, local);
      transition_in(after_condition_slot, local);
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(before_condition_slot, local);
      transition_out(after_condition_slot, local);
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(select0);
        detach(t1);
        detach(t2);
        detach(select1);
        detach(t3);
        detach(t4);
      }
      if (if_block)
        if_block.d(detaching);
      destroy_each(each_blocks_1, detaching);
      if (before_condition_slot)
        before_condition_slot.d(detaching);
      destroy_each(each_blocks, detaching);
      if (after_condition_slot)
        after_condition_slot.d(detaching);
      destroy_component(stack, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment32(ctx) {
  let div;
  let wrap;
  let current;
  wrap = new wrap_default({
    props: {
      spacingX: "sm",
      spacingY: "sm",
      align: "center",
      $$slots: { default: [create_default_slot6] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(wrap.$$.fragment);
      attr(div, "class", "vault-explorer-filter-rule svelte-1nntcd6");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(wrap, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const wrap_changes = {};
      if (dirty & /*$$scope, isEnabled, type, isDeviceRegistered, condition, filterConditions, operator, index*/
      65663) {
        wrap_changes.$$scope = { dirty, ctx: ctx2 };
      }
      wrap.$set(wrap_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(wrap.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(wrap.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(wrap);
    }
  };
}
function instance30($$self, $$props, $$invalidate) {
  let filterConditions;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { index } = $$props;
  let { id } = $$props;
  let { type } = $$props;
  let { propertyType } = $$props;
  let { operator } = $$props;
  let { condition } = $$props;
  let { isEnabled } = $$props;
  let isDeviceRegistered = false;
  const dispatch = createEventDispatcher();
  License.getInstance().getIsDeviceRegisteredStore().subscribe((isRegistered) => {
    $$invalidate(5, isDeviceRegistered = isRegistered);
  });
  function handleActionsClick(e) {
    const nativeEvent = e.detail.nativeEvent;
    const menu = new import_obsidian10.Menu();
    menu.setUseNativeMenu(true);
    menu.addItem((item) => {
      item.setTitle("Duplicate");
      item.onClick(() => handleDuplicateClick());
    });
    menu.addItem((item) => {
      item.setTitle("Delete");
      item.onClick(() => handleDeleteClick());
    });
    menu.showAtMouseEvent(nativeEvent);
  }
  function handleDuplicateClick() {
    dispatch("ruleDuplicateClick", { id });
  }
  function handleDeleteClick() {
    dispatch("ruleDeleteClick", { id });
  }
  function handleTypeChange(e) {
    const value = e.target.value;
    dispatch("ruleTypeChange", { id, type: value });
  }
  function handleConditionChange(e) {
    const value = e.target.value;
    dispatch("ruleConditionChange", { id, condition: value });
  }
  function handleOperatorChange(e) {
    const value = e.target.value;
    dispatch("ruleOperatorChange", { id, operator: value });
  }
  function handleToggle() {
    dispatch("ruleToggle", { id });
  }
  function findFilterConditions(type2, propertyType2) {
    if (type2 === "property" /* PROPERTY */) {
      if (propertyType2 === "text") {
        return Object.values(TextFilterCondition);
      } else if (propertyType2 === "number") {
        return Object.values(NumberFilterCondition);
      } else if (propertyType2 === "list") {
        return Object.values(ListFilterCondition);
      } else if (propertyType2 === "checkbox") {
        return Object.values(CheckboxFilterCondition);
      } else if (propertyType2 === "date" || propertyType2 === "datetime") {
        return Object.values(DateFilterCondition);
      } else {
        throw new Error(`Unknown PropertyFilterCondition type: ${type2}`);
      }
    } else if (type2 === "folder" /* FOLDER */) {
      return Object.values(FolderFilterCondition);
    } else if (type2 === "file-name" /* FILE_NAME */) {
      return Object.values(FileNameFilterCondition);
    } else if (type2 === "content" /* CONTENT */) {
      return Object.values(ContentFilterCondition);
    } else {
      throw new Error(`Unknown FilterConditionType: ${type2}`);
    }
  }
  const change_handler = () => handleToggle();
  $$self.$$set = ($$props2) => {
    if ("index" in $$props2)
      $$invalidate(0, index = $$props2.index);
    if ("id" in $$props2)
      $$invalidate(12, id = $$props2.id);
    if ("type" in $$props2)
      $$invalidate(3, type = $$props2.type);
    if ("propertyType" in $$props2)
      $$invalidate(13, propertyType = $$props2.propertyType);
    if ("operator" in $$props2)
      $$invalidate(1, operator = $$props2.operator);
    if ("condition" in $$props2)
      $$invalidate(4, condition = $$props2.condition);
    if ("isEnabled" in $$props2)
      $$invalidate(2, isEnabled = $$props2.isEnabled);
    if ("$$scope" in $$props2)
      $$invalidate(16, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*type, propertyType*/
    8200) {
      $:
        $$invalidate(6, filterConditions = findFilterConditions(type, propertyType));
    }
  };
  return [
    index,
    operator,
    isEnabled,
    type,
    condition,
    isDeviceRegistered,
    filterConditions,
    handleActionsClick,
    handleTypeChange,
    handleConditionChange,
    handleOperatorChange,
    handleToggle,
    id,
    propertyType,
    slots,
    change_handler,
    $$scope
  ];
}
var Filter_rule = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance30, create_fragment32, safe_not_equal, {
      index: 0,
      id: 12,
      type: 3,
      propertyType: 13,
      operator: 1,
      condition: 4,
      isEnabled: 2
    });
  }
};
var filter_rule_default = Filter_rule;

// src/svelte/custom-filter-app/components/property-filter.svelte
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i];
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list[i];
  return child_ctx;
}
function get_each_context8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[10] = list[i];
  return child_ctx;
}
function create_each_block_2(ctx) {
  let option;
  let t_value = (
    /*type*/
    ctx[9] + ""
  );
  let t;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t = text(t_value);
      option.__value = option_value_value = /*type*/
      ctx[9];
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_each_block_12(key_1, ctx) {
  let option;
  let t_value = (
    /*prop*/
    ctx[28].name + ""
  );
  let t;
  let option_value_value;
  return {
    key: key_1,
    first: null,
    c() {
      option = element("option");
      t = text(t_value);
      option.__value = option_value_value = /*prop*/
      ctx[28].name;
      set_input_value(option, option.__value);
      this.first = option;
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*filteredObsidianProperties*/
      2048 && t_value !== (t_value = /*prop*/
      ctx[28].name + ""))
        set_data(t, t_value);
      if (dirty[0] & /*filteredObsidianProperties*/
      2048 && option_value_value !== (option_value_value = /*prop*/
      ctx[28].name)) {
        option.__value = option_value_value;
        set_input_value(option, option.__value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_before_condition_slot(ctx) {
  let select0;
  let t0;
  let select1;
  let option;
  let each_blocks = [];
  let each1_lookup = /* @__PURE__ */ new Map();
  let mounted;
  let dispose;
  let each_value_2 = ensure_array_like(Object.values(PropertyType));
  let each_blocks_1 = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  let each_value_1 = ensure_array_like(
    /*filteredObsidianProperties*/
    ctx[11]
  );
  const get_key = (ctx2) => (
    /*prop*/
    ctx2[28].name
  );
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_12(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each1_lookup.set(key, each_blocks[i] = create_each_block_12(key, child_ctx));
  }
  return {
    c() {
      select0 = element("select");
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t0 = space();
      select1 = element("select");
      option = element("option");
      option.textContent = "select a property";
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      option.__value = "";
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert(target, select0, anchor);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        if (each_blocks_1[i]) {
          each_blocks_1[i].m(select0, null);
        }
      }
      select_option(
        select0,
        /*propertyType*/
        ctx[3]
      );
      insert(target, t0, anchor);
      insert(target, select1, anchor);
      append(select1, option);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(select1, null);
        }
      }
      select_option(
        select1,
        /*propertyName*/
        ctx[2]
      );
      if (!mounted) {
        dispose = [
          listen(
            select0,
            "change",
            /*handlePropertyTypeChange*/
            ctx[13]
          ),
          listen(
            select1,
            "change",
            /*handlePropertyNameChange*/
            ctx[14]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*Object*/
      0) {
        each_value_2 = ensure_array_like(Object.values(PropertyType));
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i);
          if (each_blocks_1[i]) {
            each_blocks_1[i].p(child_ctx, dirty);
          } else {
            each_blocks_1[i] = create_each_block_2(child_ctx);
            each_blocks_1[i].c();
            each_blocks_1[i].m(select0, null);
          }
        }
        for (; i < each_blocks_1.length; i += 1) {
          each_blocks_1[i].d(1);
        }
        each_blocks_1.length = each_value_2.length;
      }
      if (dirty[0] & /*propertyType*/
      8) {
        select_option(
          select0,
          /*propertyType*/
          ctx2[3]
        );
      }
      if (dirty[0] & /*filteredObsidianProperties*/
      2048) {
        each_value_1 = ensure_array_like(
          /*filteredObsidianProperties*/
          ctx2[11]
        );
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value_1, each1_lookup, select1, destroy_block, create_each_block_12, null, get_each_context_12);
      }
      if (dirty[0] & /*propertyName, filteredObsidianProperties*/
      2052) {
        select_option(
          select1,
          /*propertyName*/
          ctx2[2]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(select0);
        detach(t0);
        detach(select1);
      }
      destroy_each(each_blocks_1, detaching);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_42(ctx) {
  let select;
  let option0;
  let option1;
  let mounted;
  let dispose;
  return {
    c() {
      select = element("select");
      option0 = element("option");
      option0.textContent = "true";
      option1 = element("option");
      option1.textContent = "false";
      option0.__value = "true";
      set_input_value(option0, option0.__value);
      option1.__value = "false";
      set_input_value(option1, option1.__value);
    },
    m(target, anchor) {
      insert(target, select, anchor);
      append(select, option0);
      append(select, option1);
      select_option(
        select,
        /*value*/
        ctx[10]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*handleValueChange*/
          ctx[12]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*value*/
      1024) {
        select_option(
          select,
          /*value*/
          ctx2[10]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(select);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_32(ctx) {
  let select;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(Object.values(DatePropertyFilterValue));
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block8(get_each_context8(ctx, each_value, i));
  }
  return {
    c() {
      select = element("select");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
    },
    m(target, anchor) {
      insert(target, select, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(select, null);
        }
      }
      select_option(
        select,
        /*value*/
        ctx[10]
      );
      if (!mounted) {
        dispose = listen(
          select,
          "change",
          /*handleValueChange*/
          ctx[12]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*Object*/
      0) {
        each_value = ensure_array_like(Object.values(DatePropertyFilterValue));
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context8(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block8(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty[0] & /*value*/
      1024) {
        select_option(
          select,
          /*value*/
          ctx2[10]
        );
      }
    },
    d(detaching) {
      if (detaching) {
        detach(select);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block8(ctx) {
  let option;
  let t0_value = getDisplayNameForDatePropertyFilterValue(
    /*value*/
    ctx[10]
  ) + "";
  let t0;
  let t1;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t0 = text(t0_value);
      t1 = space();
      option.__value = option_value_value = /*value*/
      ctx[10];
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t0);
      append(option, t1);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_if_block_23(ctx) {
  let input;
  let input_type_value;
  let input_placeholder_value;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "type", input_type_value = /*propertyType*/
      ctx[3] === "number" /* NUMBER */ ? "number" : "text");
      attr(input, "placeholder", input_placeholder_value = /*propertyType*/
      ctx[3] === "list" /* LIST */ ? "item1,item2,item3" : "value");
      input.value = /*value*/
      ctx[10];
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*handleValueChange*/
          ctx[12]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*propertyType*/
      8 && input_type_value !== (input_type_value = /*propertyType*/
      ctx2[3] === "number" /* NUMBER */ ? "number" : "text")) {
        attr(input, "type", input_type_value);
      }
      if (dirty[0] & /*propertyType*/
      8 && input_placeholder_value !== (input_placeholder_value = /*propertyType*/
      ctx2[3] === "list" /* LIST */ ? "item1,item2,item3" : "value")) {
        attr(input, "placeholder", input_placeholder_value);
      }
      if (dirty[0] & /*value*/
      1024 && input.value !== /*value*/
      ctx2[10]) {
        input.value = /*value*/
        ctx2[10];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_111(ctx) {
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "type", "date");
      input.value = /*valueData*/
      ctx[5];
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*handleValueDataChange*/
          ctx[15]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*valueData*/
      32) {
        input.value = /*valueData*/
        ctx2[5];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block13(ctx) {
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "aria-label", "Match when property doesn't exist");
      attr(input, "type", "checkbox");
      input.checked = /*matchWhenPropertyDNE*/
      ctx[8];
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*handleMatchWhenDNEChange*/
          ctx[16]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*matchWhenPropertyDNE*/
      256) {
        input.checked = /*matchWhenPropertyDNE*/
        ctx2[8];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_after_condition_slot(ctx) {
  let t0;
  let t1;
  let t2;
  let t3;
  let if_block4_anchor;
  let if_block0 = (
    /*propertyType*/
    ctx[3] === "checkbox" /* CHECKBOX */ && /*condition*/
    ctx[6] !== "exists" /* EXISTS */ && /*condition*/
    ctx[6] !== "does-not-exist" /* DOES_NOT_EXIST */ && create_if_block_42(ctx)
  );
  let if_block1 = (
    /*propertyType*/
    (ctx[3] === "date" /* DATE */ || /*propertyType*/
    ctx[3] === "datetime" /* DATETIME */) && /*condition*/
    ctx[6] !== "exists" /* EXISTS */ && /*condition*/
    ctx[6] !== "does-not-exist" /* DOES_NOT_EXIST */ && create_if_block_32(ctx)
  );
  let if_block2 = (
    /*propertyType*/
    ctx[3] !== "checkbox" /* CHECKBOX */ && /*propertyType*/
    ctx[3] !== "date" /* DATE */ && /*propertyType*/
    ctx[3] !== "datetime" /* DATETIME */ && /*condition*/
    ctx[6] !== "exists" /* EXISTS */ && /*condition*/
    ctx[6] !== "does-not-exist" /* DOES_NOT_EXIST */ && create_if_block_23(ctx)
  );
  let if_block3 = (
    /*propertyType*/
    (ctx[3] === "date" /* DATE */ || /*propertyType*/
    ctx[3] === "datetime" /* DATETIME */) && /*value*/
    ctx[10] == "custom" /* CUSTOM */ && /*condition*/
    ctx[6] !== "exists" /* EXISTS */ && /*condition*/
    ctx[6] !== "does-not-exist" /* DOES_NOT_EXIST */ && create_if_block_111(ctx)
  );
  let if_block4 = (
    /*condition*/
    ctx[6] !== "exists" /* EXISTS */ && /*condition*/
    ctx[6] !== "does-not-exist" /* DOES_NOT_EXIST */ && create_if_block13(ctx)
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      if (if_block2)
        if_block2.c();
      t2 = space();
      if (if_block3)
        if_block3.c();
      t3 = space();
      if (if_block4)
        if_block4.c();
      if_block4_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t0, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t1, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t2, anchor);
      if (if_block3)
        if_block3.m(target, anchor);
      insert(target, t3, anchor);
      if (if_block4)
        if_block4.m(target, anchor);
      insert(target, if_block4_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*propertyType*/
        ctx2[3] === "checkbox" /* CHECKBOX */ && /*condition*/
        ctx2[6] !== "exists" /* EXISTS */ && /*condition*/
        ctx2[6] !== "does-not-exist" /* DOES_NOT_EXIST */
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_42(ctx2);
          if_block0.c();
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*propertyType*/
        (ctx2[3] === "date" /* DATE */ || /*propertyType*/
        ctx2[3] === "datetime" /* DATETIME */) && /*condition*/
        ctx2[6] !== "exists" /* EXISTS */ && /*condition*/
        ctx2[6] !== "does-not-exist" /* DOES_NOT_EXIST */
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_32(ctx2);
          if_block1.c();
          if_block1.m(t1.parentNode, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*propertyType*/
        ctx2[3] !== "checkbox" /* CHECKBOX */ && /*propertyType*/
        ctx2[3] !== "date" /* DATE */ && /*propertyType*/
        ctx2[3] !== "datetime" /* DATETIME */ && /*condition*/
        ctx2[6] !== "exists" /* EXISTS */ && /*condition*/
        ctx2[6] !== "does-not-exist" /* DOES_NOT_EXIST */
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block_23(ctx2);
          if_block2.c();
          if_block2.m(t2.parentNode, t2);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (
        /*propertyType*/
        (ctx2[3] === "date" /* DATE */ || /*propertyType*/
        ctx2[3] === "datetime" /* DATETIME */) && /*value*/
        ctx2[10] == "custom" /* CUSTOM */ && /*condition*/
        ctx2[6] !== "exists" /* EXISTS */ && /*condition*/
        ctx2[6] !== "does-not-exist" /* DOES_NOT_EXIST */
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
        } else {
          if_block3 = create_if_block_111(ctx2);
          if_block3.c();
          if_block3.m(t3.parentNode, t3);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
      if (
        /*condition*/
        ctx2[6] !== "exists" /* EXISTS */ && /*condition*/
        ctx2[6] !== "does-not-exist" /* DOES_NOT_EXIST */
      ) {
        if (if_block4) {
          if_block4.p(ctx2, dirty);
        } else {
          if_block4 = create_if_block13(ctx2);
          if_block4.c();
          if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
        }
      } else if (if_block4) {
        if_block4.d(1);
        if_block4 = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
        detach(t3);
        detach(if_block4_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
      if (if_block2)
        if_block2.d(detaching);
      if (if_block3)
        if_block3.d(detaching);
      if (if_block4)
        if_block4.d(detaching);
    }
  };
}
function create_fragment33(ctx) {
  let filterrule;
  let current;
  filterrule = new filter_rule_default({
    props: {
      index: (
        /*index*/
        ctx[0]
      ),
      id: (
        /*id*/
        ctx[1]
      ),
      propertyType: (
        /*propertyType*/
        ctx[3]
      ),
      type: (
        /*type*/
        ctx[9]
      ),
      operator: (
        /*operator*/
        ctx[4]
      ),
      condition: (
        /*condition*/
        ctx[6]
      ),
      isEnabled: (
        /*isEnabled*/
        ctx[7]
      ),
      $$slots: {
        "after-condition": [create_after_condition_slot],
        "before-condition": [create_before_condition_slot]
      },
      $$scope: { ctx }
    }
  });
  filterrule.$on(
    "ruleDeleteClick",
    /*ruleDeleteClick_handler*/
    ctx[18]
  );
  filterrule.$on(
    "ruleDuplicateClick",
    /*ruleDuplicateClick_handler*/
    ctx[19]
  );
  filterrule.$on(
    "ruleTypeChange",
    /*ruleTypeChange_handler*/
    ctx[20]
  );
  filterrule.$on(
    "ruleConditionChange",
    /*ruleConditionChange_handler*/
    ctx[21]
  );
  filterrule.$on(
    "ruleOperatorChange",
    /*ruleOperatorChange_handler*/
    ctx[22]
  );
  filterrule.$on(
    "ruleToggle",
    /*ruleToggle_handler*/
    ctx[23]
  );
  return {
    c() {
      create_component(filterrule.$$.fragment);
    },
    m(target, anchor) {
      mount_component(filterrule, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const filterrule_changes = {};
      if (dirty[0] & /*index*/
      1)
        filterrule_changes.index = /*index*/
        ctx2[0];
      if (dirty[0] & /*id*/
      2)
        filterrule_changes.id = /*id*/
        ctx2[1];
      if (dirty[0] & /*propertyType*/
      8)
        filterrule_changes.propertyType = /*propertyType*/
        ctx2[3];
      if (dirty[0] & /*type*/
      512)
        filterrule_changes.type = /*type*/
        ctx2[9];
      if (dirty[0] & /*operator*/
      16)
        filterrule_changes.operator = /*operator*/
        ctx2[4];
      if (dirty[0] & /*condition*/
      64)
        filterrule_changes.condition = /*condition*/
        ctx2[6];
      if (dirty[0] & /*isEnabled*/
      128)
        filterrule_changes.isEnabled = /*isEnabled*/
        ctx2[7];
      if (dirty[0] & /*matchWhenPropertyDNE, condition, valueData, propertyType, value, propertyName, filteredObsidianProperties*/
      3436 | dirty[1] & /*$$scope*/
      4) {
        filterrule_changes.$$scope = { dirty, ctx: ctx2 };
      }
      filterrule.$set(filterrule_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(filterrule.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filterrule.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(filterrule, detaching);
    }
  };
}
function instance31($$self, $$props, $$invalidate) {
  let filteredObsidianProperties;
  let { index } = $$props;
  let { id } = $$props;
  let { type } = $$props;
  let { propertyName } = $$props;
  let { propertyType } = $$props;
  let { operator } = $$props;
  let { value } = $$props;
  let { valueData } = $$props;
  let { condition } = $$props;
  let { isEnabled } = $$props;
  let { matchWhenPropertyDNE } = $$props;
  let plugin2;
  let obsidianProperties = [];
  store_default.plugin.subscribe((p) => {
    plugin2 = p;
    $$invalidate(17, obsidianProperties = getAllObsidianProperties(plugin2.app));
  });
  const dispatch = createEventDispatcher();
  function handleValueChange(e) {
    const value2 = e.target.value;
    dispatch("ruleValueChange", { id, value: value2 });
  }
  function handlePropertyTypeChange(e) {
    const value2 = e.target.value;
    dispatch("propertyTypeChange", { id, propertyType: value2 });
  }
  function handlePropertyNameChange(e) {
    const value2 = e.target.value;
    dispatch("propertyNameChange", { id, name: value2 });
  }
  function handleValueDataChange(e) {
    const value2 = e.target.value;
    dispatch("propertyValueDataChange", { id, value: value2 });
  }
  function handleMatchWhenDNEChange(e) {
    const value2 = e.target.checked;
    dispatch("propertyMatchWhenPropertyDNEChange", { id, matchWhenDNE: value2 });
  }
  function ruleDeleteClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDuplicateClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleTypeChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleConditionChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleOperatorChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleToggle_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("index" in $$props2)
      $$invalidate(0, index = $$props2.index);
    if ("id" in $$props2)
      $$invalidate(1, id = $$props2.id);
    if ("type" in $$props2)
      $$invalidate(9, type = $$props2.type);
    if ("propertyName" in $$props2)
      $$invalidate(2, propertyName = $$props2.propertyName);
    if ("propertyType" in $$props2)
      $$invalidate(3, propertyType = $$props2.propertyType);
    if ("operator" in $$props2)
      $$invalidate(4, operator = $$props2.operator);
    if ("value" in $$props2)
      $$invalidate(10, value = $$props2.value);
    if ("valueData" in $$props2)
      $$invalidate(5, valueData = $$props2.valueData);
    if ("condition" in $$props2)
      $$invalidate(6, condition = $$props2.condition);
    if ("isEnabled" in $$props2)
      $$invalidate(7, isEnabled = $$props2.isEnabled);
    if ("matchWhenPropertyDNE" in $$props2)
      $$invalidate(8, matchWhenPropertyDNE = $$props2.matchWhenPropertyDNE);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*obsidianProperties, propertyType*/
    131080) {
      $:
        $$invalidate(11, filteredObsidianProperties = obsidianProperties.filter((prop) => {
          if (propertyType === "list") {
            return prop.type === "aliases" || prop.type === "tags" || prop.type === "multitext";
          }
          return prop.type === propertyType;
        }));
    }
  };
  return [
    index,
    id,
    propertyName,
    propertyType,
    operator,
    valueData,
    condition,
    isEnabled,
    matchWhenPropertyDNE,
    type,
    value,
    filteredObsidianProperties,
    handleValueChange,
    handlePropertyTypeChange,
    handlePropertyNameChange,
    handleValueDataChange,
    handleMatchWhenDNEChange,
    obsidianProperties,
    ruleDeleteClick_handler,
    ruleDuplicateClick_handler,
    ruleTypeChange_handler,
    ruleConditionChange_handler,
    ruleOperatorChange_handler,
    ruleToggle_handler
  ];
}
var Property_filter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance31,
      create_fragment33,
      safe_not_equal,
      {
        index: 0,
        id: 1,
        type: 9,
        propertyName: 2,
        propertyType: 3,
        operator: 4,
        value: 10,
        valueData: 5,
        condition: 6,
        isEnabled: 7,
        matchWhenPropertyDNE: 8
      },
      null,
      [-1, -1]
    );
  }
};
var property_filter_default = Property_filter;

// src/svelte/custom-filter-app/components/content-filter.svelte
function create_if_block_112(ctx) {
  let input;
  let input_disabled_value;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "type", "text");
      input.disabled = input_disabled_value = !/*isDeviceRegistered*/
      ctx[7];
      attr(input, "placeholder", "value");
      input.value = /*value*/
      ctx[3];
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*handleValueChange*/
          ctx[8]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*isDeviceRegistered*/
      128 && input_disabled_value !== (input_disabled_value = !/*isDeviceRegistered*/
      ctx2[7])) {
        input.disabled = input_disabled_value;
      }
      if (dirty & /*value*/
      8 && input.value !== /*value*/
      ctx2[3]) {
        input.value = /*value*/
        ctx2[3];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_after_condition_slot2(ctx) {
  let if_block_anchor;
  let if_block = (
    /*condition*/
    ctx[5] !== "is-empty" /* IS_EMPTY */ && /*condition*/
    ctx[5] !== "is-not-empty" /* IS_NOT_EMPTY */ && create_if_block_112(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (
        /*condition*/
        ctx2[5] !== "is-empty" /* IS_EMPTY */ && /*condition*/
        ctx2[5] !== "is-not-empty" /* IS_NOT_EMPTY */
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_112(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_if_block14(ctx) {
  let div;
  let premiummessage;
  let t;
  let premiumlink;
  let current;
  premiummessage = new premium_message_default({});
  premiumlink = new premium_link_default({});
  return {
    c() {
      div = element("div");
      create_component(premiummessage.$$.fragment);
      t = space();
      create_component(premiumlink.$$.fragment);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(premiummessage, div, null);
      append(div, t);
      mount_component(premiumlink, div, null);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(premiummessage.$$.fragment, local);
      transition_in(premiumlink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(premiummessage.$$.fragment, local);
      transition_out(premiumlink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(premiummessage);
      destroy_component(premiumlink);
    }
  };
}
function create_after_toggle_slot(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*type*/
    ctx[2] === "content" /* CONTENT */ && !/*isDeviceRegistered*/
    ctx[7] && create_if_block14(ctx)
  );
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*type*/
        ctx2[2] === "content" /* CONTENT */ && !/*isDeviceRegistered*/
        ctx2[7]
      ) {
        if (if_block) {
          if (dirty & /*type, isDeviceRegistered*/
          132) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block14(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(if_block_anchor);
      }
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment34(ctx) {
  let filterrule;
  let current;
  filterrule = new filter_rule_default({
    props: {
      propertyType: null,
      index: (
        /*index*/
        ctx[0]
      ),
      id: (
        /*id*/
        ctx[1]
      ),
      type: (
        /*type*/
        ctx[2]
      ),
      operator: (
        /*operator*/
        ctx[4]
      ),
      condition: (
        /*condition*/
        ctx[5]
      ),
      isEnabled: (
        /*isEnabled*/
        ctx[6]
      ),
      $$slots: {
        "after-toggle": [create_after_toggle_slot],
        "after-condition": [create_after_condition_slot2]
      },
      $$scope: { ctx }
    }
  });
  filterrule.$on(
    "ruleDeleteClick",
    /*ruleDeleteClick_handler*/
    ctx[9]
  );
  filterrule.$on(
    "ruleDuplicateClick",
    /*ruleDuplicateClick_handler*/
    ctx[10]
  );
  filterrule.$on(
    "ruleTypeChange",
    /*ruleTypeChange_handler*/
    ctx[11]
  );
  filterrule.$on(
    "ruleConditionChange",
    /*ruleConditionChange_handler*/
    ctx[12]
  );
  filterrule.$on(
    "ruleOperatorChange",
    /*ruleOperatorChange_handler*/
    ctx[13]
  );
  filterrule.$on(
    "ruleToggle",
    /*ruleToggle_handler*/
    ctx[14]
  );
  return {
    c() {
      create_component(filterrule.$$.fragment);
    },
    m(target, anchor) {
      mount_component(filterrule, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const filterrule_changes = {};
      if (dirty & /*index*/
      1)
        filterrule_changes.index = /*index*/
        ctx2[0];
      if (dirty & /*id*/
      2)
        filterrule_changes.id = /*id*/
        ctx2[1];
      if (dirty & /*type*/
      4)
        filterrule_changes.type = /*type*/
        ctx2[2];
      if (dirty & /*operator*/
      16)
        filterrule_changes.operator = /*operator*/
        ctx2[4];
      if (dirty & /*condition*/
      32)
        filterrule_changes.condition = /*condition*/
        ctx2[5];
      if (dirty & /*isEnabled*/
      64)
        filterrule_changes.isEnabled = /*isEnabled*/
        ctx2[6];
      if (dirty & /*$$scope, type, isDeviceRegistered, value, condition*/
      65708) {
        filterrule_changes.$$scope = { dirty, ctx: ctx2 };
      }
      filterrule.$set(filterrule_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(filterrule.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filterrule.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(filterrule, detaching);
    }
  };
}
function instance32($$self, $$props, $$invalidate) {
  let { index } = $$props;
  let { id } = $$props;
  let { type } = $$props;
  let { value } = $$props;
  let { operator } = $$props;
  let { condition } = $$props;
  let { isEnabled } = $$props;
  const dispatch = createEventDispatcher();
  let isDeviceRegistered = false;
  License.getInstance().getIsDeviceRegisteredStore().subscribe((isRegistered) => {
    $$invalidate(7, isDeviceRegistered = isRegistered);
  });
  function handleValueChange(e) {
    const value2 = e.target.value;
    dispatch("ruleValueChange", { id, value: value2 });
  }
  function ruleDeleteClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDuplicateClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleTypeChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleConditionChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleOperatorChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleToggle_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("index" in $$props2)
      $$invalidate(0, index = $$props2.index);
    if ("id" in $$props2)
      $$invalidate(1, id = $$props2.id);
    if ("type" in $$props2)
      $$invalidate(2, type = $$props2.type);
    if ("value" in $$props2)
      $$invalidate(3, value = $$props2.value);
    if ("operator" in $$props2)
      $$invalidate(4, operator = $$props2.operator);
    if ("condition" in $$props2)
      $$invalidate(5, condition = $$props2.condition);
    if ("isEnabled" in $$props2)
      $$invalidate(6, isEnabled = $$props2.isEnabled);
  };
  return [
    index,
    id,
    type,
    value,
    operator,
    condition,
    isEnabled,
    isDeviceRegistered,
    handleValueChange,
    ruleDeleteClick_handler,
    ruleDuplicateClick_handler,
    ruleTypeChange_handler,
    ruleConditionChange_handler,
    ruleOperatorChange_handler,
    ruleToggle_handler
  ];
}
var Content_filter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance32, create_fragment34, safe_not_equal, {
      index: 0,
      id: 1,
      type: 2,
      value: 3,
      operator: 4,
      condition: 5,
      isEnabled: 6
    });
  }
};
var content_filter_default = Content_filter;

// src/svelte/custom-filter-app/components/folder-filter.svelte
var import_obsidian11 = require("obsidian");
function get_each_context9(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i];
  return child_ctx;
}
function create_each_block9(ctx) {
  let option;
  let t_value = (
    /*folder*/
    ctx[19] + ""
  );
  let t;
  let option_value_value;
  return {
    c() {
      option = element("option");
      t = text(t_value);
      option.__value = option_value_value = /*folder*/
      ctx[19];
      set_input_value(option, option.__value);
    },
    m(target, anchor) {
      insert(target, option, anchor);
      append(option, t);
    },
    p(ctx2, dirty) {
      if (dirty & /*folders*/
      256 && t_value !== (t_value = /*folder*/
      ctx2[19] + ""))
        set_data(t, t_value);
      if (dirty & /*folders*/
      256 && option_value_value !== (option_value_value = /*folder*/
      ctx2[19])) {
        option.__value = option_value_value;
        set_input_value(option, option.__value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(option);
      }
    }
  };
}
function create_after_condition_slot3(ctx) {
  let select;
  let option;
  let t1;
  let input;
  let mounted;
  let dispose;
  let each_value = ensure_array_like(
    /*folders*/
    ctx[8]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block9(get_each_context9(ctx, each_value, i));
  }
  return {
    c() {
      select = element("select");
      option = element("option");
      option.textContent = "select a folder";
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t1 = space();
      input = element("input");
      option.__value = "";
      set_input_value(option, option.__value);
      attr(input, "aria-label", "Include subfolders");
      attr(input, "type", "checkbox");
      input.checked = /*includeSubfolders*/
      ctx[4];
    },
    m(target, anchor) {
      insert(target, select, anchor);
      append(select, option);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(select, null);
        }
      }
      select_option(
        select,
        /*value*/
        ctx[3]
      );
      insert(target, t1, anchor);
      insert(target, input, anchor);
      if (!mounted) {
        dispose = [
          listen(
            select,
            "change",
            /*handleValueChange*/
            ctx[9]
          ),
          listen(
            input,
            "change",
            /*handleSubFoldersToggle*/
            ctx[10]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*folders*/
      256) {
        each_value = ensure_array_like(
          /*folders*/
          ctx2[8]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context9(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block9(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(select, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*value, folders*/
      264) {
        select_option(
          select,
          /*value*/
          ctx2[3]
        );
      }
      if (dirty & /*includeSubfolders*/
      16) {
        input.checked = /*includeSubfolders*/
        ctx2[4];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(select);
        detach(t1);
        detach(input);
      }
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment35(ctx) {
  let filterrule;
  let current;
  filterrule = new filter_rule_default({
    props: {
      propertyType: null,
      index: (
        /*index*/
        ctx[0]
      ),
      id: (
        /*id*/
        ctx[1]
      ),
      type: (
        /*type*/
        ctx[2]
      ),
      operator: (
        /*operator*/
        ctx[5]
      ),
      condition: (
        /*condition*/
        ctx[6]
      ),
      isEnabled: (
        /*isEnabled*/
        ctx[7]
      ),
      $$slots: {
        "after-condition": [create_after_condition_slot3]
      },
      $$scope: { ctx }
    }
  });
  filterrule.$on(
    "ruleDeleteClick",
    /*ruleDeleteClick_handler*/
    ctx[11]
  );
  filterrule.$on(
    "ruleDuplicateClick",
    /*ruleDuplicateClick_handler*/
    ctx[12]
  );
  filterrule.$on(
    "ruleTypeChange",
    /*ruleTypeChange_handler*/
    ctx[13]
  );
  filterrule.$on(
    "ruleConditionChange",
    /*ruleConditionChange_handler*/
    ctx[14]
  );
  filterrule.$on(
    "ruleOperatorChange",
    /*ruleOperatorChange_handler*/
    ctx[15]
  );
  filterrule.$on(
    "ruleToggle",
    /*ruleToggle_handler*/
    ctx[16]
  );
  return {
    c() {
      create_component(filterrule.$$.fragment);
    },
    m(target, anchor) {
      mount_component(filterrule, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const filterrule_changes = {};
      if (dirty & /*index*/
      1)
        filterrule_changes.index = /*index*/
        ctx2[0];
      if (dirty & /*id*/
      2)
        filterrule_changes.id = /*id*/
        ctx2[1];
      if (dirty & /*type*/
      4)
        filterrule_changes.type = /*type*/
        ctx2[2];
      if (dirty & /*operator*/
      32)
        filterrule_changes.operator = /*operator*/
        ctx2[5];
      if (dirty & /*condition*/
      64)
        filterrule_changes.condition = /*condition*/
        ctx2[6];
      if (dirty & /*isEnabled*/
      128)
        filterrule_changes.isEnabled = /*isEnabled*/
        ctx2[7];
      if (dirty & /*$$scope, includeSubfolders, value, folders*/
      4194584) {
        filterrule_changes.$$scope = { dirty, ctx: ctx2 };
      }
      filterrule.$set(filterrule_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(filterrule.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filterrule.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(filterrule, detaching);
    }
  };
}
function instance33($$self, $$props, $$invalidate) {
  let { index } = $$props;
  let { id } = $$props;
  let { type } = $$props;
  let { value } = $$props;
  let { includeSubfolders } = $$props;
  let { operator } = $$props;
  let { condition } = $$props;
  let { isEnabled } = $$props;
  let plugin2;
  let folders = [];
  const dispatch = createEventDispatcher();
  store_default.plugin.subscribe((p) => {
    plugin2 = p;
    const allFiles = plugin2.app.vault.getAllLoadedFiles();
    $$invalidate(8, folders = allFiles.filter((file) => file instanceof import_obsidian11.TFolder).map((folder) => folder.path));
  });
  onMount(() => {
    const handleFolderRename = (...data) => {
      if (data.length < 2)
        return;
      if (typeof data[0] === "string" && data[1] instanceof import_obsidian11.TFolder) {
        const oldPath = data[0];
        const updatedFolder = data[1];
        $$invalidate(8, folders = folders.map((folder) => {
          if (folder === oldPath) {
            return updatedFolder.path;
          }
          return folder;
        }));
        if (oldPath === value) {
          dispatch("ruleValueChange", { id, value: updatedFolder.path });
        }
      }
    };
    EventManager.getInstance().on("folder-rename" /* FOLDER_RENAME */, handleFolderRename);
    return () => {
      EventManager.getInstance().off("folder-rename" /* FOLDER_RENAME */, handleFolderRename);
    };
  });
  onMount(() => {
    const handleFolderCreate = (...data) => {
      if (data.length > 0 && typeof data[0] === "string") {
        const newFolder = data[0];
        $$invalidate(8, folders = [...folders, newFolder]);
      }
    };
    EventManager.getInstance().on("folder-create" /* FOLDER_CREATE */, handleFolderCreate);
    return () => {
      EventManager.getInstance().off("folder-create" /* FOLDER_CREATE */, handleFolderCreate);
    };
  });
  onMount(() => {
    const handleDeleteFolder = (...data) => {
      if (data.length > 0 && typeof data[0] === "string") {
        const path = data[0];
        $$invalidate(8, folders = folders.filter((folder) => folder !== path));
        dispatch("ruleValueChange", { id, value: "" });
      }
    };
    EventManager.getInstance().on("folder-delete" /* FOLDER_DELETE */, handleDeleteFolder);
    return () => {
      EventManager.getInstance().off("folder-delete" /* FOLDER_DELETE */, handleDeleteFolder);
    };
  });
  function handleValueChange(e) {
    const value2 = e.target.value;
    dispatch("ruleValueChange", { id, value: value2 });
  }
  function handleSubFoldersToggle(e) {
    const value2 = e.target.checked;
    dispatch("folderSubfoldersToggle", { id, includeSubfolders: value2 });
  }
  function ruleDeleteClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDuplicateClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleTypeChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleConditionChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleOperatorChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleToggle_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("index" in $$props2)
      $$invalidate(0, index = $$props2.index);
    if ("id" in $$props2)
      $$invalidate(1, id = $$props2.id);
    if ("type" in $$props2)
      $$invalidate(2, type = $$props2.type);
    if ("value" in $$props2)
      $$invalidate(3, value = $$props2.value);
    if ("includeSubfolders" in $$props2)
      $$invalidate(4, includeSubfolders = $$props2.includeSubfolders);
    if ("operator" in $$props2)
      $$invalidate(5, operator = $$props2.operator);
    if ("condition" in $$props2)
      $$invalidate(6, condition = $$props2.condition);
    if ("isEnabled" in $$props2)
      $$invalidate(7, isEnabled = $$props2.isEnabled);
  };
  return [
    index,
    id,
    type,
    value,
    includeSubfolders,
    operator,
    condition,
    isEnabled,
    folders,
    handleValueChange,
    handleSubFoldersToggle,
    ruleDeleteClick_handler,
    ruleDuplicateClick_handler,
    ruleTypeChange_handler,
    ruleConditionChange_handler,
    ruleOperatorChange_handler,
    ruleToggle_handler
  ];
}
var Folder_filter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance33, create_fragment35, safe_not_equal, {
      index: 0,
      id: 1,
      type: 2,
      value: 3,
      includeSubfolders: 4,
      operator: 5,
      condition: 6,
      isEnabled: 7
    });
  }
};
var folder_filter_default = Folder_filter;

// src/svelte/custom-filter-app/components/file-name-filter.svelte
function create_after_condition_slot4(ctx) {
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "slot", "after-condition");
      attr(input, "type", "text");
      attr(input, "placeholder", "value");
      input.value = /*value*/
      ctx[3];
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*handleValueChange*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*value*/
      8 && input.value !== /*value*/
      ctx2[3]) {
        input.value = /*value*/
        ctx2[3];
      }
    },
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment36(ctx) {
  let filterrule;
  let current;
  filterrule = new filter_rule_default({
    props: {
      propertyType: null,
      index: (
        /*index*/
        ctx[0]
      ),
      id: (
        /*id*/
        ctx[1]
      ),
      type: (
        /*type*/
        ctx[2]
      ),
      operator: (
        /*operator*/
        ctx[4]
      ),
      condition: (
        /*condition*/
        ctx[5]
      ),
      isEnabled: (
        /*isEnabled*/
        ctx[6]
      ),
      $$slots: {
        "after-condition": [create_after_condition_slot4]
      },
      $$scope: { ctx }
    }
  });
  filterrule.$on(
    "ruleDeleteClick",
    /*ruleDeleteClick_handler*/
    ctx[8]
  );
  filterrule.$on(
    "ruleDuplicateClick",
    /*ruleDuplicateClick_handler*/
    ctx[9]
  );
  filterrule.$on(
    "ruleTypeChange",
    /*ruleTypeChange_handler*/
    ctx[10]
  );
  filterrule.$on(
    "ruleConditionChange",
    /*ruleConditionChange_handler*/
    ctx[11]
  );
  filterrule.$on(
    "ruleOperatorChange",
    /*ruleOperatorChange_handler*/
    ctx[12]
  );
  filterrule.$on(
    "ruleToggle",
    /*ruleToggle_handler*/
    ctx[13]
  );
  return {
    c() {
      create_component(filterrule.$$.fragment);
    },
    m(target, anchor) {
      mount_component(filterrule, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const filterrule_changes = {};
      if (dirty & /*index*/
      1)
        filterrule_changes.index = /*index*/
        ctx2[0];
      if (dirty & /*id*/
      2)
        filterrule_changes.id = /*id*/
        ctx2[1];
      if (dirty & /*type*/
      4)
        filterrule_changes.type = /*type*/
        ctx2[2];
      if (dirty & /*operator*/
      16)
        filterrule_changes.operator = /*operator*/
        ctx2[4];
      if (dirty & /*condition*/
      32)
        filterrule_changes.condition = /*condition*/
        ctx2[5];
      if (dirty & /*isEnabled*/
      64)
        filterrule_changes.isEnabled = /*isEnabled*/
        ctx2[6];
      if (dirty & /*$$scope, value*/
      32776) {
        filterrule_changes.$$scope = { dirty, ctx: ctx2 };
      }
      filterrule.$set(filterrule_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(filterrule.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filterrule.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(filterrule, detaching);
    }
  };
}
function instance34($$self, $$props, $$invalidate) {
  let { index } = $$props;
  let { id } = $$props;
  let { type } = $$props;
  let { value } = $$props;
  let { operator } = $$props;
  let { condition } = $$props;
  let { isEnabled } = $$props;
  const dispatch = createEventDispatcher();
  function handleValueChange(e) {
    const value2 = e.target.value;
    dispatch("ruleValueChange", { id, value: value2 });
  }
  function ruleDeleteClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDuplicateClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleTypeChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleConditionChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleOperatorChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleToggle_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("index" in $$props2)
      $$invalidate(0, index = $$props2.index);
    if ("id" in $$props2)
      $$invalidate(1, id = $$props2.id);
    if ("type" in $$props2)
      $$invalidate(2, type = $$props2.type);
    if ("value" in $$props2)
      $$invalidate(3, value = $$props2.value);
    if ("operator" in $$props2)
      $$invalidate(4, operator = $$props2.operator);
    if ("condition" in $$props2)
      $$invalidate(5, condition = $$props2.condition);
    if ("isEnabled" in $$props2)
      $$invalidate(6, isEnabled = $$props2.isEnabled);
  };
  return [
    index,
    id,
    type,
    value,
    operator,
    condition,
    isEnabled,
    handleValueChange,
    ruleDeleteClick_handler,
    ruleDuplicateClick_handler,
    ruleTypeChange_handler,
    ruleConditionChange_handler,
    ruleOperatorChange_handler,
    ruleToggle_handler
  ];
}
var File_name_filter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance34, create_fragment36, safe_not_equal, {
      index: 0,
      id: 1,
      type: 2,
      value: 3,
      operator: 4,
      condition: 5,
      isEnabled: 6
    });
  }
};
var file_name_filter_default = File_name_filter;

// src/svelte/custom-filter-app/components/filter-rule-list.svelte
function get_each_context10(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[34] = list[i];
  child_ctx[36] = i;
  return child_ctx;
}
function create_if_block_33(ctx) {
  let propertyfilter;
  let current;
  const propertyfilter_spread_levels = [
    { index: (
      /*index*/
      ctx[36]
    ) },
    { id: (
      /*rule*/
      ctx[34].id
    ) },
    { type: (
      /*rule*/
      ctx[34].type
    ) },
    {
      propertyName: (
        /*rule*/
        ctx[34].propertyName
      )
    },
    { operator: (
      /*rule*/
      ctx[34].operator
    ) },
    { value: (
      /*rule*/
      ctx[34].value
    ) },
    /*rule*/
    ctx[34].propertyType === "date" /* DATE */ ? { valueData: (
      /*rule*/
      ctx[34].valueData
    ) } : { valueData: null },
    { condition: (
      /*rule*/
      ctx[34].condition
    ) },
    {
      matchWhenPropertyDNE: (
        /*rule*/
        ctx[34].matchWhenPropertyDNE
      )
    },
    {
      propertyType: (
        /*rule*/
        ctx[34].propertyType
      )
    },
    { isEnabled: (
      /*rule*/
      ctx[34].isEnabled
    ) }
  ];
  let propertyfilter_props = {};
  for (let i = 0; i < propertyfilter_spread_levels.length; i += 1) {
    propertyfilter_props = assign(propertyfilter_props, propertyfilter_spread_levels[i]);
  }
  propertyfilter = new property_filter_default({ props: propertyfilter_props });
  propertyfilter.$on(
    "ruleTypeChange",
    /*ruleTypeChange_handler*/
    ctx[1]
  );
  propertyfilter.$on(
    "ruleConditionChange",
    /*ruleConditionChange_handler*/
    ctx[2]
  );
  propertyfilter.$on(
    "ruleOperatorChange",
    /*ruleOperatorChange_handler*/
    ctx[3]
  );
  propertyfilter.$on(
    "ruleValueChange",
    /*ruleValueChange_handler*/
    ctx[4]
  );
  propertyfilter.$on(
    "ruleToggle",
    /*ruleToggle_handler*/
    ctx[5]
  );
  propertyfilter.$on(
    "ruleDeleteClick",
    /*ruleDeleteClick_handler*/
    ctx[6]
  );
  propertyfilter.$on(
    "ruleDuplicateClick",
    /*ruleDuplicateClick_handler*/
    ctx[7]
  );
  propertyfilter.$on(
    "propertyNameChange",
    /*propertyNameChange_handler*/
    ctx[8]
  );
  propertyfilter.$on(
    "propertyTypeChange",
    /*propertyTypeChange_handler*/
    ctx[9]
  );
  propertyfilter.$on(
    "propertyValueDataChange",
    /*propertyValueDataChange_handler*/
    ctx[10]
  );
  propertyfilter.$on(
    "propertyMatchWhenPropertyDNEChange",
    /*propertyMatchWhenPropertyDNEChange_handler*/
    ctx[11]
  );
  return {
    c() {
      create_component(propertyfilter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(propertyfilter, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const propertyfilter_changes = dirty[0] & /*rules*/
      1 ? get_spread_update(propertyfilter_spread_levels, [
        { index: (
          /*index*/
          ctx2[36]
        ) },
        { id: (
          /*rule*/
          ctx2[34].id
        ) },
        { type: (
          /*rule*/
          ctx2[34].type
        ) },
        {
          propertyName: (
            /*rule*/
            ctx2[34].propertyName
          )
        },
        { operator: (
          /*rule*/
          ctx2[34].operator
        ) },
        { value: (
          /*rule*/
          ctx2[34].value
        ) },
        get_spread_object(
          /*rule*/
          ctx2[34].propertyType === "date" /* DATE */ ? { valueData: (
            /*rule*/
            ctx2[34].valueData
          ) } : { valueData: null }
        ),
        { condition: (
          /*rule*/
          ctx2[34].condition
        ) },
        {
          matchWhenPropertyDNE: (
            /*rule*/
            ctx2[34].matchWhenPropertyDNE
          )
        },
        {
          propertyType: (
            /*rule*/
            ctx2[34].propertyType
          )
        },
        { isEnabled: (
          /*rule*/
          ctx2[34].isEnabled
        ) }
      ]) : {};
      propertyfilter.$set(propertyfilter_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(propertyfilter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(propertyfilter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(propertyfilter, detaching);
    }
  };
}
function create_if_block_24(ctx) {
  let filenamefilter;
  let current;
  filenamefilter = new file_name_filter_default({
    props: {
      index: (
        /*index*/
        ctx[36]
      ),
      id: (
        /*rule*/
        ctx[34].id
      ),
      type: (
        /*rule*/
        ctx[34].type
      ),
      operator: (
        /*rule*/
        ctx[34].operator
      ),
      value: (
        /*rule*/
        ctx[34].value
      ),
      condition: (
        /*rule*/
        ctx[34].condition
      ),
      isEnabled: (
        /*rule*/
        ctx[34].isEnabled
      )
    }
  });
  filenamefilter.$on(
    "ruleTypeChange",
    /*ruleTypeChange_handler_1*/
    ctx[12]
  );
  filenamefilter.$on(
    "ruleConditionChange",
    /*ruleConditionChange_handler_1*/
    ctx[13]
  );
  filenamefilter.$on(
    "ruleOperatorChange",
    /*ruleOperatorChange_handler_1*/
    ctx[14]
  );
  filenamefilter.$on(
    "ruleValueChange",
    /*ruleValueChange_handler_1*/
    ctx[15]
  );
  filenamefilter.$on(
    "ruleToggle",
    /*ruleToggle_handler_1*/
    ctx[16]
  );
  filenamefilter.$on(
    "ruleDuplicateClick",
    /*ruleDuplicateClick_handler_1*/
    ctx[17]
  );
  filenamefilter.$on(
    "ruleDeleteClick",
    /*ruleDeleteClick_handler_1*/
    ctx[18]
  );
  return {
    c() {
      create_component(filenamefilter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(filenamefilter, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const filenamefilter_changes = {};
      if (dirty[0] & /*rules*/
      1)
        filenamefilter_changes.index = /*index*/
        ctx2[36];
      if (dirty[0] & /*rules*/
      1)
        filenamefilter_changes.id = /*rule*/
        ctx2[34].id;
      if (dirty[0] & /*rules*/
      1)
        filenamefilter_changes.type = /*rule*/
        ctx2[34].type;
      if (dirty[0] & /*rules*/
      1)
        filenamefilter_changes.operator = /*rule*/
        ctx2[34].operator;
      if (dirty[0] & /*rules*/
      1)
        filenamefilter_changes.value = /*rule*/
        ctx2[34].value;
      if (dirty[0] & /*rules*/
      1)
        filenamefilter_changes.condition = /*rule*/
        ctx2[34].condition;
      if (dirty[0] & /*rules*/
      1)
        filenamefilter_changes.isEnabled = /*rule*/
        ctx2[34].isEnabled;
      filenamefilter.$set(filenamefilter_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(filenamefilter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filenamefilter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(filenamefilter, detaching);
    }
  };
}
function create_if_block_113(ctx) {
  let folderfilter;
  let current;
  folderfilter = new folder_filter_default({
    props: {
      index: (
        /*index*/
        ctx[36]
      ),
      id: (
        /*rule*/
        ctx[34].id
      ),
      type: (
        /*rule*/
        ctx[34].type
      ),
      operator: (
        /*rule*/
        ctx[34].operator
      ),
      includeSubfolders: (
        /*rule*/
        ctx[34].includeSubfolders
      ),
      value: (
        /*rule*/
        ctx[34].value
      ),
      condition: (
        /*rule*/
        ctx[34].condition
      ),
      isEnabled: (
        /*rule*/
        ctx[34].isEnabled
      )
    }
  });
  folderfilter.$on(
    "ruleTypeChange",
    /*ruleTypeChange_handler_2*/
    ctx[19]
  );
  folderfilter.$on(
    "ruleConditionChange",
    /*ruleConditionChange_handler_2*/
    ctx[20]
  );
  folderfilter.$on(
    "ruleOperatorChange",
    /*ruleOperatorChange_handler_2*/
    ctx[21]
  );
  folderfilter.$on(
    "ruleValueChange",
    /*ruleValueChange_handler_2*/
    ctx[22]
  );
  folderfilter.$on(
    "ruleToggle",
    /*ruleToggle_handler_2*/
    ctx[23]
  );
  folderfilter.$on(
    "ruleDuplicateClick",
    /*ruleDuplicateClick_handler_2*/
    ctx[24]
  );
  folderfilter.$on(
    "ruleDeleteClick",
    /*ruleDeleteClick_handler_2*/
    ctx[25]
  );
  folderfilter.$on(
    "folderSubfoldersToggle",
    /*folderSubfoldersToggle_handler*/
    ctx[26]
  );
  return {
    c() {
      create_component(folderfilter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(folderfilter, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const folderfilter_changes = {};
      if (dirty[0] & /*rules*/
      1)
        folderfilter_changes.index = /*index*/
        ctx2[36];
      if (dirty[0] & /*rules*/
      1)
        folderfilter_changes.id = /*rule*/
        ctx2[34].id;
      if (dirty[0] & /*rules*/
      1)
        folderfilter_changes.type = /*rule*/
        ctx2[34].type;
      if (dirty[0] & /*rules*/
      1)
        folderfilter_changes.operator = /*rule*/
        ctx2[34].operator;
      if (dirty[0] & /*rules*/
      1)
        folderfilter_changes.includeSubfolders = /*rule*/
        ctx2[34].includeSubfolders;
      if (dirty[0] & /*rules*/
      1)
        folderfilter_changes.value = /*rule*/
        ctx2[34].value;
      if (dirty[0] & /*rules*/
      1)
        folderfilter_changes.condition = /*rule*/
        ctx2[34].condition;
      if (dirty[0] & /*rules*/
      1)
        folderfilter_changes.isEnabled = /*rule*/
        ctx2[34].isEnabled;
      folderfilter.$set(folderfilter_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(folderfilter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(folderfilter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(folderfilter, detaching);
    }
  };
}
function create_if_block15(ctx) {
  let contentfilter;
  let current;
  contentfilter = new content_filter_default({
    props: {
      index: (
        /*index*/
        ctx[36]
      ),
      id: (
        /*rule*/
        ctx[34].id
      ),
      type: (
        /*rule*/
        ctx[34].type
      ),
      operator: (
        /*rule*/
        ctx[34].operator
      ),
      value: (
        /*rule*/
        ctx[34].value
      ),
      condition: (
        /*rule*/
        ctx[34].condition
      ),
      isEnabled: (
        /*rule*/
        ctx[34].isEnabled
      )
    }
  });
  contentfilter.$on(
    "ruleTypeChange",
    /*ruleTypeChange_handler_3*/
    ctx[27]
  );
  contentfilter.$on(
    "ruleConditionChange",
    /*ruleConditionChange_handler_3*/
    ctx[28]
  );
  contentfilter.$on(
    "ruleOperatorChange",
    /*ruleOperatorChange_handler_3*/
    ctx[29]
  );
  contentfilter.$on(
    "ruleValueChange",
    /*ruleValueChange_handler_3*/
    ctx[30]
  );
  contentfilter.$on(
    "ruleToggle",
    /*ruleToggle_handler_3*/
    ctx[31]
  );
  contentfilter.$on(
    "ruleDuplicateClick",
    /*ruleDuplicateClick_handler_3*/
    ctx[32]
  );
  contentfilter.$on(
    "ruleDeleteClick",
    /*ruleDeleteClick_handler_3*/
    ctx[33]
  );
  return {
    c() {
      create_component(contentfilter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(contentfilter, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const contentfilter_changes = {};
      if (dirty[0] & /*rules*/
      1)
        contentfilter_changes.index = /*index*/
        ctx2[36];
      if (dirty[0] & /*rules*/
      1)
        contentfilter_changes.id = /*rule*/
        ctx2[34].id;
      if (dirty[0] & /*rules*/
      1)
        contentfilter_changes.type = /*rule*/
        ctx2[34].type;
      if (dirty[0] & /*rules*/
      1)
        contentfilter_changes.operator = /*rule*/
        ctx2[34].operator;
      if (dirty[0] & /*rules*/
      1)
        contentfilter_changes.value = /*rule*/
        ctx2[34].value;
      if (dirty[0] & /*rules*/
      1)
        contentfilter_changes.condition = /*rule*/
        ctx2[34].condition;
      if (dirty[0] & /*rules*/
      1)
        contentfilter_changes.isEnabled = /*rule*/
        ctx2[34].isEnabled;
      contentfilter.$set(contentfilter_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(contentfilter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(contentfilter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(contentfilter, detaching);
    }
  };
}
function create_each_block10(key_1, ctx) {
  let first;
  let t0;
  let t1;
  let t2;
  let if_block3_anchor;
  let current;
  let if_block0 = (
    /*rule*/
    ctx[34].type === "property" /* PROPERTY */ && create_if_block_33(ctx)
  );
  let if_block1 = (
    /*rule*/
    ctx[34].type === "file-name" /* FILE_NAME */ && create_if_block_24(ctx)
  );
  let if_block2 = (
    /*rule*/
    ctx[34].type === "folder" /* FOLDER */ && create_if_block_113(ctx)
  );
  let if_block3 = (
    /*rule*/
    ctx[34].type === "content" /* CONTENT */ && create_if_block15(ctx)
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      if (if_block2)
        if_block2.c();
      t2 = space();
      if (if_block3)
        if_block3.c();
      if_block3_anchor = empty();
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t0, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t1, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t2, anchor);
      if (if_block3)
        if_block3.m(target, anchor);
      insert(target, if_block3_anchor, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*rule*/
        ctx[34].type === "property" /* PROPERTY */
      ) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
          if (dirty[0] & /*rules*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_33(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*rule*/
        ctx[34].type === "file-name" /* FILE_NAME */
      ) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
          if (dirty[0] & /*rules*/
          1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_24(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t1.parentNode, t1);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*rule*/
        ctx[34].type === "folder" /* FOLDER */
      ) {
        if (if_block2) {
          if_block2.p(ctx, dirty);
          if (dirty[0] & /*rules*/
          1) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_113(ctx);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(t2.parentNode, t2);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*rule*/
        ctx[34].type === "content" /* CONTENT */
      ) {
        if (if_block3) {
          if_block3.p(ctx, dirty);
          if (dirty[0] & /*rules*/
          1) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block15(ctx);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(if_block3);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(if_block3);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
        detach(t0);
        detach(t1);
        detach(t2);
        detach(if_block3_anchor);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
      if (if_block2)
        if_block2.d(detaching);
      if (if_block3)
        if_block3.d(detaching);
    }
  };
}
function create_default_slot7(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*rules*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*rule*/
    ctx2[34].id
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context10(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block10(key, child_ctx));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*rules*/
      1) {
        each_value = ensure_array_like(
          /*rules*/
          ctx2[0]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block10, each_1_anchor, get_each_context10);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d(detaching);
      }
    }
  };
}
function create_fragment37(ctx) {
  let stack;
  let current;
  stack = new stack_default({
    props: {
      direction: "column",
      spacing: "md",
      width: "100%",
      $$slots: { default: [create_default_slot7] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty[0] & /*rules*/
      1 | dirty[1] & /*$$scope*/
      64) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(stack, detaching);
    }
  };
}
function instance35($$self, $$props, $$invalidate) {
  let { rules = [] } = $$props;
  function ruleTypeChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleConditionChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleOperatorChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleValueChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleToggle_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDeleteClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDuplicateClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function propertyNameChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function propertyTypeChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function propertyValueDataChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function propertyMatchWhenPropertyDNEChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleTypeChange_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function ruleConditionChange_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function ruleOperatorChange_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function ruleValueChange_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function ruleToggle_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDuplicateClick_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDeleteClick_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function ruleTypeChange_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function ruleConditionChange_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function ruleOperatorChange_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function ruleValueChange_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function ruleToggle_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDuplicateClick_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDeleteClick_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function folderSubfoldersToggle_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleTypeChange_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function ruleConditionChange_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function ruleOperatorChange_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function ruleValueChange_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function ruleToggle_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDuplicateClick_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDeleteClick_handler_3(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("rules" in $$props2)
      $$invalidate(0, rules = $$props2.rules);
  };
  return [
    rules,
    ruleTypeChange_handler,
    ruleConditionChange_handler,
    ruleOperatorChange_handler,
    ruleValueChange_handler,
    ruleToggle_handler,
    ruleDeleteClick_handler,
    ruleDuplicateClick_handler,
    propertyNameChange_handler,
    propertyTypeChange_handler,
    propertyValueDataChange_handler,
    propertyMatchWhenPropertyDNEChange_handler,
    ruleTypeChange_handler_1,
    ruleConditionChange_handler_1,
    ruleOperatorChange_handler_1,
    ruleValueChange_handler_1,
    ruleToggle_handler_1,
    ruleDuplicateClick_handler_1,
    ruleDeleteClick_handler_1,
    ruleTypeChange_handler_2,
    ruleConditionChange_handler_2,
    ruleOperatorChange_handler_2,
    ruleValueChange_handler_2,
    ruleToggle_handler_2,
    ruleDuplicateClick_handler_2,
    ruleDeleteClick_handler_2,
    folderSubfoldersToggle_handler,
    ruleTypeChange_handler_3,
    ruleConditionChange_handler_3,
    ruleOperatorChange_handler_3,
    ruleValueChange_handler_3,
    ruleToggle_handler_3,
    ruleDuplicateClick_handler_3,
    ruleDeleteClick_handler_3
  ];
}
var Filter_rule_list = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance35, create_fragment37, safe_not_equal, { rules: 0 }, null, [-1, -1]);
  }
};
var filter_rule_list_default = Filter_rule_list;

// src/svelte/custom-filter-app/services/utils.ts
var createPropertyFilter = () => {
  return {
    id: generateRandomId(),
    type: "property" /* PROPERTY */,
    propertyType: "text" /* TEXT */,
    propertyName: "",
    operator: "and",
    isEnabled: true,
    condition: "is" /* IS */,
    value: "",
    matchWhenPropertyDNE: false
  };
};

// src/svelte/shared/components/spacer.svelte
function create_fragment38(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      set_style(
        div,
        "width",
        /*width*/
        ctx[0] + "px"
      );
      set_style(
        div,
        "height",
        /*height*/
        ctx[1] + "px"
      );
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*width*/
      1) {
        set_style(
          div,
          "width",
          /*width*/
          ctx2[0] + "px"
        );
      }
      if (dirty & /*height*/
      2) {
        set_style(
          div,
          "height",
          /*height*/
          ctx2[1] + "px"
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function instance36($$self, $$props, $$invalidate) {
  let { direction = "horizontal" } = $$props;
  let { size = "" } = $$props;
  let width = 0;
  let height = 0;
  function findDimesions() {
    switch (size) {
      case "xs":
        if (direction == "horizontal")
          $$invalidate(0, width = 4);
        if (direction == "vertical")
          $$invalidate(1, height = 4);
        break;
      case "sm":
        if (direction == "horizontal")
          $$invalidate(0, width = 8);
        if (direction == "vertical")
          $$invalidate(1, height = 8);
        break;
      case "md":
        if (direction == "horizontal")
          $$invalidate(0, width = 16);
        if (direction == "vertical")
          $$invalidate(1, height = 16);
        break;
      case "lg":
        if (direction == "horizontal")
          $$invalidate(0, width = 24);
        if (direction == "vertical")
          $$invalidate(1, height = 24);
        break;
      case "xl":
        if (direction == "horizontal")
          $$invalidate(0, width = 32);
        if (direction == "vertical")
          $$invalidate(1, height = 32);
        break;
      case "2xl":
        if (direction == "horizontal")
          $$invalidate(0, width = 48);
        if (direction == "vertical")
          $$invalidate(1, height = 48);
        break;
    }
  }
  $$self.$$set = ($$props2) => {
    if ("direction" in $$props2)
      $$invalidate(2, direction = $$props2.direction);
    if ("size" in $$props2)
      $$invalidate(3, size = $$props2.size);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*size, direction*/
    12) {
      $:
        size, direction, findDimesions();
    }
  };
  return [width, height, direction, size];
}
var Spacer = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance36, create_fragment38, safe_not_equal, { direction: 2, size: 3 });
  }
};
var spacer_default = Spacer;

// src/svelte/custom-filter-app/components/group-edit-view.svelte
function create_if_block16(ctx) {
  let filterrulelist;
  let t;
  let spacer;
  let current;
  filterrulelist = new filter_rule_list_default({
    props: { rules: (
      /*selectedGroup*/
      ctx[0].rules
    ) }
  });
  filterrulelist.$on(
    "ruleTypeChange",
    /*ruleTypeChange_handler*/
    ctx[3]
  );
  filterrulelist.$on(
    "ruleConditionChange",
    /*ruleConditionChange_handler*/
    ctx[4]
  );
  filterrulelist.$on(
    "ruleOperatorChange",
    /*ruleOperatorChange_handler*/
    ctx[5]
  );
  filterrulelist.$on(
    "ruleValueChange",
    /*ruleValueChange_handler*/
    ctx[6]
  );
  filterrulelist.$on(
    "ruleValueChange",
    /*ruleValueChange_handler_1*/
    ctx[7]
  );
  filterrulelist.$on(
    "ruleToggle",
    /*ruleToggle_handler*/
    ctx[8]
  );
  filterrulelist.$on(
    "ruleDeleteClick",
    /*ruleDeleteClick_handler*/
    ctx[9]
  );
  filterrulelist.$on(
    "ruleDuplicateClick",
    /*ruleDuplicateClick_handler*/
    ctx[10]
  );
  filterrulelist.$on(
    "propertyTypeChange",
    /*propertyTypeChange_handler*/
    ctx[11]
  );
  filterrulelist.$on(
    "propertyNameChange",
    /*propertyNameChange_handler*/
    ctx[12]
  );
  filterrulelist.$on(
    "propertyMatchWhenPropertyDNEChange",
    /*propertyMatchWhenPropertyDNEChange_handler*/
    ctx[13]
  );
  filterrulelist.$on(
    "propertyValueDataChange",
    /*propertyValueDataChange_handler*/
    ctx[14]
  );
  filterrulelist.$on(
    "folderSubfoldersToggle",
    /*folderSubfoldersToggle_handler*/
    ctx[15]
  );
  spacer = new spacer_default({
    props: { direction: "vertical", size: "sm" }
  });
  return {
    c() {
      create_component(filterrulelist.$$.fragment);
      t = space();
      create_component(spacer.$$.fragment);
    },
    m(target, anchor) {
      mount_component(filterrulelist, target, anchor);
      insert(target, t, anchor);
      mount_component(spacer, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const filterrulelist_changes = {};
      if (dirty & /*selectedGroup*/
      1)
        filterrulelist_changes.rules = /*selectedGroup*/
        ctx2[0].rules;
      filterrulelist.$set(filterrulelist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(filterrulelist.$$.fragment, local);
      transition_in(spacer.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filterrulelist.$$.fragment, local);
      transition_out(spacer.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
      destroy_component(filterrulelist, detaching);
      destroy_component(spacer, detaching);
    }
  };
}
function create_default_slot8(ctx) {
  let div0;
  let input;
  let input_value_value;
  let t0;
  let divider;
  let t1;
  let div1;
  let t2;
  let iconbutton;
  let current;
  let mounted;
  let dispose;
  divider = new divider_default({ props: { borderWidth: "1px" } });
  let if_block = (
    /*selectedGroup*/
    ctx[0].rules.length > 0 && create_if_block16(ctx)
  );
  iconbutton = new icon_button_default({
    props: {
      ariaLabel: "Add filter rule",
      iconId: "plus"
    }
  });
  iconbutton.$on(
    "click",
    /*handleFilterAddClick*/
    ctx[1]
  );
  return {
    c() {
      div0 = element("div");
      input = element("input");
      t0 = space();
      create_component(divider.$$.fragment);
      t1 = space();
      div1 = element("div");
      if (if_block)
        if_block.c();
      t2 = space();
      create_component(iconbutton.$$.fragment);
      attr(input, "type", "text");
      input.value = input_value_value = /*selectedGroup*/
      ctx[0].name;
      attr(div0, "class", "vault-explorer-group-edit-view__header svelte-10vmkqn");
      attr(div1, "class", "vault-explorer-group-edit-view__body svelte-10vmkqn");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      append(div0, input);
      insert(target, t0, anchor);
      mount_component(divider, target, anchor);
      insert(target, t1, anchor);
      insert(target, div1, anchor);
      if (if_block)
        if_block.m(div1, null);
      append(div1, t2);
      mount_component(iconbutton, div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(
          input,
          "change",
          /*handleGroupNameChange*/
          ctx[2]
        );
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*selectedGroup*/
      1 && input_value_value !== (input_value_value = /*selectedGroup*/
      ctx2[0].name) && input.value !== input_value_value) {
        input.value = input_value_value;
      }
      if (
        /*selectedGroup*/
        ctx2[0].rules.length > 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*selectedGroup*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block16(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div1, t2);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(divider.$$.fragment, local);
      transition_in(if_block);
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(divider.$$.fragment, local);
      transition_out(if_block);
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t0);
        detach(t1);
        detach(div1);
      }
      destroy_component(divider, detaching);
      if (if_block)
        if_block.d();
      destroy_component(iconbutton);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment39(ctx) {
  let stack;
  let current;
  stack = new stack_default({
    props: {
      width: "100%",
      direction: "column",
      align: "flex-start",
      spacing: "sm",
      $$slots: { default: [create_default_slot8] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      const stack_changes = {};
      if (dirty & /*$$scope, selectedGroup*/
      131073) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(stack, detaching);
    }
  };
}
function instance37($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { selectedGroup } = $$props;
  function handleFilterAddClick() {
    const newFilter = createPropertyFilter();
    dispatch("ruleAddClick", { filter: newFilter });
  }
  function handleGroupNameChange(e) {
    const name = e.target.value;
    dispatch("groupNameChange", { name });
  }
  function ruleTypeChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleConditionChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleOperatorChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleValueChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleValueChange_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function ruleToggle_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDeleteClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function ruleDuplicateClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function propertyTypeChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function propertyNameChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function propertyMatchWhenPropertyDNEChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function propertyValueDataChange_handler(event) {
    bubble.call(this, $$self, event);
  }
  function folderSubfoldersToggle_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("selectedGroup" in $$props2)
      $$invalidate(0, selectedGroup = $$props2.selectedGroup);
  };
  return [
    selectedGroup,
    handleFilterAddClick,
    handleGroupNameChange,
    ruleTypeChange_handler,
    ruleConditionChange_handler,
    ruleOperatorChange_handler,
    ruleValueChange_handler,
    ruleValueChange_handler_1,
    ruleToggle_handler,
    ruleDeleteClick_handler,
    ruleDuplicateClick_handler,
    propertyTypeChange_handler,
    propertyNameChange_handler,
    propertyMatchWhenPropertyDNEChange_handler,
    propertyValueDataChange_handler,
    folderSubfoldersToggle_handler
  ];
}
var Group_edit_view = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance37, create_fragment39, safe_not_equal, { selectedGroup: 0 });
  }
};
var group_edit_view_default = Group_edit_view;

// src/svelte/custom-filter-app/components/group-list-item.svelte
function create_fragment40(ctx) {
  let div;
  let t;
  let div_class_value;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      t = text(
        /*name*/
        ctx[0]
      );
      attr(div, "tabindex", "0");
      attr(div, "draggable", "true");
      attr(div, "role", "button");
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[1]
      ) + " svelte-lhyt46");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t);
      if (!mounted) {
        dispose = [
          listen(
            div,
            "dragstart",
            /*handleDragStart*/
            ctx[3]
          ),
          listen(
            div,
            "dragover",
            /*handleDragOver*/
            ctx[4]
          ),
          listen(
            div,
            "drop",
            /*handleDrop*/
            ctx[5]
          ),
          listen(
            div,
            "click",
            /*handleClick*/
            ctx[2]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[8]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*name*/
      1)
        set_data(
          t,
          /*name*/
          ctx2[0]
        );
      if (dirty & /*className*/
      2 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[1]
      ) + " svelte-lhyt46")) {
        attr(div, "class", div_class_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance38($$self, $$props, $$invalidate) {
  let className;
  let { id } = $$props;
  let { name } = $$props;
  let { isSelected } = $$props;
  const dispatch = createEventDispatcher();
  function handleClick() {
    dispatch("itemClick", { id });
  }
  function handleDragStart(event) {
    dispatch("itemDragStart", { nativeEvent: event, id });
  }
  function handleDragOver(event) {
    dispatch("itemDragOver", { nativeEvent: event, id });
  }
  function handleDrop(event) {
    dispatch("itemDrop", { nativeEvent: event, id });
  }
  const keydown_handler = (e) => (e.key === "Enter" || e.key === " ") && handleClick();
  $$self.$$set = ($$props2) => {
    if ("id" in $$props2)
      $$invalidate(6, id = $$props2.id);
    if ("name" in $$props2)
      $$invalidate(0, name = $$props2.name);
    if ("isSelected" in $$props2)
      $$invalidate(7, isSelected = $$props2.isSelected);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*isSelected*/
    128) {
      $:
        $$invalidate(1, className = "vault-explorer-group-item" + (isSelected ? " vault-explorer-group-item--active" : ""));
    }
  };
  return [
    name,
    className,
    handleClick,
    handleDragStart,
    handleDragOver,
    handleDrop,
    id,
    isSelected,
    keydown_handler
  ];
}
var Group_list_item = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance38, create_fragment40, safe_not_equal, { id: 6, name: 0, isSelected: 7 });
  }
};
var group_list_item_default = Group_list_item;

// src/svelte/custom-filter-app/components/group-list.svelte
function get_each_context11(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[15] = list[i];
  return child_ctx;
}
function create_default_slot_25(ctx) {
  let iconbutton0;
  let t;
  let iconbutton1;
  let current;
  iconbutton0 = new icon_button_default({
    props: {
      ariaLabel: "Add filter group",
      iconId: "plus"
    }
  });
  iconbutton0.$on(
    "click",
    /*click_handler*/
    ctx[6]
  );
  iconbutton1 = new icon_button_default({
    props: {
      ariaLabel: "Delete filter group",
      iconId: "trash"
    }
  });
  iconbutton1.$on(
    "click",
    /*click_handler_1*/
    ctx[7]
  );
  return {
    c() {
      create_component(iconbutton0.$$.fragment);
      t = space();
      create_component(iconbutton1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbutton0, target, anchor);
      insert(target, t, anchor);
      mount_component(iconbutton1, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(iconbutton0.$$.fragment, local);
      transition_in(iconbutton1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton0.$$.fragment, local);
      transition_out(iconbutton1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
      destroy_component(iconbutton0, detaching);
      destroy_component(iconbutton1, detaching);
    }
  };
}
function create_each_block11(key_1, ctx) {
  var _a;
  let first;
  let grouplistitem;
  let current;
  grouplistitem = new group_list_item_default({
    props: {
      id: (
        /*group*/
        ctx[15].id
      ),
      name: (
        /*group*/
        ctx[15].name
      ),
      isSelected: (
        /*selectedGroup*/
        ((_a = ctx[1]) == null ? void 0 : _a.id) === /*group*/
        ctx[15].id
      )
    }
  });
  grouplistitem.$on(
    "itemClick",
    /*itemClick_handler*/
    ctx[8]
  );
  grouplistitem.$on(
    "itemDragStart",
    /*itemDragStart_handler*/
    ctx[9]
  );
  grouplistitem.$on(
    "itemDragOver",
    /*itemDragOver_handler*/
    ctx[10]
  );
  grouplistitem.$on(
    "itemDrop",
    /*itemDrop_handler*/
    ctx[11]
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(grouplistitem.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(grouplistitem, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      var _a2;
      ctx = new_ctx;
      const grouplistitem_changes = {};
      if (dirty & /*groups*/
      1)
        grouplistitem_changes.id = /*group*/
        ctx[15].id;
      if (dirty & /*groups*/
      1)
        grouplistitem_changes.name = /*group*/
        ctx[15].name;
      if (dirty & /*selectedGroup, groups*/
      3)
        grouplistitem_changes.isSelected = /*selectedGroup*/
        ((_a2 = ctx[1]) == null ? void 0 : _a2.id) === /*group*/
        ctx[15].id;
      grouplistitem.$set(grouplistitem_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(grouplistitem.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(grouplistitem.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      destroy_component(grouplistitem, detaching);
    }
  };
}
function create_default_slot_16(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*groups*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*group*/
    ctx2[15].id
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context11(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block11(key, child_ctx));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*groups, selectedGroup*/
      3) {
        each_value = ensure_array_like(
          /*groups*/
          ctx2[0]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block11, each_1_anchor, get_each_context11);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d(detaching);
      }
    }
  };
}
function create_default_slot9(ctx) {
  let stack;
  let t;
  let div;
  let flex;
  let current;
  stack = new stack_default({
    props: {
      spacing: "sm",
      $$slots: { default: [create_default_slot_25] },
      $$scope: { ctx }
    }
  });
  flex = new flex_default({
    props: {
      direction: "column",
      width: "100px",
      $$slots: { default: [create_default_slot_16] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
      t = space();
      div = element("div");
      create_component(flex.$$.fragment);
      attr(div, "class", "vault-explorer-group-list svelte-puy5zn");
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      insert(target, t, anchor);
      insert(target, div, anchor);
      mount_component(flex, div, null);
      ctx[12](div);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty & /*$$scope*/
      262144) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
      const flex_changes = {};
      if (dirty & /*$$scope, groups, selectedGroup*/
      262147) {
        flex_changes.$$scope = { dirty, ctx: ctx2 };
      }
      flex.$set(flex_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      transition_in(flex.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      transition_out(flex.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(div);
      }
      destroy_component(stack, detaching);
      destroy_component(flex);
      ctx[12](null);
    }
  };
}
function create_fragment41(ctx) {
  let div;
  let stack;
  let current;
  stack = new stack_default({
    props: {
      direction: "column",
      spacing: "sm",
      $$slots: { default: [create_default_slot9] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(stack.$$.fragment);
      attr(div, "class", "vault-explorer-group-list-container svelte-puy5zn");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(stack, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const stack_changes = {};
      if (dirty & /*$$scope, listContainerRef, groups, selectedGroup*/
      262151) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(stack);
    }
  };
}
function instance39($$self, $$props, $$invalidate) {
  let { groups } = $$props;
  let { selectedGroup } = $$props;
  let listContainerRef;
  let previousLength = 0;
  function scrollToBottom() {
    return __awaiter(this, void 0, void 0, function* () {
      yield tick();
      if (listContainerRef) {
        $$invalidate(2, listContainerRef.scrollTop = listContainerRef.scrollHeight, listContainerRef);
      }
    });
  }
  const dispatch = createEventDispatcher();
  function handleGroupAddClick() {
    dispatch("groupAddClick");
  }
  function handleGroupDeleteClick() {
    dispatch("groupDeleteClick");
  }
  const click_handler = () => handleGroupAddClick();
  const click_handler_1 = () => handleGroupDeleteClick();
  function itemClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function itemDragStart_handler(event) {
    bubble.call(this, $$self, event);
  }
  function itemDragOver_handler(event) {
    bubble.call(this, $$self, event);
  }
  function itemDrop_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      listContainerRef = $$value;
      $$invalidate(2, listContainerRef);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("groups" in $$props2)
      $$invalidate(0, groups = $$props2.groups);
    if ("selectedGroup" in $$props2)
      $$invalidate(1, selectedGroup = $$props2.selectedGroup);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*groups, previousLength, listContainerRef*/
    37) {
      $:
        if (groups.length > previousLength) {
          $$invalidate(5, previousLength = groups.length);
          if (listContainerRef) {
            scrollToBottom();
          }
        }
    }
  };
  return [
    groups,
    selectedGroup,
    listContainerRef,
    handleGroupAddClick,
    handleGroupDeleteClick,
    previousLength,
    click_handler,
    click_handler_1,
    itemClick_handler,
    itemDragStart_handler,
    itemDragOver_handler,
    itemDrop_handler,
    div_binding
  ];
}
var Group_list = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance39, create_fragment41, safe_not_equal, { groups: 0, selectedGroup: 1 });
  }
};
var group_list_default = Group_list;

// src/svelte/custom-filter-app/index.svelte
var import_js_logger9 = __toESM(require_logger());
function create_if_block17(ctx) {
  let groupeditview;
  let current;
  groupeditview = new group_edit_view_default({
    props: { selectedGroup: (
      /*selectedGroup*/
      ctx[1]
    ) }
  });
  groupeditview.$on(
    "ruleTypeChange",
    /*handleRuleTypeChange*/
    ctx[14]
  );
  groupeditview.$on(
    "ruleAddClick",
    /*handleRuleAddClick*/
    ctx[5]
  );
  groupeditview.$on(
    "ruleConditionChange",
    /*handleRuleConditionChange*/
    ctx[7]
  );
  groupeditview.$on(
    "ruleDeleteClick",
    /*handleRuleDeleteClick*/
    ctx[9]
  );
  groupeditview.$on(
    "ruleDuplicateClick",
    /*handleRuleDuplicateClick*/
    ctx[10]
  );
  groupeditview.$on(
    "ruleValueChange",
    /*handleRuleValueChange*/
    ctx[16]
  );
  groupeditview.$on(
    "ruleOperatorChange",
    /*handleRuleOperatorChange*/
    ctx[13]
  );
  groupeditview.$on(
    "ruleToggle",
    /*handleRuleToggle*/
    ctx[12]
  );
  groupeditview.$on(
    "groupNameChange",
    /*handleGroupNameChange*/
    ctx[6]
  );
  groupeditview.$on(
    "propertyTypeChange",
    /*handlePropertyTypeChange*/
    ctx[15]
  );
  groupeditview.$on(
    "propertyNameChange",
    /*handlePropertyNameChange*/
    ctx[11]
  );
  groupeditview.$on(
    "propertyValueDataChange",
    /*handlePropertyValueDataChange*/
    ctx[17]
  );
  groupeditview.$on(
    "propertyMatchWhenPropertyDNEChange",
    /*handlePropertyMatchWhenPropertyDNEChange*/
    ctx[19]
  );
  groupeditview.$on(
    "folderSubfoldersToggle",
    /*handleFolderSubfoldersToggle*/
    ctx[18]
  );
  return {
    c() {
      create_component(groupeditview.$$.fragment);
    },
    m(target, anchor) {
      mount_component(groupeditview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const groupeditview_changes = {};
      if (dirty & /*selectedGroup*/
      2)
        groupeditview_changes.selectedGroup = /*selectedGroup*/
        ctx2[1];
      groupeditview.$set(groupeditview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(groupeditview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(groupeditview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(groupeditview, detaching);
    }
  };
}
function create_default_slot10(ctx) {
  let grouplist;
  let t0;
  let divider;
  let t1;
  let if_block_anchor;
  let current;
  grouplist = new group_list_default({
    props: {
      groups: (
        /*groups*/
        ctx[0]
      ),
      selectedGroup: (
        /*selectedGroup*/
        ctx[1]
      )
    }
  });
  grouplist.$on(
    "itemClick",
    /*handleGroupClick*/
    ctx[2]
  );
  grouplist.$on("itemDragStart", handleGroupDragStart);
  grouplist.$on("itemDragOver", handleGroupDragOver);
  grouplist.$on(
    "itemDrop",
    /*handleGroupDrop*/
    ctx[8]
  );
  grouplist.$on(
    "groupAddClick",
    /*handleGroupAddClick*/
    ctx[3]
  );
  grouplist.$on(
    "groupDeleteClick",
    /*handleGroupDeleteClick*/
    ctx[4]
  );
  divider = new divider_default({ props: { direction: "vertical" } });
  let if_block = (
    /*selectedGroup*/
    ctx[1] !== void 0 && create_if_block17(ctx)
  );
  return {
    c() {
      create_component(grouplist.$$.fragment);
      t0 = space();
      create_component(divider.$$.fragment);
      t1 = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(grouplist, target, anchor);
      insert(target, t0, anchor);
      mount_component(divider, target, anchor);
      insert(target, t1, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const grouplist_changes = {};
      if (dirty & /*groups*/
      1)
        grouplist_changes.groups = /*groups*/
        ctx2[0];
      if (dirty & /*selectedGroup*/
      2)
        grouplist_changes.selectedGroup = /*selectedGroup*/
        ctx2[1];
      grouplist.$set(grouplist_changes);
      if (
        /*selectedGroup*/
        ctx2[1] !== void 0
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*selectedGroup*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block17(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(grouplist.$$.fragment, local);
      transition_in(divider.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(grouplist.$$.fragment, local);
      transition_out(divider.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(if_block_anchor);
      }
      destroy_component(grouplist, detaching);
      destroy_component(divider, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_fragment42(ctx) {
  let div;
  let flex;
  let current;
  flex = new flex_default({
    props: {
      align: "stretch",
      height: "100%",
      $$slots: { default: [create_default_slot10] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      div = element("div");
      create_component(flex.$$.fragment);
      attr(div, "class", "vault-explorer-property-filter-app svelte-e2cbw8");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(flex, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      const flex_changes = {};
      if (dirty & /*$$scope, selectedGroup, groups*/
      8388611) {
        flex_changes.$$scope = { dirty, ctx: ctx2 };
      }
      flex.$set(flex_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(flex.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(flex.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      destroy_component(flex);
    }
  };
}
function handleGroupDragStart(e) {
  const { nativeEvent, id } = e.detail;
  nativeEvent.dataTransfer.setData("text", id);
  nativeEvent.dataTransfer.effectAllowed = "move";
}
function handleGroupDragOver(e) {
  const { nativeEvent } = e.detail;
  nativeEvent.preventDefault();
}
function instance40($$self, $$props, $$invalidate) {
  let selectedGroup;
  let selectedGroupId = "";
  let groups = [];
  let plugin2;
  function saveSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      plugin2.settings.filters.custom.groups = groups;
      plugin2.settings.filters.custom.selectedGroupId = selectedGroupId;
      yield plugin2.saveSettings();
    });
  }
  store_default.plugin.subscribe((p) => {
    plugin2 = p;
    $$invalidate(0, groups = plugin2.settings.filters.custom.groups);
    $$invalidate(20, selectedGroupId = plugin2.settings.filters.custom.selectedGroupId);
  });
  onMount(() => {
    return () => {
      EventManager.getInstance().emit("properties-filter-update" /* PROPERTIES_FILTER_UPDATE */);
    };
  });
  function handleGroupClick(e) {
    const { id } = e.detail;
    $$invalidate(20, selectedGroupId = id);
  }
  function handleGroupAddClick() {
    const newGroup = {
      id: generateRandomId(),
      name: `Group ${groups.length + 1}`,
      rules: [createPropertyFilter()],
      isEnabled: false,
      isSticky: false
    };
    $$invalidate(20, selectedGroupId = newGroup.id);
    $$invalidate(0, groups = [...groups, newGroup]);
  }
  function handleGroupDeleteClick() {
    const index = groups.findIndex((group) => group.id === selectedGroupId);
    const newGroups = groups.filter((group) => group.id !== selectedGroupId);
    let newIndex = index - 1;
    if (newIndex < 0) {
      newIndex = 0;
    }
    $$invalidate(0, groups = newGroups);
    if (newGroups.length === 0) {
      $$invalidate(20, selectedGroupId = "");
    } else {
      $$invalidate(20, selectedGroupId = newGroups[newIndex].id);
    }
  }
  function handleRuleAddClick(e) {
    const { filter } = e.detail;
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), { rules: [...group.rules, filter] }) : group);
    $$invalidate(0, groups = newGroups);
  }
  function handleGroupNameChange(e) {
    const { name } = e.detail;
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), { name }) : group);
    $$invalidate(0, groups = newGroups);
  }
  function handleRuleConditionChange(e) {
    const { id, condition } = e.detail;
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), {
      rules: group.rules.map((rule) => rule.id === id ? Object.assign(Object.assign({}, rule), { condition }) : rule)
    }) : group);
    $$invalidate(0, groups = newGroups);
  }
  function handleGroupDrop(e) {
    const { id, nativeEvent } = e.detail;
    const dragId = nativeEvent.dataTransfer.getData("text");
    nativeEvent.dataTransfer.dropEffect = "move";
    const draggedIndex = groups.findIndex((group) => group.id === dragId);
    const dragged = groups.find((group) => group.id === dragId);
    const droppedIndex = groups.findIndex((group) => group.id === id);
    if (!dragged || draggedIndex === -1 || droppedIndex === -1)
      return;
    let newGroups = [...groups];
    newGroups.splice(draggedIndex, 1);
    newGroups.splice(droppedIndex, 0, dragged);
    $$invalidate(0, groups = newGroups);
  }
  function handleRuleDeleteClick(e) {
    const { id } = e.detail;
    import_js_logger9.default.trace({
      fileName: "custom-filter-app/index.svelte",
      functionName: "handleRuleDeleteClick",
      message: "called"
    });
    import_js_logger9.default.debug(
      {
        fileName: "custom-filter-app/index.svelte",
        functionName: "handleRuleDeleteClick",
        message: "deleting rule"
      },
      { id }
    );
    const newGroups = groups.map((group) => {
      if (group.id === selectedGroupId) {
        const newRules = group.rules.filter((rule) => rule.id !== id);
        return Object.assign(Object.assign({}, group), { rules: newRules });
      }
      return group;
    });
    $$invalidate(0, groups = newGroups);
  }
  function handleRuleDuplicateClick(e) {
    const { id } = e.detail;
    import_js_logger9.default.trace({
      fileName: "custom-filter-app/index.svelte",
      functionName: "handleRuleDuplicateClick",
      message: "called"
    });
    import_js_logger9.default.debug(
      {
        fileName: "custom-filter-app/index.svelte",
        functionName: "handleRuleDuplicateClick",
        message: "duplicating rule"
      },
      { id }
    );
    const newGroups = groups.map((group) => {
      if (group.id === selectedGroupId) {
        const rule = group.rules.find((rule2) => rule2.id === id);
        if (!rule) {
          throw new Error(`Rule with id ${id} not found`);
        }
        const newRules = [
          ...group.rules,
          Object.assign(Object.assign({}, rule), { id: generateRandomId() })
        ];
        return Object.assign(Object.assign({}, group), { rules: newRules });
      }
      return group;
    });
    $$invalidate(0, groups = newGroups);
  }
  function handlePropertyNameChange(e) {
    const { id, name } = e.detail;
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), {
      rules: group.rules.map((rule) => rule.id === id ? Object.assign(Object.assign({}, rule), { propertyName: name }) : rule)
    }) : group);
    $$invalidate(0, groups = newGroups);
  }
  function handleRuleToggle(e) {
    const { id } = e.detail;
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), {
      rules: group.rules.map((rule) => rule.id === id ? Object.assign(Object.assign({}, rule), { isEnabled: !rule.isEnabled }) : rule)
    }) : group);
    $$invalidate(0, groups = newGroups);
  }
  function handleRuleOperatorChange(e) {
    const { id, operator } = e.detail;
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), {
      rules: group.rules.map((rule) => rule.id === id ? Object.assign(Object.assign({}, rule), { operator }) : rule)
    }) : group);
    $$invalidate(0, groups = newGroups);
  }
  function handleRuleTypeChange(e) {
    const { id, type } = e.detail;
    let newCondition;
    if (type === "property" /* PROPERTY */) {
      newCondition = "is" /* IS */;
    } else if (type === "content" /* CONTENT */) {
      newCondition = "contains" /* CONTAINS */;
    } else if (type === "folder" /* FOLDER */) {
      newCondition = "is" /* IS */;
    } else if (type === "file-name" /* FILE_NAME */) {
      newCondition = "contains" /* CONTAINS */;
    } else {
      throw new Error(`Unhandled filter type: ${type}`);
    }
    const newGroups = groups.map((group) => {
      if (group.id === selectedGroupId) {
        const newRules = group.rules.map((rule) => {
          if (rule.id === id) {
            return Object.assign(Object.assign({}, rule), { type, condition: newCondition, value: "" });
          }
          return rule;
        });
        return Object.assign(Object.assign({}, group), { rules: newRules });
      }
      return group;
    });
    $$invalidate(0, groups = newGroups);
  }
  function handlePropertyTypeChange(e) {
    const { id, propertyType } = e.detail;
    let newCondition;
    let newValue = "";
    if (propertyType === "text") {
      newCondition = "is" /* IS */;
    } else if (propertyType === "number") {
      newCondition = "is-equal" /* IS_EQUAL */;
    } else if (propertyType === "checkbox") {
      newCondition = "is" /* IS */;
      newValue = "true";
    } else if (propertyType === "list") {
      newCondition = "contains" /* CONTAINS */;
    } else if (propertyType === "date" || propertyType === "datetime") {
      newValue = "today" /* TODAY */;
      newCondition = "is" /* IS */;
    } else {
      throw new Error(`Unhandled filter type: ${propertyType}`);
    }
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), {
      rules: group.rules.map((rule) => rule.id === id ? Object.assign(
        Object.assign(Object.assign({}, rule), {
          propertyType,
          propertyName: "",
          condition: newCondition,
          value: newValue
        }),
        propertyType === "date" /* DATE */ || propertyType === "datetime" /* DATETIME */ ? { valueData: "" } : {}
      ) : rule)
    }) : group);
    $$invalidate(0, groups = newGroups);
  }
  function handleRuleValueChange(e) {
    const { id, value } = e.detail;
    const newGroups = groups.map((group) => {
      const { rules } = group;
      if (group.id === selectedGroupId) {
        const newRules = rules.map((rule) => {
          if (rule.id === id) {
            return Object.assign(Object.assign(Object.assign({}, rule), { value }), rule.type === "property" /* PROPERTY */ && (rule.propertyType === "date" /* DATE */ || rule.propertyType) === "datetime" /* DATETIME */ ? { valueData: "" } : {});
          }
          return rule;
        });
        return Object.assign(Object.assign({}, group), { rules: newRules });
      }
      return group;
    });
    $$invalidate(0, groups = newGroups);
  }
  function handlePropertyValueDataChange(e) {
    const { id, value } = e.detail;
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), {
      rules: group.rules.map((rule) => rule.id === id ? Object.assign(Object.assign({}, rule), { valueData: value }) : rule)
    }) : group);
    $$invalidate(0, groups = newGroups);
  }
  function handleFolderSubfoldersToggle(e) {
    const { id, includeSubfolders } = e.detail;
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), {
      rules: group.rules.map((rule) => rule.id === id && rule.type === "folder" /* FOLDER */ ? Object.assign(Object.assign({}, rule), { includeSubfolders }) : rule)
    }) : group);
    $$invalidate(0, groups = newGroups);
  }
  function handlePropertyMatchWhenPropertyDNEChange(e) {
    const { id, matchWhenDNE } = e.detail;
    const newGroups = groups.map((group) => group.id === selectedGroupId ? Object.assign(Object.assign({}, group), {
      rules: group.rules.map((rule) => rule.id === id ? Object.assign(Object.assign({}, rule), { matchWhenPropertyDNE: matchWhenDNE }) : rule)
    }) : group);
    $$invalidate(0, groups = newGroups);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*groups, selectedGroupId*/
    1048577) {
      $:
        $$invalidate(1, selectedGroup = groups.find((group) => group.id === selectedGroupId));
    }
    if ($$self.$$.dirty & /*groups, selectedGroupId*/
    1048577) {
      $:
        groups, selectedGroupId, saveSettings();
    }
  };
  return [
    groups,
    selectedGroup,
    handleGroupClick,
    handleGroupAddClick,
    handleGroupDeleteClick,
    handleRuleAddClick,
    handleGroupNameChange,
    handleRuleConditionChange,
    handleGroupDrop,
    handleRuleDeleteClick,
    handleRuleDuplicateClick,
    handlePropertyNameChange,
    handleRuleToggle,
    handleRuleOperatorChange,
    handleRuleTypeChange,
    handlePropertyTypeChange,
    handleRuleValueChange,
    handlePropertyValueDataChange,
    handleFolderSubfoldersToggle,
    handlePropertyMatchWhenPropertyDNEChange,
    selectedGroupId
  ];
}
var Custom_filter_app = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance40, create_fragment42, safe_not_equal, {});
  }
};
var custom_filter_app_default = Custom_filter_app;

// src/obsidian/custom-filter-modal.ts
var CustomFilterModal = class extends import_obsidian12.Modal {
  constructor(plugin2) {
    super(plugin2.app);
    this.plugin = plugin2;
    this.component = null;
  }
  onOpen() {
    const { contentEl } = this;
    this.component = new custom_filter_app_default({
      target: contentEl
    });
  }
  onClose() {
    var _a;
    const { contentEl } = this;
    (_a = this.component) == null ? void 0 : _a.$destroy();
    contentEl.empty();
  }
};

// src/svelte/app/components/group-tag.svelte
function create_if_block_114(ctx) {
  let stack;
  let current;
  stack = new stack_default({
    props: {
      spacing: "xs",
      align: "center",
      $$slots: { default: [create_default_slot11] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty & /*$$scope, name*/
      2049) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(stack, detaching);
    }
  };
}
function create_default_slot11(ctx) {
  let icon;
  let t0;
  let div;
  let t1;
  let current;
  icon = new icon_default({ props: { iconId: "pin", size: "xs" } });
  return {
    c() {
      create_component(icon.$$.fragment);
      t0 = space();
      div = element("div");
      t1 = text(
        /*name*/
        ctx[0]
      );
    },
    m(target, anchor) {
      mount_component(icon, target, anchor);
      insert(target, t0, anchor);
      insert(target, div, anchor);
      append(div, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if (!current || dirty & /*name*/
      1)
        set_data(
          t1,
          /*name*/
          ctx2[0]
        );
    },
    i(local) {
      if (current)
        return;
      transition_in(icon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(icon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(div);
      }
      destroy_component(icon, detaching);
    }
  };
}
function create_if_block18(ctx) {
  let t;
  return {
    c() {
      t = text(
        /*name*/
        ctx[0]
      );
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & /*name*/
      1)
        set_data(
          t,
          /*name*/
          ctx2[0]
        );
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
    }
  };
}
function create_fragment43(ctx) {
  let div;
  let t;
  let div_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*isSticky*/
    ctx[1] && create_if_block_114(ctx)
  );
  let if_block1 = !/*isSticky*/
  ctx[1] && create_if_block18(ctx);
  return {
    c() {
      div = element("div");
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      attr(div, "tabindex", "0");
      attr(div, "role", "button");
      attr(div, "draggable", "true");
      attr(div, "class", div_class_value = null_to_empty(
        /*className*/
        ctx[2]
      ) + " svelte-1rjw5cj");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block0)
        if_block0.m(div, null);
      append(div, t);
      if (if_block1)
        if_block1.m(div, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(
            div,
            "dragstart",
            /*handleDragStart*/
            ctx[4]
          ),
          listen(
            div,
            "dragover",
            /*handleDragOver*/
            ctx[5]
          ),
          listen(
            div,
            "drop",
            /*handleDrop*/
            ctx[6]
          ),
          listen(
            div,
            "click",
            /*handleClick*/
            ctx[3]
          ),
          listen(
            div,
            "keydown",
            /*keydown_handler*/
            ctx[9]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*isSticky*/
        ctx2[1]
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*isSticky*/
          2) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_114(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (!/*isSticky*/
      ctx2[1]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block18(ctx2);
          if_block1.c();
          if_block1.m(div, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty & /*className*/
      4 && div_class_value !== (div_class_value = null_to_empty(
        /*className*/
        ctx2[2]
      ) + " svelte-1rjw5cj")) {
        attr(div, "class", div_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance41($$self, $$props, $$invalidate) {
  let className;
  let { id } = $$props;
  let { name } = $$props;
  let { isSelected } = $$props;
  let { isSticky } = $$props;
  const dispatch = createEventDispatcher();
  function handleClick(event) {
    dispatch("groupClick", { id, nativeEvent: event });
  }
  function handleDragStart(event) {
    dispatch("groupDragStart", { nativeEvent: event, id });
  }
  function handleDragOver(event) {
    dispatch("groupDragOver", { nativeEvent: event, id });
  }
  function handleDrop(event) {
    dispatch("groupDrop", { nativeEvent: event, id });
  }
  const keydown_handler = (e) => (e.key === "Enter" || e.key === " ") && handleClick(e);
  $$self.$$set = ($$props2) => {
    if ("id" in $$props2)
      $$invalidate(7, id = $$props2.id);
    if ("name" in $$props2)
      $$invalidate(0, name = $$props2.name);
    if ("isSelected" in $$props2)
      $$invalidate(8, isSelected = $$props2.isSelected);
    if ("isSticky" in $$props2)
      $$invalidate(1, isSticky = $$props2.isSticky);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*isSelected*/
    256) {
      $:
        $$invalidate(2, className = "vault-explorer-group-tag" + (isSelected ? " vault-explorer-group-tag--active" : ""));
    }
  };
  return [
    name,
    isSticky,
    className,
    handleClick,
    handleDragStart,
    handleDragOver,
    handleDrop,
    id,
    isSelected,
    keydown_handler
  ];
}
var Group_tag = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance41, create_fragment43, safe_not_equal, {
      id: 7,
      name: 0,
      isSelected: 8,
      isSticky: 1
    });
  }
};
var group_tag_default = Group_tag;

// src/svelte/app/components/filter-group-list.svelte
var import_lodash = __toESM(require_lodash());
function get_each_context12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i];
  return child_ctx;
}
function create_if_block_115(ctx) {
  let wrap;
  let current;
  wrap = new wrap_default({
    props: {
      spacingX: "sm",
      spacingY: "sm",
      wrap: (
        /*filterGroupsWrapping*/
        ctx[2]
      ),
      $$slots: { default: [create_default_slot12] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(wrap.$$.fragment);
    },
    m(target, anchor) {
      mount_component(wrap, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const wrap_changes = {};
      if (dirty & /*filterGroupsWrapping*/
      4)
        wrap_changes.wrap = /*filterGroupsWrapping*/
        ctx2[2];
      if (dirty & /*$$scope, groups*/
      524289) {
        wrap_changes.$$scope = { dirty, ctx: ctx2 };
      }
      wrap.$set(wrap_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(wrap.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(wrap.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(wrap, detaching);
    }
  };
}
function create_each_block12(key_1, ctx) {
  let first;
  let grouptag;
  let current;
  grouptag = new group_tag_default({
    props: {
      id: (
        /*group*/
        ctx[16].id
      ),
      name: (
        /*group*/
        ctx[16].name
      ),
      isSelected: (
        /*group*/
        ctx[16].isEnabled
      ),
      isSticky: (
        /*group*/
        ctx[16].isSticky
      )
    }
  });
  grouptag.$on(
    "groupClick",
    /*groupClick_handler*/
    ctx[6]
  );
  grouptag.$on(
    "groupDrop",
    /*groupDrop_handler*/
    ctx[7]
  );
  grouptag.$on(
    "groupDragOver",
    /*groupDragOver_handler*/
    ctx[8]
  );
  grouptag.$on(
    "groupDragStart",
    /*groupDragStart_handler*/
    ctx[9]
  );
  return {
    key: key_1,
    first: null,
    c() {
      first = empty();
      create_component(grouptag.$$.fragment);
      this.first = first;
    },
    m(target, anchor) {
      insert(target, first, anchor);
      mount_component(grouptag, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const grouptag_changes = {};
      if (dirty & /*groups*/
      1)
        grouptag_changes.id = /*group*/
        ctx[16].id;
      if (dirty & /*groups*/
      1)
        grouptag_changes.name = /*group*/
        ctx[16].name;
      if (dirty & /*groups*/
      1)
        grouptag_changes.isSelected = /*group*/
        ctx[16].isEnabled;
      if (dirty & /*groups*/
      1)
        grouptag_changes.isSticky = /*group*/
        ctx[16].isSticky;
      grouptag.$set(grouptag_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(grouptag.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(grouptag.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(first);
      }
      destroy_component(grouptag, detaching);
    }
  };
}
function create_default_slot12(ctx) {
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*groups*/
    ctx[0]
  );
  const get_key = (ctx2) => (
    /*group*/
    ctx2[16].id
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context12(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block12(key, child_ctx));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & /*groups*/
      1) {
        each_value = ensure_array_like(
          /*groups*/
          ctx2[0]
        );
        group_outros();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block12, each_1_anchor, get_each_context12);
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d(detaching);
      }
    }
  };
}
function create_if_block19(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "No groups";
      attr(span, "class", "vault-explorer-empty-label svelte-12dg61i");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching) {
        detach(span);
      }
    }
  };
}
function create_fragment44(ctx) {
  let div2;
  let div0;
  let t0;
  let t1;
  let div1;
  let div1_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*groups*/
    ctx[0].length > 0 && create_if_block_115(ctx)
  );
  let if_block1 = (
    /*groups*/
    ctx[0].length === 0 && create_if_block19(ctx)
  );
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      div1 = element("div");
      attr(div0, "class", "vault-explorer-filter-group-list__container svelte-12dg61i");
      attr(div1, "class", div1_class_value = null_to_empty(
        /*className*/
        ctx[3]
      ) + " svelte-12dg61i");
      attr(div2, "class", "vault-explorer-filter-group-list svelte-12dg61i");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      if (if_block0)
        if_block0.m(div0, null);
      append(div0, t0);
      if (if_block1)
        if_block1.m(div0, null);
      append(div2, t1);
      append(div2, div1);
      ctx[10](div2);
      current = true;
      if (!mounted) {
        dispose = listen(
          div1,
          "mousedown",
          /*onMouseDown*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*groups*/
        ctx2[0].length > 0
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty & /*groups*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_115(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div0, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*groups*/
        ctx2[0].length === 0
      ) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block19(ctx2);
          if_block1.c();
          if_block1.m(div0, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (!current || dirty & /*className*/
      8 && div1_class_value !== (div1_class_value = null_to_empty(
        /*className*/
        ctx2[3]
      ) + " svelte-12dg61i")) {
        attr(div1, "class", div1_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      ctx[10](null);
      mounted = false;
      dispose();
    }
  };
}
function instance42($$self, $$props, $$invalidate) {
  let className;
  let { groups = [] } = $$props;
  let startX;
  let startWidth;
  let containerRef = null;
  let dragging = false;
  let filterGroupsWrapping = "nowrap";
  let plugin2;
  store_default.plugin.subscribe((p) => {
    plugin2 = p;
    $$invalidate(2, filterGroupsWrapping = plugin2.settings.filterGroupsWrapping);
  });
  onMount(() => {
    function handleFilterGroupsWrappingSettingChange() {
      $$invalidate(2, filterGroupsWrapping = plugin2.settings.filterGroupsWrapping);
    }
    EventManager.getInstance().on("filter-groups-wrapping-setting-change" /* FILTER_GROUPS_WRAPPING_SETTING_CHANGE */, handleFilterGroupsWrappingSettingChange);
    return () => {
      EventManager.getInstance().off("filter-groups-wrapping-setting-change" /* FILTER_GROUPS_WRAPPING_SETTING_CHANGE */, handleFilterGroupsWrappingSettingChange);
    };
  });
  onMount(() => {
    if (containerRef != null)
      $$invalidate(1, containerRef.style.maxWidth = plugin2.settings.filterGroupsWidth, containerRef);
  });
  function onMouseDown(event) {
    if (!containerRef)
      return;
    startX = event.clientX;
    startWidth = parseInt(window.getComputedStyle(containerRef).maxWidth, 10);
    document.documentElement.addEventListener("mousemove", onMouseMove);
    document.documentElement.addEventListener("mouseup", onMouseUp);
    $$invalidate(1, containerRef.style.pointerEvents = "none", containerRef);
    $$invalidate(5, dragging = true);
  }
  function onMouseMove(event) {
    if (!containerRef)
      return;
    $$invalidate(1, containerRef.style.maxWidth = startWidth + event.clientX - startX + "px", containerRef);
  }
  function onMouseUp() {
    return __awaiter(this, void 0, void 0, function* () {
      document.documentElement.removeEventListener("mousemove", onMouseMove);
      document.documentElement.removeEventListener("mouseup", onMouseUp);
      if (containerRef) {
        $$invalidate(1, containerRef.style.pointerEvents = "auto", containerRef);
        $$invalidate(5, dragging = false);
        plugin2.settings.filterGroupsWidth = containerRef.style.maxWidth;
        yield plugin2.saveSettings();
      }
    });
  }
  function groupClick_handler(event) {
    bubble.call(this, $$self, event);
  }
  function groupDrop_handler(event) {
    bubble.call(this, $$self, event);
  }
  function groupDragOver_handler(event) {
    bubble.call(this, $$self, event);
  }
  function groupDragStart_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      containerRef = $$value;
      $$invalidate(1, containerRef);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("groups" in $$props2)
      $$invalidate(0, groups = $$props2.groups);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*dragging*/
    32) {
      $:
        $$invalidate(3, className = dragging ? "vault-explorer-resize-handle vault-explorer-resize-handle--dragging" : "vault-explorer-resize-handle");
    }
  };
  return [
    groups,
    containerRef,
    filterGroupsWrapping,
    className,
    onMouseDown,
    dragging,
    groupClick_handler,
    groupDrop_handler,
    groupDragOver_handler,
    groupDragStart_handler,
    div2_binding
  ];
}
var Filter_group_list = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance42, create_fragment44, safe_not_equal, { groups: 0 });
  }
};
var filter_group_list_default = Filter_group_list;

// src/svelte/app/services/favorites-store.ts
var import_js_logger10 = __toESM(require_logger());
var import_lodash2 = __toESM(require_lodash());
var import_obsidian13 = require("obsidian");

// src/svelte/app/services/utils/json-utils.ts
var parseItems = (rawData) => {
  const json = JSON.parse(rawData);
  if (!json.items)
    return [];
  return json.items;
};
var stringifyItems = (items) => {
  return JSON.stringify(
    {
      items
    },
    null,
    2
  );
};

// src/svelte/app/services/favorites-store.ts
var DEBOUNCE_SAVE_MILLIS = 200;
var FAVORITES_FILE = "favorites.json";
var FavoritesStore = class {
  constructor() {
    this.debounceSave = import_lodash2.default.debounce(
      (cache) => this.save(cache),
      DEBOUNCE_SAVE_MILLIS
    );
    this.store = writable(/* @__PURE__ */ new Map());
    this.settings = null;
    this.app = null;
  }
  async load(app, settings) {
    import_js_logger10.default.trace({
      fileName: "favorites-store.ts",
      functionName: "load",
      message: "called"
    });
    const directoryExists = await app.vault.adapter.exists(
      settings.configDir
    );
    if (!directoryExists) {
      const result = this.createConfigDir(app, settings.configDir);
      if (!result)
        return;
    }
    const filePath = this.getFavoritesFilePath(settings.configDir);
    const fileExists = await app.vault.adapter.exists(filePath);
    if (!fileExists) {
      const result = await this.createFavoritesFile(app, filePath);
      if (!result)
        return;
    }
    try {
      const cache = /* @__PURE__ */ new Map();
      const rawData = await app.vault.adapter.read(filePath);
      const items = parseItems(rawData);
      items.forEach((item) => {
        const { filePath: filePath2, isFavorite } = item;
        cache.set(filePath2, isFavorite);
      });
      this.store.set(cache);
      this.settings = settings;
      this.app = app;
      import_js_logger10.default.debug(
        {
          fileName: "favorites-store.ts",
          functionName: "load",
          message: "loaded favorites cache"
        },
        { cache }
      );
    } catch (err) {
      const error = err;
      import_js_logger10.default.error(
        {
          fileName: "favorites-store.ts",
          functionName: "load",
          message: "error loading favorites cache"
        },
        error.message
      );
      new import_obsidian13.Notice("Vault Explorer: error loading favorites");
    }
  }
  setFavorite(filePath, isFavorite) {
    import_js_logger10.default.trace({
      fileName: "favorites-store.ts",
      functionName: "update",
      message: "called"
    });
    this.store.update((currentCache) => {
      const newCache = new Map(currentCache);
      newCache.set(filePath, isFavorite);
      this.debounceSave(newCache);
      return newCache;
    });
  }
  onFileRename(oldPath, newPath) {
    import_js_logger10.default.trace({
      fileName: "favorites-store.ts",
      functionName: "onFileRename",
      message: "called"
    });
    this.store.update((currentCache) => {
      const isFavorite = currentCache.get(oldPath);
      if (isFavorite !== void 0) {
        const newCache = new Map(currentCache);
        newCache.set(newPath, isFavorite);
        newCache.delete(oldPath);
        this.debounceSave(newCache);
      }
      return currentCache;
    });
  }
  onFileDelete(path) {
    import_js_logger10.default.trace({
      fileName: "favorites-store.ts",
      functionName: "onFileDelete",
      message: "called"
    });
    this.store.update((currentCache) => {
      const newCache = new Map(currentCache);
      newCache.delete(path);
      this.debounceSave(newCache);
      return newCache;
    });
  }
  async save(cache) {
    import_js_logger10.default.trace({
      fileName: "favorites-store.ts",
      functionName: "save",
      message: "called"
    });
    if (!this.app) {
      throw new Error("App is null. Please call load() first.");
    }
    if (!this.settings) {
      throw new Error("Settings are null. Please call load() first.");
    }
    try {
      const path = this.getFavoritesFilePath(this.settings.configDir);
      const items = Array.from(cache.entries()).map(
        ([filePath, isFavorite]) => ({
          filePath,
          isFavorite
        })
      );
      const rawData = stringifyItems(items);
      await this.app.vault.adapter.write(path, rawData);
    } catch (err) {
      const error = err;
      import_js_logger10.default.error(
        {
          fileName: "favorites-store.ts",
          functionName: "save",
          message: "error saving favorites cache"
        },
        error.message
      );
      new import_obsidian13.Notice("Vault Explorer: error saving favorites");
    }
  }
  async createConfigDir(app, configDir) {
    import_js_logger10.default.debug({
      fileName: "favorites-store.ts",
      functionName: "createConfigDir",
      message: "called"
    });
    try {
      await app.vault.adapter.mkdir(configDir);
      return true;
    } catch (err) {
      const error = err;
      import_js_logger10.default.error(
        {
          fileName: "favorites-store.ts",
          functionName: "load",
          message: "error creating config directory"
        },
        error.message
      );
      new import_obsidian13.Notice("Vault Explorer: error creating config directory");
      return false;
    }
  }
  async createFavoritesFile(app, filePath) {
    try {
      import_js_logger10.default.debug({
        fileName: "favorites-store.ts",
        functionName: "load",
        message: "creating new file..."
      });
      const rawData = stringifyItems([]);
      await app.vault.create(filePath, rawData);
      return true;
    } catch (err) {
      const error = err;
      import_js_logger10.default.error(
        {
          fileName: "favorites-store.ts",
          functionName: "load",
          message: "error creating favorites file"
        },
        error.message
      );
      new import_obsidian13.Notice("Vault Explorer: error creating favorites file");
      return false;
    }
  }
  getFavoritesFilePath(configDir) {
    return (0, import_obsidian13.normalizePath)(configDir + "/" + FAVORITES_FILE);
  }
};
var favoritesStore = new FavoritesStore();

// src/svelte/app/index.svelte
function get_each_context13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[60] = list[i];
  return child_ctx;
}
function create_if_block_82(ctx) {
  let searchfilter;
  let current;
  searchfilter = new search_filter_default({
    props: { value: (
      /*searchFilter*/
      ctx[0].value
    ) }
  });
  searchfilter.$on(
    "input",
    /*debounceSearchFilterChange*/
    ctx[14]
  );
  searchfilter.$on(
    "clear",
    /*clear_handler*/
    ctx[48]
  );
  return {
    c() {
      create_component(searchfilter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(searchfilter, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const searchfilter_changes = {};
      if (dirty[0] & /*searchFilter*/
      1)
        searchfilter_changes.value = /*searchFilter*/
        ctx2[0].value;
      searchfilter.$set(searchfilter_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(searchfilter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(searchfilter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(searchfilter, detaching);
    }
  };
}
function create_if_block_72(ctx) {
  let favoritesfilter;
  let current;
  favoritesfilter = new favorites_filter_default({
    props: { value: (
      /*favoritesFilter*/
      ctx[1].value
    ) }
  });
  favoritesfilter.$on(
    "change",
    /*handleFavoritesChange*/
    ctx[22]
  );
  return {
    c() {
      create_component(favoritesfilter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(favoritesfilter, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const favoritesfilter_changes = {};
      if (dirty[0] & /*favoritesFilter*/
      2)
        favoritesfilter_changes.value = /*favoritesFilter*/
        ctx2[1].value;
      favoritesfilter.$set(favoritesfilter_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(favoritesfilter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(favoritesfilter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(favoritesfilter, detaching);
    }
  };
}
function create_if_block_62(ctx) {
  let timestampfilter;
  let current;
  timestampfilter = new timestamp_filter_default({
    props: { value: (
      /*timestampFilter*/
      ctx[2].value
    ) }
  });
  timestampfilter.$on(
    "change",
    /*handleTimestampFilterChange*/
    ctx[17]
  );
  return {
    c() {
      create_component(timestampfilter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(timestampfilter, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const timestampfilter_changes = {};
      if (dirty[0] & /*timestampFilter*/
      4)
        timestampfilter_changes.value = /*timestampFilter*/
        ctx2[2].value;
      timestampfilter.$set(timestampfilter_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(timestampfilter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(timestampfilter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(timestampfilter, detaching);
    }
  };
}
function create_if_block_52(ctx) {
  let sortfilter;
  let current;
  sortfilter = new sort_filter_default({
    props: { value: (
      /*sortFilter*/
      ctx[3].value
    ) }
  });
  sortfilter.$on(
    "change",
    /*handleSortChange*/
    ctx[21]
  );
  return {
    c() {
      create_component(sortfilter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(sortfilter, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const sortfilter_changes = {};
      if (dirty[0] & /*sortFilter*/
      8)
        sortfilter_changes.value = /*sortFilter*/
        ctx2[3].value;
      sortfilter.$set(sortfilter_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(sortfilter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sortfilter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(sortfilter, detaching);
    }
  };
}
function create_if_block_43(ctx) {
  let iconbutton;
  let current;
  iconbutton = new icon_button_default({
    props: {
      iconId: "shuffle",
      ariaLabel: "Reshuffle files"
    }
  });
  iconbutton.$on(
    "click",
    /*handleReshuffleClick*/
    ctx[15]
  );
  return {
    c() {
      create_component(iconbutton.$$.fragment);
    },
    m(target, anchor) {
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_default_slot_62(ctx) {
  let t0;
  let t1;
  let t2;
  let iconbutton;
  let current;
  let if_block0 = (
    /*timestampFilter*/
    ctx[2].isEnabled && create_if_block_62(ctx)
  );
  let if_block1 = (
    /*sortFilter*/
    ctx[3].isEnabled && create_if_block_52(ctx)
  );
  let if_block2 = (
    /*sortFilter*/
    ctx[3].value == "random" && create_if_block_43(ctx)
  );
  iconbutton = new icon_button_default({
    props: {
      ariaLabel: "Change custom filter",
      iconId: "list-filter"
    }
  });
  iconbutton.$on(
    "click",
    /*handleCustomFilterClick*/
    ctx[24]
  );
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      if (if_block2)
        if_block2.c();
      t2 = space();
      create_component(iconbutton.$$.fragment);
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t0, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, t1, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t2, anchor);
      mount_component(iconbutton, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*timestampFilter*/
        ctx2[2].isEnabled
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*timestampFilter*/
          4) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_62(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*sortFilter*/
        ctx2[3].isEnabled
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & /*sortFilter*/
          8) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_52(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(t1.parentNode, t1);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (
        /*sortFilter*/
        ctx2[3].value == "random"
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty[0] & /*sortFilter*/
          8) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_43(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(t2.parentNode, t2);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      transition_in(iconbutton.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      transition_out(iconbutton.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t0);
        detach(t1);
        detach(t2);
      }
      if (if_block0)
        if_block0.d(detaching);
      if (if_block1)
        if_block1.d(detaching);
      if (if_block2)
        if_block2.d(detaching);
      destroy_component(iconbutton, detaching);
    }
  };
}
function create_default_slot_52(ctx) {
  let t;
  let flex;
  let current;
  let if_block = (
    /*favoritesFilter*/
    ctx[1].isEnabled && create_if_block_72(ctx)
  );
  flex = new flex_default({
    props: {
      $$slots: { default: [create_default_slot_62] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      if (if_block)
        if_block.c();
      t = space();
      create_component(flex.$$.fragment);
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t, anchor);
      mount_component(flex, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*favoritesFilter*/
        ctx2[1].isEnabled
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*favoritesFilter*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_72(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t.parentNode, t);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const flex_changes = {};
      if (dirty[0] & /*sortFilter, timestampFilter*/
      12 | dirty[2] & /*$$scope*/
      2) {
        flex_changes.$$scope = { dirty, ctx: ctx2 };
      }
      flex.$set(flex_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(flex.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(flex.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
      if (if_block)
        if_block.d(detaching);
      destroy_component(flex, detaching);
    }
  };
}
function create_default_slot_44(ctx) {
  let stack;
  let current;
  stack = new stack_default({
    props: {
      spacing: "sm",
      $$slots: { default: [create_default_slot_52] },
      $$scope: { ctx }
    }
  });
  return {
    c() {
      create_component(stack.$$.fragment);
    },
    m(target, anchor) {
      mount_component(stack, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const stack_changes = {};
      if (dirty[0] & /*sortFilter, timestampFilter, favoritesFilter*/
      14 | dirty[2] & /*$$scope*/
      2) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(stack.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(stack.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(stack, detaching);
    }
  };
}
function create_if_block_34(ctx) {
  let filtergrouplist;
  let current;
  filtergrouplist = new filter_group_list_default({
    props: { groups: (
      /*customFilter*/
      ctx[4].groups
    ) }
  });
  filtergrouplist.$on(
    "groupClick",
    /*handleGroupClick*/
    ctx[16]
  );
  filtergrouplist.$on(
    "groupDrop",
    /*handleGroupDrop*/
    ctx[19]
  );
  filtergrouplist.$on("groupDragOver", handleGroupDragOver2);
  filtergrouplist.$on("groupDragStart", handleGroupDragStart2);
  return {
    c() {
      create_component(filtergrouplist.$$.fragment);
    },
    m(target, anchor) {
      mount_component(filtergrouplist, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const filtergrouplist_changes = {};
      if (dirty[0] & /*customFilter*/
      16)
        filtergrouplist_changes.groups = /*customFilter*/
        ctx2[4].groups;
      filtergrouplist.$set(filtergrouplist_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(filtergrouplist.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filtergrouplist.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(filtergrouplist, detaching);
    }
  };
}
function create_default_slot_35(ctx) {
  let flex;
  let t;
  let if_block_anchor;
  let current;
  flex = new flex_default({
    props: {
      justify: "space-between",
      $$slots: { default: [create_default_slot_44] },
      $$scope: { ctx }
    }
  });
  let if_block = (
    /*customFilter*/
    ctx[4].isEnabled && create_if_block_34(ctx)
  );
  return {
    c() {
      create_component(flex.$$.fragment);
      t = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      mount_component(flex, target, anchor);
      insert(target, t, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const flex_changes = {};
      if (dirty[0] & /*sortFilter, timestampFilter, favoritesFilter*/
      14 | dirty[2] & /*$$scope*/
      2) {
        flex_changes.$$scope = { dirty, ctx: ctx2 };
      }
      flex.$set(flex_changes);
      if (
        /*customFilter*/
        ctx2[4].isEnabled
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*customFilter*/
          16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_34(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(flex.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(flex.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(t);
        detach(if_block_anchor);
      }
      destroy_component(flex, detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
}
function create_default_slot_26(ctx) {
  let t_value = getDisplayNameForView(
    /*view*/
    ctx[60]
  ) + "";
  let t;
  return {
    c() {
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*viewOrder*/
      64 && t_value !== (t_value = getDisplayNameForView(
        /*view*/
        ctx2[60]
      ) + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching) {
        detach(t);
      }
    }
  };
}
function create_each_block13(ctx) {
  let tab;
  let current;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[49](
        /*view*/
        ctx[60]
      )
    );
  }
  function dragstart_handler(...args) {
    return (
      /*dragstart_handler*/
      ctx[50](
        /*view*/
        ctx[60],
        ...args
      )
    );
  }
  function drop_handler(...args) {
    return (
      /*drop_handler*/
      ctx[51](
        /*view*/
        ctx[60],
        ...args
      )
    );
  }
  tab = new tab_default({
    props: {
      draggable: true,
      $$slots: { default: [create_default_slot_26] },
      $$scope: { ctx }
    }
  });
  tab.$on("click", click_handler);
  tab.$on("dragstart", dragstart_handler);
  tab.$on("dragover", handleViewDragOver);
  tab.$on("drop", drop_handler);
  return {
    c() {
      create_component(tab.$$.fragment);
    },
    m(target, anchor) {
      mount_component(tab, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const tab_changes = {};
      if (dirty[0] & /*viewOrder*/
      64 | dirty[2] & /*$$scope*/
      2) {
        tab_changes.$$scope = { dirty, ctx };
      }
      tab.$set(tab_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(tab.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tab.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(tab, detaching);
    }
  };
}
function create_default_slot_17(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ensure_array_like(
    /*viewOrder*/
    ctx[6]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block13(get_each_context13(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*currentView, viewOrder, handleViewDrop*/
      262240) {
        each_value = ensure_array_like(
          /*viewOrder*/
          ctx2[6]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context13(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block13(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(each_1_anchor);
      }
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_default_slot13(ctx) {
  let div;
  let tablist;
  let t;
  let paginationindicator;
  let current;
  tablist = new tab_list_default({
    props: {
      initialSelectedIndex: (
        /*viewOrder*/
        ctx[6].findIndex(
          /*func*/
          ctx[52]
        )
      ),
      $$slots: { default: [create_default_slot_17] },
      $$scope: { ctx }
    }
  });
  paginationindicator = new pagination_indicator_default({
    props: {
      startIndex: (
        /*startIndex*/
        ctx[9]
      ),
      endIndex: (
        /*endIndex*/
        ctx[13]
      ),
      currentPage: (
        /*currentPage*/
        ctx[7]
      ),
      totalPages: (
        /*totalPages*/
        ctx[11]
      ),
      totalItems: (
        /*totalItems*/
        ctx[12]
      )
    }
  });
  paginationindicator.$on(
    "change",
    /*handlePageChange*/
    ctx[20]
  );
  return {
    c() {
      div = element("div");
      create_component(tablist.$$.fragment);
      t = space();
      create_component(paginationindicator.$$.fragment);
      attr(div, "class", "vault-explorer-view-select svelte-1xew32p");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(tablist, div, null);
      insert(target, t, anchor);
      mount_component(paginationindicator, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const tablist_changes = {};
      if (dirty[0] & /*viewOrder, currentView*/
      96)
        tablist_changes.initialSelectedIndex = /*viewOrder*/
        ctx2[6].findIndex(
          /*func*/
          ctx2[52]
        );
      if (dirty[0] & /*viewOrder, currentView*/
      96 | dirty[2] & /*$$scope*/
      2) {
        tablist_changes.$$scope = { dirty, ctx: ctx2 };
      }
      tablist.$set(tablist_changes);
      const paginationindicator_changes = {};
      if (dirty[0] & /*startIndex*/
      512)
        paginationindicator_changes.startIndex = /*startIndex*/
        ctx2[9];
      if (dirty[0] & /*endIndex*/
      8192)
        paginationindicator_changes.endIndex = /*endIndex*/
        ctx2[13];
      if (dirty[0] & /*currentPage*/
      128)
        paginationindicator_changes.currentPage = /*currentPage*/
        ctx2[7];
      if (dirty[0] & /*totalPages*/
      2048)
        paginationindicator_changes.totalPages = /*totalPages*/
        ctx2[11];
      if (dirty[0] & /*totalItems*/
      4096)
        paginationindicator_changes.totalItems = /*totalItems*/
        ctx2[12];
      paginationindicator.$set(paginationindicator_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(tablist.$$.fragment, local);
      transition_in(paginationindicator.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(tablist.$$.fragment, local);
      transition_out(paginationindicator.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div);
        detach(t);
      }
      destroy_component(tablist);
      destroy_component(paginationindicator, detaching);
    }
  };
}
function create_if_block_25(ctx) {
  let feedview;
  let current;
  feedview = new feed_view_default({
    props: {
      data: (
        /*renderData*/
        ctx[10]
      ),
      startIndex: (
        /*startIndex*/
        ctx[9]
      ),
      pageLength: (
        /*pageLength*/
        ctx[8]
      )
    }
  });
  feedview.$on(
    "favoritePropertyChange",
    /*handleFavoritePropertyChange*/
    ctx[23]
  );
  return {
    c() {
      create_component(feedview.$$.fragment);
    },
    m(target, anchor) {
      mount_component(feedview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const feedview_changes = {};
      if (dirty[0] & /*renderData*/
      1024)
        feedview_changes.data = /*renderData*/
        ctx2[10];
      if (dirty[0] & /*startIndex*/
      512)
        feedview_changes.startIndex = /*startIndex*/
        ctx2[9];
      if (dirty[0] & /*pageLength*/
      256)
        feedview_changes.pageLength = /*pageLength*/
        ctx2[8];
      feedview.$set(feedview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(feedview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(feedview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(feedview, detaching);
    }
  };
}
function create_if_block_116(ctx) {
  let listview;
  let current;
  listview = new list_view_default({
    props: {
      data: (
        /*renderData*/
        ctx[10]
      ),
      startIndex: (
        /*startIndex*/
        ctx[9]
      ),
      pageLength: (
        /*pageLength*/
        ctx[8]
      )
    }
  });
  listview.$on(
    "favoritePropertyChange",
    /*handleFavoritePropertyChange*/
    ctx[23]
  );
  return {
    c() {
      create_component(listview.$$.fragment);
    },
    m(target, anchor) {
      mount_component(listview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const listview_changes = {};
      if (dirty[0] & /*renderData*/
      1024)
        listview_changes.data = /*renderData*/
        ctx2[10];
      if (dirty[0] & /*startIndex*/
      512)
        listview_changes.startIndex = /*startIndex*/
        ctx2[9];
      if (dirty[0] & /*pageLength*/
      256)
        listview_changes.pageLength = /*pageLength*/
        ctx2[8];
      listview.$set(listview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(listview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(listview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(listview, detaching);
    }
  };
}
function create_if_block20(ctx) {
  let gridview;
  let current;
  gridview = new grid_view_default({
    props: {
      data: (
        /*renderData*/
        ctx[10]
      ),
      startIndex: (
        /*startIndex*/
        ctx[9]
      ),
      pageLength: (
        /*pageLength*/
        ctx[8]
      )
    }
  });
  gridview.$on(
    "favoritePropertyChange",
    /*handleFavoritePropertyChange*/
    ctx[23]
  );
  return {
    c() {
      create_component(gridview.$$.fragment);
    },
    m(target, anchor) {
      mount_component(gridview, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const gridview_changes = {};
      if (dirty[0] & /*renderData*/
      1024)
        gridview_changes.data = /*renderData*/
        ctx2[10];
      if (dirty[0] & /*startIndex*/
      512)
        gridview_changes.startIndex = /*startIndex*/
        ctx2[9];
      if (dirty[0] & /*pageLength*/
      256)
        gridview_changes.pageLength = /*pageLength*/
        ctx2[8];
      gridview.$set(gridview_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(gridview.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(gridview.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(gridview, detaching);
    }
  };
}
function create_fragment45(ctx) {
  let div1;
  let div0;
  let t0;
  let stack;
  let t1;
  let wrap;
  let t2;
  let current_block_type_index;
  let if_block1;
  let current;
  let if_block0 = (
    /*searchFilter*/
    ctx[0].isEnabled && create_if_block_82(ctx)
  );
  stack = new stack_default({
    props: {
      direction: "column",
      spacing: "sm",
      $$slots: { default: [create_default_slot_35] },
      $$scope: { ctx }
    }
  });
  wrap = new wrap_default({
    props: {
      align: "center",
      spacingY: "sm",
      justify: "space-between",
      $$slots: { default: [create_default_slot13] },
      $$scope: { ctx }
    }
  });
  const if_block_creators = [create_if_block20, create_if_block_116, create_if_block_25];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*currentView*/
      ctx2[5] === "grid"
    )
      return 0;
    if (
      /*currentView*/
      ctx2[5] === "list"
    )
      return 1;
    if (
      /*currentView*/
      ctx2[5] === "feed"
    )
      return 2;
    return -1;
  }
  if (~(current_block_type_index = select_block_type(ctx, [-1, -1, -1]))) {
    if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      create_component(stack.$$.fragment);
      t1 = space();
      create_component(wrap.$$.fragment);
      t2 = space();
      if (if_block1)
        if_block1.c();
      attr(div0, "class", "vault-explorer-header svelte-1xew32p");
      attr(div1, "class", "vault-explorer svelte-1xew32p");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if (if_block0)
        if_block0.m(div0, null);
      append(div0, t0);
      mount_component(stack, div0, null);
      append(div0, t1);
      mount_component(wrap, div0, null);
      append(div0, t2);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div0, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (
        /*searchFilter*/
        ctx2[0].isEnabled
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & /*searchFilter*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_82(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div0, t0);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      const stack_changes = {};
      if (dirty[0] & /*customFilter, sortFilter, timestampFilter, favoritesFilter*/
      30 | dirty[2] & /*$$scope*/
      2) {
        stack_changes.$$scope = { dirty, ctx: ctx2 };
      }
      stack.$set(stack_changes);
      const wrap_changes = {};
      if (dirty[0] & /*startIndex, endIndex, currentPage, totalPages, totalItems, viewOrder, currentView*/
      15072 | dirty[2] & /*$$scope*/
      2) {
        wrap_changes.$$scope = { dirty, ctx: ctx2 };
      }
      wrap.$set(wrap_changes);
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block1) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block1 = if_blocks[current_block_type_index];
          if (!if_block1) {
            if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block1.c();
          } else {
            if_block1.p(ctx2, dirty);
          }
          transition_in(if_block1, 1);
          if_block1.m(div0, null);
        } else {
          if_block1 = null;
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(stack.$$.fragment, local);
      transition_in(wrap.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(stack.$$.fragment, local);
      transition_out(wrap.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      if (if_block0)
        if_block0.d();
      destroy_component(stack);
      destroy_component(wrap);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
    }
  };
}
function handleViewDragOver(e) {
  const { nativeEvent } = e.detail;
  nativeEvent.preventDefault();
}
function handleViewDragStart(e, id) {
  const { nativeEvent } = e.detail;
  nativeEvent.dataTransfer.setData("text", id);
  nativeEvent.dataTransfer.effectAllowed = "move";
}
function handleGroupDragOver2(e) {
  const { nativeEvent } = e.detail;
  nativeEvent.preventDefault();
}
function handleGroupDragStart2(e) {
  const { id, nativeEvent } = e.detail;
  nativeEvent.dataTransfer.setData("text", id);
  nativeEvent.dataTransfer.effectAllowed = "move";
  const dragImage = nativeEvent.target.cloneNode(true);
  const rect = nativeEvent.target.getBoundingClientRect();
  dragImage.style.position = "absolute";
  dragImage.style.top = "-9999px";
  dragImage.style.left = "-9999px";
  document.body.appendChild(dragImage);
  nativeEvent.dataTransfer.setDragImage(dragImage, rect.width / 2, rect.height / 2);
  nativeEvent.target.addEventListener("dragend", () => {
    dragImage.remove();
  });
}
function instance43($$self, $$props, $$invalidate) {
  let filteredSearch;
  let filteredFavorites;
  let filteredTimestamp;
  let renderData;
  let totalItems;
  let totalPages;
  let startIndex;
  let pageLength;
  let endIndex;
  let plugin2;
  let startOfTodayMillis;
  let startOfThisWeekMillis;
  let startOfLastWeekMillis;
  let pageSize = 0;
  let searchFilter = { isEnabled: true, value: "" };
  let favoritesFilter = { isEnabled: false, value: false };
  let timestampFilter = { isEnabled: true, value: "all" };
  let sortFilter = { isEnabled: true, value: "file-name-asc" };
  let customFilter = {
    isEnabled: true,
    groups: [],
    selectedGroupId: ""
  };
  let currentView = "grid" /* GRID */;
  let frontmatterCacheTime = Date.now();
  let propertySettingsTime = Date.now();
  let loadedFiles = [];
  let timeValuesUpdateInterval = null;
  let favoritesCache = /* @__PURE__ */ new Map();
  let contentCache = /* @__PURE__ */ new Map();
  let randomSortCache = /* @__PURE__ */ new Map();
  let dashboardView = { isEnabled: false };
  let listView = { isEnabled: false };
  let gridView = {
    loadSocialMediaImage: false,
    isEnabled: false
  };
  let feedView = {
    isEnabled: false,
    removeH1: true,
    lineClampSmall: 2,
    lineClampMedium: 3,
    lineClampLarge: 5,
    collapseStyle: "no-new-lines"
  };
  let tableView = { isEnabled: false };
  let recommendedView = { isEnabled: false };
  let relatedView = { isEnabled: false };
  let viewOrder = [];
  randomFileSortStore.subscribe((value) => {
    $$invalidate(35, randomSortCache = value);
  });
  favoritesStore.store.subscribe((value) => {
    $$invalidate(33, favoritesCache = value);
  });
  fileContentStore.subscribe((value) => {
    $$invalidate(34, contentCache = value);
  });
  fileStore.subscribe((value) => {
    $$invalidate(32, loadedFiles = value);
  });
  store_default.plugin.subscribe((p) => __awaiter(void 0, void 0, void 0, function* () {
    $$invalidate(25, plugin2 = p);
    const { app, settings } = plugin2;
    $$invalidate(29, pageSize = settings.pageSize);
    $$invalidate(0, searchFilter = settings.filters.search);
    $$invalidate(1, favoritesFilter = settings.filters.favorites);
    $$invalidate(3, sortFilter = settings.filters.sort);
    $$invalidate(2, timestampFilter = settings.filters.timestamp);
    $$invalidate(5, currentView = settings.currentView);
    $$invalidate(4, customFilter = settings.filters.custom);
    $$invalidate(36, dashboardView = settings.views.dashboard);
    $$invalidate(37, listView = settings.views.list);
    $$invalidate(38, gridView = settings.views.grid);
    $$invalidate(39, feedView = settings.views.feed);
    $$invalidate(40, tableView = settings.views.table);
    $$invalidate(41, recommendedView = settings.views.recommended);
    $$invalidate(42, relatedView = settings.views.related);
    $$invalidate(6, viewOrder = settings.viewOrder);
    if (settings.enableClockUpdates) {
      setTimeValuesUpdateInterval();
    }
    favoritesStore.load(app, settings);
    fileStore.load(app);
    fileContentStore.load(app);
    randomFileSortStore.load(app);
  }));
  onMount(() => {
    function handleFilterToggleSettingChange() {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handleFilterToggleSettingChange",
        message: "called"
      });
      $$invalidate(0, searchFilter = plugin2.settings.filters.search);
      $$invalidate(1, favoritesFilter = plugin2.settings.filters.favorites);
      $$invalidate(3, sortFilter = plugin2.settings.filters.sort);
      $$invalidate(2, timestampFilter = plugin2.settings.filters.timestamp);
      $$invalidate(4, customFilter = plugin2.settings.filters.custom);
    }
    EventManager.getInstance().on("filter-toggle-setting-change" /* FILTER_TOGGLE_SETTING_CHANGE */, handleFilterToggleSettingChange);
    return () => {
      EventManager.getInstance().off("filter-toggle-setting-change" /* FILTER_TOGGLE_SETTING_CHANGE */, handleFilterToggleSettingChange);
    };
  });
  onMount(() => {
    function handleClockUpdatesSettingChange() {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handleClockUpdatesSettingChange",
        message: "called"
      });
      const isEnabled = plugin2.settings.enableClockUpdates;
      if (isEnabled) {
        updateTimeValues();
        setTimeValuesUpdateInterval();
      } else if (timeValuesUpdateInterval != null) {
        clearInterval(timeValuesUpdateInterval);
      }
    }
    updateTimeValues();
    EventManager.getInstance().on("clock-updates-setting-change" /* CLOCK_UPDATES_SETTING_CHANGE */, handleClockUpdatesSettingChange);
    return () => {
      if (timeValuesUpdateInterval != null)
        clearInterval(timeValuesUpdateInterval);
      EventManager.getInstance().off("clock-updates-setting-change" /* CLOCK_UPDATES_SETTING_CHANGE */, handleClockUpdatesSettingChange);
    };
  });
  onMount(() => {
    function handlePropertiesFilterUpdate() {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handlePropertiesFilterUpdate",
        message: "called"
      });
      $$invalidate(4, customFilter.groups = plugin2.settings.filters.custom.groups, customFilter);
    }
    EventManager.getInstance().on("properties-filter-update" /* PROPERTIES_FILTER_UPDATE */, handlePropertiesFilterUpdate);
    return () => {
      EventManager.getInstance().off("properties-filter-update" /* PROPERTIES_FILTER_UPDATE */, handlePropertiesFilterUpdate);
    };
  });
  onMount(() => {
    const handleCreateFile = (...data) => {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handleCreateFile",
        message: "called"
      });
      if (data.length > 0 && data[0] instanceof import_obsidian14.TFile) {
        const newFile = data[0];
        fileStore.onFileCreate(newFile);
        randomFileSortStore.onFileCreate(newFile.path);
        fileContentStore.onFileCreate(plugin2.app, newFile);
      }
    };
    EventManager.getInstance().on("file-create" /* FILE_CREATE */, handleCreateFile);
    return () => {
      EventManager.getInstance().off("file-create" /* FILE_CREATE */, handleCreateFile);
    };
  });
  onMount(() => {
    const handleDeleteFile = (...data) => {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handleDeleteFile",
        message: "called"
      });
      if (data.length > 0 && typeof data[0] === "string") {
        const path = data[0];
        fileStore.onFileDelete(path);
        randomFileSortStore.onFileDelete(path);
        fileContentStore.onFileDelete(path);
        favoritesStore.onFileDelete(path);
      }
    };
    EventManager.getInstance().on("file-delete" /* FILE_DELETE */, handleDeleteFile);
    return () => {
      EventManager.getInstance().off("file-delete" /* FILE_DELETE */, handleDeleteFile);
    };
  });
  onMount(() => {
    const handleFileRename = (...data) => {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handleFileRename",
        message: "called"
      });
      if (data.length < 2)
        return;
      if (typeof data[0] === "string" && data[1] instanceof import_obsidian14.TFile) {
        const oldPath = data[0];
        const updatedFile = data[1];
        fileStore.onFileRename(oldPath, updatedFile);
        randomFileSortStore.onFileRename(oldPath, updatedFile.path);
        fileContentStore.onFileRename(oldPath, updatedFile.path);
        favoritesStore.onFileRename(oldPath, updatedFile.path);
      }
    };
    EventManager.getInstance().on("file-rename" /* FILE_RENAME */, handleFileRename);
    return () => {
      EventManager.getInstance().off("file-rename" /* FILE_RENAME */, handleFileRename);
    };
  });
  onMount(() => {
    const handleFileModify = (...data) => __awaiter(void 0, void 0, void 0, function* () {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handleFileModify",
        message: "called"
      });
      if (data.length > 0 && data[0] instanceof import_obsidian14.TFile) {
        const file = data[0];
        const content = yield plugin2.app.vault.cachedRead(file);
        fileContentStore.onFileModify(file.path, content);
      }
    });
    EventManager.getInstance().on("file-modify" /* FILE_MODIFY */, handleFileModify);
    return () => {
      EventManager.getInstance().off("file-modify" /* FILE_MODIFY */, handleFileModify);
    };
  });
  onMount(() => {
    const handleMetadataChange = (...data) => {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handleMetadataChange",
        message: "called"
      });
      if (data.length > 0 && data[0] instanceof import_obsidian14.TFile) {
        updateFrontmatterCacheTime();
      }
    };
    EventManager.getInstance().on("metadata-change" /* METADATA_CHANGE */, handleMetadataChange);
    return () => {
      EventManager.getInstance().off("metadata-change" /* METADATA_CHANGE */, handleMetadataChange);
    };
  });
  onMount(() => {
    function handleViewToggleSettingChange() {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handleViewToggleSettingChange",
        message: "called"
      });
      $$invalidate(6, viewOrder = plugin2.settings.viewOrder);
      $$invalidate(5, currentView = plugin2.settings.currentView);
    }
    EventManager.getInstance().on("view-toggle-setting-change" /* VIEW_TOGGLE_SETTING_CHANGE */, handleViewToggleSettingChange);
    return () => {
      EventManager.getInstance().off("view-toggle-setting-change" /* VIEW_TOGGLE_SETTING_CHANGE */, handleViewToggleSettingChange);
    };
  });
  onMount(() => {
    function handlePageSizeSettingChange() {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handlePageSizeSettingChange",
        message: "called"
      });
      $$invalidate(29, pageSize = plugin2.settings.pageSize);
    }
    EventManager.getInstance().on("page-size-setting-change" /* PAGE_SIZE_SETTING_CHANGE */, handlePageSizeSettingChange);
    return () => {
      EventManager.getInstance().off("page-size-setting-change" /* PAGE_SIZE_SETTING_CHANGE */, handlePageSizeSettingChange);
    };
  });
  onMount(() => {
    function handlePropertySettingChange() {
      import_js_logger11.default.trace({
        fileName: "app/index.svelte",
        functionName: "handlePropertySettingChange",
        message: "called"
      });
      updatePropertySettingTime();
    }
    EventManager.getInstance().on("property-setting-change" /* PROPERTY_SETTING_CHANGE */, handlePropertySettingChange);
    return () => {
      EventManager.getInstance().off("property-setting-change" /* PROPERTY_SETTING_CHANGE */, handlePropertySettingChange);
    };
  });
  const debounceSearchFilterChange = import_lodash3.default.debounce(
    (e) => {
      if (searchFilter == null)
        return;
      $$invalidate(0, searchFilter.value = e.target.value, searchFilter);
    },
    DEBOUNCE_INPUT_TIME
  );
  const debounceFavoriteFilterChange = import_lodash3.default.debounce(
    (value) => {
      $$invalidate(1, favoritesFilter.value = value, favoritesFilter);
    },
    DEBOUNCE_INPUT_TIME
  );
  function handleReshuffleClick() {
    randomFileSortStore.load(plugin2.app);
  }
  function updateTimeValues() {
    import_js_logger11.default.trace({
      fileName: "app/index.svelte",
      functionName: "updateTimeValues",
      message: "called"
    });
    $$invalidate(26, startOfTodayMillis = getStartOfTodayMillis());
    $$invalidate(27, startOfThisWeekMillis = getStartOfThisWeekMillis());
    $$invalidate(28, startOfLastWeekMillis = getStartOfLastWeekMillis());
  }
  function setTimeValuesUpdateInterval() {
    const MILLIS_MINUTE = 6e4;
    timeValuesUpdateInterval = setInterval(updateTimeValues, MILLIS_MINUTE);
  }
  function updateFrontmatterCacheTime() {
    import_js_logger11.default.trace({
      fileName: "app/index.svelte",
      functionName: "updateFrontmatterCacheTime",
      message: "called"
    });
    $$invalidate(30, frontmatterCacheTime = Date.now());
  }
  function updatePropertySettingTime() {
    $$invalidate(31, propertySettingsTime = Date.now());
  }
  function saveSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      $$invalidate(25, plugin2.settings.filters.search = searchFilter, plugin2);
      $$invalidate(25, plugin2.settings.filters.sort = sortFilter, plugin2);
      $$invalidate(25, plugin2.settings.filters.timestamp = timestampFilter, plugin2);
      $$invalidate(25, plugin2.settings.filters.favorites = favoritesFilter, plugin2);
      $$invalidate(25, plugin2.settings.views.dashboard = dashboardView, plugin2);
      $$invalidate(25, plugin2.settings.views.list = listView, plugin2);
      $$invalidate(25, plugin2.settings.views.grid = gridView, plugin2);
      $$invalidate(25, plugin2.settings.views.feed = feedView, plugin2);
      $$invalidate(25, plugin2.settings.views.table = tableView, plugin2);
      $$invalidate(25, plugin2.settings.views.recommended = recommendedView, plugin2);
      $$invalidate(25, plugin2.settings.views.related = relatedView, plugin2);
      $$invalidate(25, plugin2.settings.currentView = currentView, plugin2);
      $$invalidate(25, plugin2.settings.filters.custom = customFilter, plugin2);
      $$invalidate(25, plugin2.settings.viewOrder = viewOrder, plugin2);
      yield plugin2.saveSettings();
    });
  }
  function handleGroupClick(e) {
    const { id, nativeEvent } = e.detail;
    const ctrlOrMeta = nativeEvent.ctrlKey || nativeEvent.metaKey;
    const { groups } = customFilter;
    const clickedGroup = groups.find((group) => group.id === id);
    if (!clickedGroup) {
      throw new Error(`Group with id ${id} not found`);
    }
    const newGroups = groups.map((group) => {
      if (group.id === id) {
        if (ctrlOrMeta) {
          const newSticky = !group.isSticky;
          return Object.assign(Object.assign({}, group), {
            isSticky: newSticky,
            isEnabled: newSticky
          });
        } else {
          return Object.assign(Object.assign({}, group), { isEnabled: !group.isEnabled });
        }
      } else {
        if (group.isSticky || ctrlOrMeta || clickedGroup.isSticky) {
          return group;
        } else {
          return Object.assign(Object.assign({}, group), { isEnabled: false });
        }
      }
    });
    $$invalidate(4, customFilter.selectedGroupId = id, customFilter);
    $$invalidate(4, customFilter.groups = newGroups, customFilter);
  }
  function handleTimestampFilterChange(e) {
    const { value } = e.detail;
    $$invalidate(2, timestampFilter.value = value, timestampFilter);
  }
  function handleViewDrop(e, id) {
    const { nativeEvent } = e.detail;
    const dragId = nativeEvent.dataTransfer.getData("text");
    nativeEvent.dataTransfer.dropEffect = "move";
    const draggedIndex = viewOrder.findIndex((view) => view === dragId);
    const dragged = viewOrder.find((view) => view === dragId);
    const droppedIndex = viewOrder.findIndex((view) => view === id);
    const dropped = viewOrder.find((view) => view === id);
    if (!dragged || !dropped || draggedIndex === -1 || droppedIndex === -1)
      return;
    let newViewOrder = [...viewOrder];
    newViewOrder[draggedIndex] = dropped;
    newViewOrder[droppedIndex] = dragged;
    $$invalidate(6, viewOrder = newViewOrder);
  }
  function handleGroupDrop(e) {
    const { id, nativeEvent } = e.detail;
    const dragId = nativeEvent.dataTransfer.getData("text");
    nativeEvent.dataTransfer.dropEffect = "move";
    const { groups } = customFilter;
    const draggedIndex = groups.findIndex((group) => group.id === dragId);
    const dragged = groups.find((group) => group.id === dragId);
    const droppedIndex = groups.findIndex((group) => group.id === id);
    if (!dragged || draggedIndex === -1 || droppedIndex === -1)
      return;
    let newGroups = [...groups];
    newGroups.splice(draggedIndex, 1);
    newGroups.splice(droppedIndex, 0, dragged);
    $$invalidate(4, customFilter.groups = newGroups, customFilter);
  }
  function handlePageChange(e) {
    const { value } = e.detail;
    $$invalidate(7, currentPage = value);
  }
  function handleSortChange(e) {
    const { value } = e.detail;
    $$invalidate(3, sortFilter.value = value, sortFilter);
  }
  function handleFavoritesChange(e) {
    const nativeEvent = e.detail.nativeEvent;
    const value = nativeEvent.target.checked;
    debounceFavoriteFilterChange(value);
  }
  function handleFavoritePropertyChange(e) {
    const { filePath, value } = e.detail;
    const { properties } = plugin2.settings;
    const { favorite: favoritePropertyName } = properties;
    if (favoritePropertyName === "") {
      new import_obsidian14.Notice("Please select a favorite property in the Vault Explorer settings to use this feature");
      return;
    }
    const file = plugin2.app.vault.getFileByPath(filePath);
    if (!file) {
      import_js_logger11.default.error({
        fileName: "app/index.svelte",
        functionName: "handleFavoritePropertyChange",
        message: "file not found. returning..."
      });
      return;
    }
    if (file.extension === "md") {
      plugin2.app.fileManager.processFrontMatter(file, (frontmatter) => {
        frontmatter[favoritePropertyName] = value;
        return frontmatter;
      });
    } else {
      favoritesStore.setFavorite(filePath, value);
    }
  }
  function handleCustomFilterClick() {
    new CustomFilterModal(plugin2).open();
  }
  let filteredCustom = [];
  let formatted = [];
  let currentPage = 1;
  const clear_handler = () => $$invalidate(0, searchFilter.value = "", searchFilter);
  const click_handler = (view) => $$invalidate(5, currentView = view);
  const dragstart_handler = (view, e) => handleViewDragStart(e, view);
  const drop_handler = (view, e) => handleViewDrop(e, view);
  const func = (view) => view === currentView;
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*frontmatterCacheTime, customFilter, plugin*/
    1107296272 | $$self.$$.dirty[1] & /*loadedFiles, contentCache*/
    10) {
      $:
        if (frontmatterCacheTime && customFilter.groups) {
          import_js_logger11.default.debug(`Frontmatter cache time: ${frontmatterCacheTime}`);
          $$invalidate(43, filteredCustom = loadedFiles.filter((loadedFile) => {
            var _a, _b;
            const { file } = loadedFile;
            const { name, path } = file;
            const frontmatter = (_a = plugin2.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter;
            const content = (_b = contentCache.get(path)) !== null && _b !== void 0 ? _b : null;
            return filterByGroups(name, path, frontmatter, content, customFilter.groups);
          }));
        }
    }
    if ($$self.$$.dirty[0] & /*plugin*/
    33554432 | $$self.$$.dirty[1] & /*propertySettingsTime, filteredCustom, favoritesCache, contentCache*/
    4109) {
      $:
        if (propertySettingsTime) {
          $$invalidate(44, formatted = filteredCustom.map((loadedFile) => {
            var _a, _b, _c;
            const { id, file } = loadedFile;
            const frontmatter = (_a = plugin2.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter;
            const isFavorite = (_b = favoritesCache.get(file.path)) !== null && _b !== void 0 ? _b : null;
            const content = (_c = contentCache.get(file.path)) !== null && _c !== void 0 ? _c : null;
            return formatFileDataForRender({
              app: plugin2.app,
              settings: plugin2.settings,
              fileId: id,
              file,
              fileFrontmatter: frontmatter,
              fileContent: content,
              fileFavorite: isFavorite
            });
          }));
        }
    }
    if ($$self.$$.dirty[0] & /*searchFilter*/
    1 | $$self.$$.dirty[1] & /*formatted*/
    8192) {
      $:
        $$invalidate(47, filteredSearch = formatted.filter((file) => {
          const { isEnabled, value } = searchFilter;
          if (isEnabled) {
            return filterBySearch(file, value);
          }
          return true;
        }));
    }
    if ($$self.$$.dirty[0] & /*favoritesFilter*/
    2 | $$self.$$.dirty[1] & /*filteredSearch*/
    65536) {
      $:
        $$invalidate(46, filteredFavorites = filteredSearch.filter((file) => {
          const { isEnabled, value } = favoritesFilter;
          if (isEnabled) {
            return filterByFavorites(file, value);
          }
          return true;
        }));
    }
    if ($$self.$$.dirty[0] & /*timestampFilter, startOfTodayMillis, startOfThisWeekMillis, startOfLastWeekMillis*/
    469762052 | $$self.$$.dirty[1] & /*filteredFavorites*/
    32768) {
      $:
        $$invalidate(45, filteredTimestamp = filteredFavorites.filter((file) => {
          const { modifiedMillis, createdMillis } = file;
          return filterByTimestamp({
            value: timestampFilter.value,
            createdMillis,
            modifiedMillis,
            startOfTodayMillis,
            startOfThisWeekMillis,
            startOfLastWeekMillis
          });
        }));
    }
    if ($$self.$$.dirty[0] & /*sortFilter*/
    8 | $$self.$$.dirty[1] & /*filteredTimestamp, randomSortCache*/
    16400) {
      $:
        $$invalidate(10, renderData = [...filteredTimestamp].sort((a, b) => {
          var _a, _b;
          const { value } = sortFilter;
          if (value === "file-name-asc") {
            return a.displayName.toLowerCase().localeCompare(b.displayName.toLowerCase());
          } else if (value === "file-name-desc") {
            return b.displayName.toLowerCase().localeCompare(a.displayName.toLowerCase());
          } else if (value === "modified-asc") {
            return a.modifiedMillis - b.modifiedMillis;
          } else if (value === "modified-desc") {
            return b.modifiedMillis - a.modifiedMillis;
          } else if (value === "random") {
            const sortKeyA = (_a = randomSortCache.get(a.path)) !== null && _a !== void 0 ? _a : 0;
            const sortKeyB = (_b = randomSortCache.get(b.path)) !== null && _b !== void 0 ? _b : 0;
            return sortKeyA - sortKeyB;
          }
          return 0;
        }));
    }
    if ($$self.$$.dirty[0] & /*searchFilter, sortFilter, timestampFilter, favoritesFilter, currentView, customFilter, viewOrder*/
    127 | $$self.$$.dirty[1] & /*dashboardView, listView, gridView, feedView, tableView, recommendedView, relatedView*/
    4064) {
      $:
        searchFilter, sortFilter, timestampFilter, favoritesFilter, currentView, customFilter, dashboardView, listView, gridView, feedView, tableView, recommendedView, relatedView, viewOrder, saveSettings();
    }
    if ($$self.$$.dirty[0] & /*renderData*/
    1024) {
      $:
        $$invalidate(12, totalItems = renderData.length);
    }
    if ($$self.$$.dirty[0] & /*totalItems, pageSize*/
    536875008) {
      $:
        $$invalidate(11, totalPages = Math.ceil(totalItems / pageSize));
    }
    if ($$self.$$.dirty[0] & /*totalPages, currentPage*/
    2176) {
      $:
        if (totalPages < currentPage) {
          $$invalidate(7, currentPage = 1);
        }
    }
    if ($$self.$$.dirty[0] & /*currentPage, pageSize*/
    536871040) {
      $:
        $$invalidate(9, startIndex = (currentPage - 1) * pageSize);
    }
    if ($$self.$$.dirty[0] & /*pageSize, renderData, startIndex*/
    536872448) {
      $:
        $$invalidate(8, pageLength = Math.min(pageSize, renderData.length - startIndex));
    }
    if ($$self.$$.dirty[0] & /*startIndex, pageLength*/
    768) {
      $:
        $$invalidate(13, endIndex = startIndex + pageLength);
    }
  };
  return [
    searchFilter,
    favoritesFilter,
    timestampFilter,
    sortFilter,
    customFilter,
    currentView,
    viewOrder,
    currentPage,
    pageLength,
    startIndex,
    renderData,
    totalPages,
    totalItems,
    endIndex,
    debounceSearchFilterChange,
    handleReshuffleClick,
    handleGroupClick,
    handleTimestampFilterChange,
    handleViewDrop,
    handleGroupDrop,
    handlePageChange,
    handleSortChange,
    handleFavoritesChange,
    handleFavoritePropertyChange,
    handleCustomFilterClick,
    plugin2,
    startOfTodayMillis,
    startOfThisWeekMillis,
    startOfLastWeekMillis,
    pageSize,
    frontmatterCacheTime,
    propertySettingsTime,
    loadedFiles,
    favoritesCache,
    contentCache,
    randomSortCache,
    dashboardView,
    listView,
    gridView,
    feedView,
    tableView,
    recommendedView,
    relatedView,
    filteredCustom,
    formatted,
    filteredTimestamp,
    filteredFavorites,
    filteredSearch,
    clear_handler,
    click_handler,
    dragstart_handler,
    drop_handler,
    func
  ];
}
var App2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance43, create_fragment45, safe_not_equal, {}, null, [-1, -1, -1]);
  }
};
var app_default = App2;

// src/obsidian/vault-explorer-view.ts
var VaultExplorerView = class extends import_obsidian15.ItemView {
  constructor(leaf, plugin2) {
    super(leaf);
    this.component = null;
    this.plugin = plugin2;
  }
  getIcon() {
    return "compass";
  }
  getViewType() {
    return VAULT_EXPLORER_VIEW;
  }
  getDisplayText() {
    return "Vault Explorer";
  }
  async onOpen() {
    this.addAction("settings", "Settings", () => {
      const app = this.plugin.app;
      app.setting.open();
      app.setting.openTabById(this.plugin.manifest.id);
    });
    const containerEl = this.containerEl.children[1];
    store_default.plugin.set(this.plugin);
    this.component = new app_default({
      target: containerEl
    });
  }
  async onClose() {
    var _a;
    (_a = this.component) == null ? void 0 : _a.$destroy();
  }
};

// src/obsidian/vault-explorer-settings-tab.ts
var import_obsidian16 = require("obsidian");
var import_js_logger13 = __toESM(require_logger());

// src/logger/index.ts
var import_js_logger12 = __toESM(require_logger());
var stringToLogLevel = (value) => {
  switch (value) {
    case LOG_LEVEL_OFF:
      return import_js_logger12.default.OFF;
    case LOG_LEVEL_ERROR:
      return import_js_logger12.default.ERROR;
    case LOG_LEVEL_WARN:
      return import_js_logger12.default.WARN;
    case LOG_LEVEL_INFO:
      return import_js_logger12.default.INFO;
    case LOG_LEVEL_DEBUG:
      return import_js_logger12.default.DEBUG;
    case LOG_LEVEL_TRACE:
      return import_js_logger12.default.TRACE;
    default:
      throw new Error(`Unhandled log level: ${value}`);
  }
};
var formatMessageForLogger = (...args) => {
  const head = args[0];
  const body = args[1];
  if (typeof args[0] == "object") {
    const headers = head;
    const { fileName, functionName, message } = headers;
    return { message: `[${fileName}:${functionName}] ${message}`, data: body };
  } else {
    return { message: String(head), data: body };
  }
};

// src/svelte/license-key-app/index.svelte
function create_if_block_35(ctx) {
  let premiumlink;
  let current;
  premiumlink = new premium_link_default({});
  return {
    c() {
      create_component(premiumlink.$$.fragment);
    },
    m(target, anchor) {
      mount_component(premiumlink, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(premiumlink.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(premiumlink.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(premiumlink, detaching);
    }
  };
}
function create_if_block_26(ctx) {
  var _a, _b;
  let div;
  let t_value = (
    /*message*/
    ((_b = (_a = ctx[0]) == null ? void 0 : _a.text) != null ? _b : "") + ""
  );
  let t;
  let div_class_value;
  return {
    c() {
      div = element("div");
      t = text(t_value);
      attr(div, "class", div_class_value = null_to_empty(
        /*messageClassName*/
        ctx[2]
      ) + " svelte-u01aqh");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, t);
    },
    p(ctx2, dirty) {
      var _a2, _b2;
      if (dirty & /*message*/
      1 && t_value !== (t_value = /*message*/
      ((_b2 = (_a2 = ctx2[0]) == null ? void 0 : _a2.text) != null ? _b2 : "") + ""))
        set_data(t, t_value);
      if (dirty & /*messageClassName*/
      4 && div_class_value !== (div_class_value = null_to_empty(
        /*messageClassName*/
        ctx2[2]
      ) + " svelte-u01aqh")) {
        attr(div, "class", div_class_value);
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_if_block_117(ctx) {
  let input;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "type", "text");
      attr(input, "maxlength", "8");
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = listen(
          input,
          "input",
          /*handleInputChange*/
          ctx[3]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(input);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_if_block21(ctx) {
  let button;
  let mounted;
  let dispose;
  return {
    c() {
      button = element("button");
      button.textContent = "Unregister device";
      attr(button, "class", "mod-destructive");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (!mounted) {
        dispose = listen(
          button,
          "click",
          /*handleButtonClick*/
          ctx[4]
        );
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(button);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment46(ctx) {
  let div4;
  let div2;
  let div0;
  let t1;
  let div1;
  let t3;
  let t4;
  let t5;
  let div3;
  let t6;
  let current;
  let if_block0 = (
    /*message*/
    ctx[0] == null && create_if_block_35(ctx)
  );
  let if_block1 = (
    /*message*/
    ctx[0] != null && create_if_block_26(ctx)
  );
  let if_block2 = (
    /*isDeviceRegistered*/
    ctx[1] === false && create_if_block_117(ctx)
  );
  let if_block3 = (
    /*isDeviceRegistered*/
    ctx[1] === true && create_if_block21(ctx)
  );
  return {
    c() {
      div4 = element("div");
      div2 = element("div");
      div0 = element("div");
      div0.textContent = "License key";
      t1 = space();
      div1 = element("div");
      div1.textContent = "Enter your license key to enable premium features.";
      t3 = space();
      if (if_block0)
        if_block0.c();
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      div3 = element("div");
      if (if_block2)
        if_block2.c();
      t6 = space();
      if (if_block3)
        if_block3.c();
      attr(div0, "class", "setting-item-name");
      attr(div1, "class", "setting-item-description");
      attr(div2, "class", "setting-item-info");
      attr(div3, "class", "setting-item-control");
      attr(div4, "class", "setting-item");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div2);
      append(div2, div0);
      append(div2, t1);
      append(div2, div1);
      append(div2, t3);
      if (if_block0)
        if_block0.m(div2, null);
      append(div2, t4);
      if (if_block1)
        if_block1.m(div2, null);
      append(div4, t5);
      append(div4, div3);
      if (if_block2)
        if_block2.m(div3, null);
      append(div3, t6);
      if (if_block3)
        if_block3.m(div3, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (
        /*message*/
        ctx2[0] == null
      ) {
        if (if_block0) {
          if (dirty & /*message*/
          1) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_35(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div2, t4);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (
        /*message*/
        ctx2[0] != null
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_26(ctx2);
          if_block1.c();
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*isDeviceRegistered*/
        ctx2[1] === false
      ) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block_117(ctx2);
          if_block2.c();
          if_block2.m(div3, t6);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (
        /*isDeviceRegistered*/
        ctx2[1] === true
      ) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
        } else {
          if_block3 = create_if_block21(ctx2);
          if_block3.c();
          if_block3.m(div3, null);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      current = false;
    },
    d(detaching) {
      if (detaching) {
        detach(div4);
      }
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
    }
  };
}
function getMessageClassName(message) {
  let className = "vault-explorer-setting-message";
  if (message !== null) {
    const { type } = message;
    if (type === "success") {
      className += " vault-explorer-setting-message--success";
    } else if (type === "failure") {
      className += " vault-explorer-setting-message--failure";
    }
  }
  return className;
}
function instance44($$self, $$props, $$invalidate) {
  let messageClassName;
  let isDeviceRegistered = false;
  let message = null;
  onMount(() => {
    const registered = License.getInstance().getIsDeviceRegistered();
    if (registered) {
      $$invalidate(0, message = {
        type: "success",
        text: "This device is registered with a license key."
      });
    }
    $$invalidate(1, isDeviceRegistered = registered);
  });
  function handleInputChange(e) {
    return __awaiter(this, void 0, void 0, function* () {
      const value = e.target.value;
      if (value.length === LICENSE_KEY_LENGTH) {
        $$invalidate(0, message = {
          type: "info",
          text: "Registering device..."
        });
        const result = yield License.getInstance().registerDevice(value);
        const responseMessage = License.getInstance().getResponseMessage();
        if (result) {
          $$invalidate(1, isDeviceRegistered = true);
          $$invalidate(0, message = { type: "success", text: responseMessage });
          EventManager.getInstance().emit("device-registration-change" /* DEVICE_REGISTRATION_CHANGE */, true);
        } else {
          $$invalidate(0, message = { type: "failure", text: responseMessage });
        }
      } else {
        $$invalidate(0, message = null);
      }
    });
  }
  function handleButtonClick() {
    return __awaiter(this, void 0, void 0, function* () {
      const result = yield License.getInstance().unregisterDevice();
      if (result) {
        $$invalidate(1, isDeviceRegistered = false);
        $$invalidate(0, message = null);
        EventManager.getInstance().emit("device-registration-change" /* DEVICE_REGISTRATION_CHANGE */, false);
      } else {
        const responseMessage = License.getInstance().getResponseMessage();
        $$invalidate(0, message = { type: "failure", text: responseMessage });
      }
    });
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*message*/
    1) {
      $:
        $$invalidate(2, messageClassName = getMessageClassName(message));
    }
  };
  return [
    message,
    isDeviceRegistered,
    messageClassName,
    handleInputChange,
    handleButtonClick
  ];
}
var License_key_app = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance44, create_fragment46, safe_not_equal, {});
  }
};
var license_key_app_default = License_key_app;

// src/obsidian/vault-explorer-settings-tab.ts
var VaultExplorerSettingsTab = class extends import_obsidian16.PluginSettingTab {
  constructor(app, plugin2) {
    super(app, plugin2);
    this.renderLoadSocialMediaImageSetting = (...data) => {
      const isDeviceRegistered = data[0];
      if (!this.socialMediaImageSetting) {
        throw new Error("socialMediaImageSetting is null");
      }
      this.socialMediaImageSetting.clear();
      const loadSocialMediaDesc = new DocumentFragment();
      loadSocialMediaDesc.createDiv({
        text: "When a markdown file has a URL property and no image URL property, load the social media image of the URL and use it as the card image."
      });
      if (!isDeviceRegistered) {
        loadSocialMediaDesc.createDiv({
          text: "This feature requires a premium license.",
          cls: "vault-explorer-premium-setting"
        });
      }
      this.socialMediaImageSetting.setName("Load social media image for url").setDesc(loadSocialMediaDesc).addToggle(
        (toggle) => toggle.setDisabled(!isDeviceRegistered).setValue(
          this.plugin.settings.views.grid.loadSocialMediaImage
        ).onChange(async (value) => {
          this.plugin.settings.views.grid.loadSocialMediaImage = value;
          await this.plugin.saveSettings();
          EventManager.getInstance().emit(
            "load-social-media-image-setting-change" /* LOAD_SOCIAL_MEDIA_IMAGE_SETTING_CHANGE */
          );
        })
      );
    };
    this.plugin = plugin2;
    this.component = null;
    this.socialMediaImageSetting = null;
  }
  display() {
    this.setupEventListeners();
    const { containerEl } = this;
    containerEl.empty();
    const textProperties = getObsidianPropertiesByType(this.app, "text");
    const dateProperties = getObsidianPropertiesByType(this.app, "date");
    const dateTimeProperties = getObsidianPropertiesByType(
      this.app,
      "datetime"
    );
    const checkboxProperties = getObsidianPropertiesByType(
      this.app,
      "checkbox"
    );
    new import_obsidian16.Setting(containerEl).setName("General").setHeading();
    new import_obsidian16.Setting(containerEl).setName("File interaction").setDesc("Set how a file should be interacted with.").addDropdown((cb) => {
      cb.addOptions({
        content: "Click on content",
        title: "Click on title"
      });
      cb.setValue(this.plugin.settings.fileInteractionStyle).onChange(
        async (value) => {
          this.plugin.settings.fileInteractionStyle = value;
          await this.plugin.saveSettings();
          EventManager.getInstance().emit(
            "file-interaction-style-setting-change" /* FILE_INTERACTION_STYLE */
          );
        }
      );
    });
    new import_obsidian16.Setting(containerEl).setName("Filter groups wrapping").setDesc("Set the wrapping style for filter groups.").addDropdown((cb) => {
      cb.addOptions({
        wrap: "Wrap",
        nowrap: "No Wrap"
      });
      cb.setValue(this.plugin.settings.filterGroupsWrapping).onChange(
        async (value) => {
          this.plugin.settings.filterGroupsWrapping = value;
          await this.plugin.saveSettings();
          EventManager.getInstance().emit(
            "filter-groups-wrapping-setting-change" /* FILTER_GROUPS_WRAPPING_SETTING_CHANGE */
          );
        }
      );
    });
    new import_obsidian16.Setting(containerEl).setName("File icons").setDesc("Display an icon next to the file name.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableFileIcons).onChange(async (value) => {
        this.plugin.settings.enableFileIcons = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "file-icons-setting-change" /* FILE_ICONS_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Page size").setDesc("Number of items to display per page.").addDropdown(
      (dropdown) => dropdown.addOptions({
        "10": "10",
        "25": "25",
        "50": "50",
        "100": "100",
        "250": "250",
        "500": "500"
      }).setValue(this.plugin.settings.pageSize.toString()).onChange(async (value) => {
        this.plugin.settings.pageSize = parseInt(value);
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "page-size-setting-change" /* PAGE_SIZE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Filters").setHeading();
    new import_obsidian16.Setting(containerEl).setName("Search filter").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.filters.search.isEnabled).onChange(async (value) => {
        this.plugin.settings.filters.search.isEnabled = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "filter-toggle-setting-change" /* FILTER_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Favorites filter").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.filters.favorites.isEnabled).onChange(async (value) => {
        this.plugin.settings.filters.favorites.isEnabled = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "filter-toggle-setting-change" /* FILTER_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Timestamp filter").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.filters.timestamp.isEnabled).onChange(async (value) => {
        this.plugin.settings.filters.timestamp.isEnabled = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "filter-toggle-setting-change" /* FILTER_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Sort filter").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.filters.sort.isEnabled).onChange(async (value) => {
        this.plugin.settings.filters.sort.isEnabled = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "filter-toggle-setting-change" /* FILTER_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Custom filter").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.filters.custom.isEnabled).onChange(async (value) => {
        this.plugin.settings.filters.custom.isEnabled = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "filter-toggle-setting-change" /* FILTER_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Views").setHeading();
    new import_obsidian16.Setting(containerEl).setName("Dashboard view").addToggle(
      (toggle) => toggle.setDisabled(true).setValue(this.plugin.settings.views.dashboard.isEnabled).onChange(async (value) => {
        this.plugin.settings.views.dashboard.isEnabled = value;
        this.updateViewOrder("dashboard" /* DASHBOARD */, value);
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "view-toggle-setting-change" /* VIEW_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Grid view").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.views.grid.isEnabled).onChange(async (value) => {
        this.plugin.settings.views.grid.isEnabled = value;
        this.updateViewOrder("grid" /* GRID */, value);
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "view-toggle-setting-change" /* VIEW_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("List view").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.views.list.isEnabled).onChange(async (value) => {
        this.plugin.settings.views.list.isEnabled = value;
        this.updateViewOrder("list" /* LIST */, value);
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "view-toggle-setting-change" /* VIEW_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Feed view").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.views.feed.isEnabled).onChange(async (value) => {
        this.plugin.settings.views.feed.isEnabled = value;
        this.updateViewOrder("feed" /* FEED */, value);
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "view-toggle-setting-change" /* VIEW_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Table view").addToggle(
      (toggle) => toggle.setDisabled(true).setTooltip("This view is not yet implemented.").setValue(this.plugin.settings.views.table.isEnabled).onChange(async (value) => {
        this.plugin.settings.views.table.isEnabled = value;
        this.updateViewOrder("table" /* TABLE */, value);
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "view-toggle-setting-change" /* VIEW_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Recommended view").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.views.recommended.isEnabled).setDisabled(true).setTooltip("This view is not yet implemented.").onChange(async (value) => {
        this.plugin.settings.views.recommended.isEnabled = value;
        this.updateViewOrder("recommended" /* RECOMMENDED */, value);
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "view-toggle-setting-change" /* VIEW_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Related view").addToggle(
      (toggle) => toggle.setDisabled(true).setTooltip("This view is not yet implemented.").setValue(this.plugin.settings.views.related.isEnabled).onChange(async (value) => {
        this.plugin.settings.views.related.isEnabled = value;
        this.updateViewOrder("related" /* RELATED */, value);
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "view-toggle-setting-change" /* VIEW_TOGGLE_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Grid view").setHeading();
    this.socialMediaImageSetting = new import_obsidian16.Setting(containerEl);
    this.renderLoadSocialMediaImageSetting(
      License.getInstance().getIsDeviceRegistered()
    );
    new import_obsidian16.Setting(containerEl).setName("Feed view").setHeading();
    new import_obsidian16.Setting(containerEl).setName("Remove H1").setDesc("Remove level 1 headers from feed content").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.views.feed.removeH1).onChange(async (value) => {
        this.plugin.settings.views.feed.removeH1 = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "feed-content-setting-change" /* FEED_CONTENT_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Collapse style").setDesc("Set the collapse style for feed content").addDropdown(
      (cb) => cb.addOptions({
        "no-new-lines": "No new lines",
        "no-extra-new-lines": "No extra new lines"
      }).setValue(this.plugin.settings.views.feed.collapseStyle).onChange(async (value) => {
        this.plugin.settings.views.feed.collapseStyle = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "feed-content-setting-change" /* FEED_CONTENT_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Large screen line clamp").setDesc(
      "Number of lines to clamp on large screens (>= 1024px). (2-8, default 5)"
    ).addSlider(
      (component) => component.setValue(this.plugin.settings.views.feed.lineClampLarge).setLimits(2, 8, 1).onChange(async (value) => {
        this.plugin.settings.views.feed.lineClampLarge = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "feed-content-setting-change" /* FEED_CONTENT_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Medium screen line clamp").setDesc(
      "Number of lines to clamp on medium screens (>= 600px and < 1024px). (2-8, default 3)"
    ).addSlider(
      (component) => component.setValue(this.plugin.settings.views.feed.lineClampMedium).setLimits(2, 8, 1).onChange(async (value) => {
        this.plugin.settings.views.feed.lineClampMedium = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "feed-content-setting-change" /* FEED_CONTENT_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Small screen line clamp").setDesc(
      "Number of lines to clamp on small screens (< 600px). (2-8, default 2)"
    ).addSlider(
      (component) => component.setValue(this.plugin.settings.views.feed.lineClampSmall).setLimits(2, 8, 1).onChange(async (value) => {
        this.plugin.settings.views.feed.lineClampSmall = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "feed-content-setting-change" /* FEED_CONTENT_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Built-in properties").setHeading();
    new import_obsidian16.Setting(containerEl).setName("Favorite property").setDesc(
      "Property used to mark a note as a favorite. This must be a checkbox property."
    ).addDropdown(
      (dropdown) => dropdown.addOptions(
        getDropdownOptionsForProperties(checkboxProperties)
      ).setValue(this.plugin.settings.properties.favorite).onChange(async (value) => {
        this.plugin.settings.properties.favorite = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "property-setting-change" /* PROPERTY_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("URL property").setDesc(
      "Property used to store a URL. This must be a text property."
    ).addDropdown(
      (dropdown) => dropdown.addOptions(getDropdownOptionsForProperties(textProperties)).setValue(this.plugin.settings.properties.url).onChange(async (value) => {
        this.plugin.settings.properties.url = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "property-setting-change" /* PROPERTY_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Image URL property").setDesc(
      "Property used to store an image url. This must be a text property."
    ).addDropdown(
      (dropdown) => dropdown.addOptions(getDropdownOptionsForProperties(textProperties)).setValue(this.plugin.settings.properties.imageUrl).onChange(async (value) => {
        this.plugin.settings.properties.imageUrl = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "property-setting-change" /* PROPERTY_SETTING_CHANGE */
        );
      })
    );
    const creationDateDesc = new DocumentFragment();
    creationDateDesc.createDiv({
      text: "Property used to store a creation date. This must be a date or datetime property."
    });
    creationDateDesc.createDiv({
      text: "If set to 'Select a property', the file's created at date will be used."
    });
    new import_obsidian16.Setting(containerEl).setName("Creation date property").setDesc(creationDateDesc).addDropdown(
      (dropdown) => dropdown.addOptions(
        getDropdownOptionsForProperties([
          ...dateProperties,
          ...dateTimeProperties
        ])
      ).setValue(this.plugin.settings.properties.createdDate).onChange(async (value) => {
        this.plugin.settings.properties.createdDate = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "property-setting-change" /* PROPERTY_SETTING_CHANGE */
        );
      })
    );
    const modificationDateDesc = new DocumentFragment();
    modificationDateDesc.createDiv({
      text: "Property used to store a modification date. This must be a date or datetime property."
    });
    modificationDateDesc.createDiv({
      text: "If set to 'Select a property', the file's modified at date will be used."
    });
    new import_obsidian16.Setting(containerEl).setName("Modification date property").setDesc(modificationDateDesc).addDropdown(
      (dropdown) => dropdown.addOptions(
        getDropdownOptionsForProperties([
          ...dateProperties,
          ...dateTimeProperties
        ])
      ).setValue(this.plugin.settings.properties.modifiedDate).onChange(async (value) => {
        this.plugin.settings.properties.modifiedDate = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "property-setting-change" /* PROPERTY_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Custom properties").setHeading();
    new import_obsidian16.Setting(containerEl).setName("Custom property 1").setDesc("First custom property. This must be a text property.").addDropdown(
      (dropdown) => dropdown.addOptions(getDropdownOptionsForProperties(textProperties)).setValue(this.plugin.settings.properties.custom1).onChange(async (value) => {
        this.plugin.settings.properties.custom1 = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "property-setting-change" /* PROPERTY_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Custom property 2").setDesc("Second custom property. This must be a text property.").addDropdown(
      (dropdown) => dropdown.addOptions(getDropdownOptionsForProperties(textProperties)).setValue(this.plugin.settings.properties.custom2).onChange(async (value) => {
        this.plugin.settings.properties.custom2 = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "property-setting-change" /* PROPERTY_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Custom property 3").setDesc("Third custom property. This must be a text property.").addDropdown(
      (dropdown) => dropdown.addOptions(getDropdownOptionsForProperties(textProperties)).setValue(this.plugin.settings.properties.custom3).onChange(async (value) => {
        this.plugin.settings.properties.custom3 = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "property-setting-change" /* PROPERTY_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Updates").setHeading();
    new import_obsidian16.Setting(containerEl).setName("Clock updates").setDesc(
      "Update time values every minute. This will refresh the Vault Explorer view"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableClockUpdates).onChange(async (value) => {
        this.plugin.settings.enableClockUpdates = value;
        await this.plugin.saveSettings();
        EventManager.getInstance().emit(
          "clock-updates-setting-change" /* CLOCK_UPDATES_SETTING_CHANGE */
        );
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Premium").setHeading();
    this.component = new license_key_app_default({
      target: containerEl
    });
    new import_obsidian16.Setting(containerEl).setName("Storage").setHeading();
    const configFolderDesc = new DocumentFragment();
    configFolderDesc.createDiv({
      text: "Set the plugin configuration folder."
    });
    configFolderDesc.createDiv({
      text: "Restart Obsidian after changing this setting.",
      cls: "mod-warning"
    });
    new import_obsidian16.Setting(containerEl).setName("Config folder").setDesc(configFolderDesc).addText(
      (component) => component.setValue(this.plugin.settings.configDir).onChange(async (value) => {
        this.plugin.settings.configDir = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian16.Setting(containerEl).setName("Debugging").setHeading();
    new import_obsidian16.Setting(containerEl).setName("Log level").setDesc(
      "Set the log level. Please use trace to see all log messages."
    ).addDropdown((cb) => {
      cb.addOptions({
        [LOG_LEVEL_OFF]: "Off",
        [LOG_LEVEL_ERROR]: "Error",
        [LOG_LEVEL_WARN]: "Warn",
        [LOG_LEVEL_INFO]: "Info",
        [LOG_LEVEL_DEBUG]: "Debug",
        [LOG_LEVEL_TRACE]: "Trace"
      });
      cb.setValue(this.plugin.settings.logLevel).onChange(
        async (value) => {
          this.plugin.settings.logLevel = value;
          await this.plugin.saveSettings();
          import_js_logger13.default.setLevel(stringToLogLevel(value));
        }
      );
    });
  }
  onClose() {
    var _a;
    (_a = this.component) == null ? void 0 : _a.$destroy();
    EventManager.getInstance().off(
      "device-registration-change" /* DEVICE_REGISTRATION_CHANGE */,
      this.renderLoadSocialMediaImageSetting
    );
  }
  setupEventListeners() {
    EventManager.getInstance().on(
      "device-registration-change" /* DEVICE_REGISTRATION_CHANGE */,
      this.renderLoadSocialMediaImageSetting
    );
  }
  updateViewOrder(view, value) {
    if (value) {
      this.plugin.settings.viewOrder.push(view);
      if (this.plugin.settings.currentView == null)
        this.plugin.settings.currentView = view;
    } else {
      const filtered = this.plugin.settings.viewOrder.filter(
        (v) => v !== view
      );
      this.plugin.settings.viewOrder = filtered;
      if (filtered.length > 0) {
        this.plugin.settings.currentView = filtered[0];
      } else {
        this.plugin.settings.currentView = null;
      }
    }
  }
};

// src/migrations/migrate_0_4_0.ts
var Migrate_0_4_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      filters: {
        ...typedData.filters,
        properties: {
          ...typedData.filters.properties,
          groups: []
        }
      }
    };
    return newData;
  }
};

// src/migrations/migrate_1_1_0.ts
var Migrate_1_1_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      views: {
        currentView: typedData.currentView,
        order: ["grid" /* GRID */, "list" /* LIST */]
      }
    };
    return newData;
  }
};

// src/migrations/migrate_1_0_0.ts
var Migrate_1_0_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      logLevel: LOG_LEVEL_WARN,
      filters: {
        ...typedData.filters,
        properties: {
          ...typedData.filters.properties,
          groups: typedData.filters.properties.groups.map((group) => {
            const { id, name, filters, isEnabled } = group;
            return {
              id,
              name,
              filters,
              isEnabled
            };
          })
        }
      }
    };
    return newData;
  }
};

// src/migrations/migrate_1_2_1.ts
var Migrate_1_2_1 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      views: {
        ...typedData.views,
        titleWrapping: "normal"
      }
    };
    return newData;
  }
};

// src/migrations/migrate_1_3_0.ts
var Migrate_1_3_0 = class {
  migrate(data) {
    const typedData = data;
    const groups = typedData.filters.properties.groups;
    const updatedGroups = groups.map((group) => {
      const updatedFilters = group.filters.map((filter) => {
        return {
          ...filter,
          type: filter.type,
          matchWhenPropertyDNE: false
        };
      });
      return {
        ...group,
        filters: updatedFilters
      };
    });
    const newData = {
      ...typedData,
      filters: {
        ...typedData.filters,
        properties: {
          ...typedData.filters.properties,
          groups: updatedGroups
        }
      }
    };
    return newData;
  }
};

// src/migrations/migrate_1_6_0.ts
var Migrate_1_6_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      properties: {
        ...typedData.properties,
        creationDate: "",
        modifiedDate: ""
      }
    };
    return newData;
  }
};

// src/migrations/migrate_1_6_1.ts
var Migrate_1_6_1 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      properties: {
        ...typedData.properties,
        createdDate: "",
        modifiedDate: ""
      }
    };
    delete newData.properties.creationDate;
    return newData;
  }
};

// src/migrations/migrate_1_9_0.ts
var Migrate_1_9_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      filters: {
        ...typedData.filters,
        custom: {
          selectedGroupId: typedData.filters.properties.selectedGroupId,
          groups: typedData.filters.properties.groups.map((group) => {
            const rules = group.filters.map((filter) => {
              return {
                ...filter,
                valueData: "",
                type: filter.type
              };
            });
            return {
              ...group,
              rules
            };
          })
        }
      }
    };
    delete newData.filters.properties;
    for (const group of newData.filters.custom.groups) {
      delete group.filters;
    }
    return newData;
  }
};

// src/migrations/migrate_1_14_0.ts
var Migrate_1_14_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      filters: {
        ...typedData.filters,
        search: {
          isEnabled: true,
          value: typedData.filters.search
        },
        favorites: {
          isEnabled: true,
          value: typedData.filters.onlyFavorites
        },
        timestamp: {
          isEnabled: true,
          value: typedData.filters.timestamp
        },
        sort: {
          isEnabled: true,
          value: typedData.filters.sort
        },
        custom: {
          isEnabled: true,
          ...typedData.filters.custom
        }
      },
      enableScrollButtons: true
    };
    delete newData.filters.onlyFavorites;
    return newData;
  }
};

// src/migrations/migrate_1_15_0.ts
var Migrate_1_15_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      views: {
        ...typedData.views,
        order: [...typedData.views.order, "feed" /* FEED */]
      }
    };
    return newData;
  }
};

// src/migrations/migrate_1_17_0.ts
var Migrate_1_17_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      views: {
        dashboard: {
          isEnabled: false
        },
        grid: {
          isEnabled: true
        },
        list: {
          isEnabled: true
        },
        table: {
          isEnabled: false
        },
        feed: {
          isEnabled: true
        },
        recommended: {
          isEnabled: false
        },
        related: {
          isEnabled: false
        }
      },
      viewOrder: typedData.views.order,
      enableClockUpdates: typedData.views.enableClockUpdates,
      currentView: typedData.views.currentView,
      titleWrapping: typedData.views.titleWrapping
    };
    delete newData.views.order;
    delete newData.views.currentView;
    delete newData.views.enableClockUpdates;
    delete newData.views.titleWrapping;
    return newData;
  }
};

// src/migrations/migrate_1_13_0.ts
var Migrate_1_13_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      views: {
        ...typedData.views,
        enableClockUpdates: true
      },
      filters: {
        ...typedData.filters,
        custom: {
          ...typedData.filters.custom,
          groups: typedData.filters.custom.groups.map((group) => {
            return {
              ...group,
              isSticky: false
            };
          })
        }
      }
    };
    return newData;
  }
};

// src/migrations/migrate_1_10_0.ts
var Migrate_1_10_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      filters: {
        ...typedData.filters,
        custom: {
          ...typedData.filters.custom,
          groups: typedData.filters.custom.groups.map((group) => {
            const rules = group.rules.map((rule) => {
              return {
                ...rule,
                type: "property" /* PROPERTY */,
                propertyType: rule.type
              };
            });
            return {
              ...group,
              rules
            };
          })
        }
      }
    };
    delete newData.filters.folder;
    delete newData.filters.properties;
    for (const group of newData.filters.custom.groups) {
      delete group.filters;
    }
    return newData;
  }
};

// src/migrations/migrate_1_21_0.ts
var Migrate_1_21_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      enableFileIcons: true
    };
    return newData;
  }
};

// src/migrations/migrate_1_22_0.ts
var Migrate_1_22_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      properties: {
        ...typedData.properties,
        imageUrl: ""
      },
      filterGroupsWidth: 300,
      filterGroupsWrapping: "nowrap"
    };
    return newData;
  }
};

// src/migrations/migrate_1_23_0.ts
var Migrate_1_23_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      views: {
        ...typedData.views,
        grid: {
          ...typedData.views.grid,
          fetchSocialMediaImage: false
        }
      }
    };
    return newData;
  }
};

// src/migrations/migrate_1_23_1.ts
var Migrate_1_23_1 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      filterGroupsWidth: "100%"
    };
    return newData;
  }
};

// src/migrations/migrate_1_24_0.ts
var Migrate_1_24_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      views: {
        ...typedData.views,
        grid: {
          ...typedData.views.grid,
          loadSocialMediaImage: typedData.views.grid.fetchSocialMediaImage
        },
        feed: {
          ...typedData.views.feed,
          collapseContent: true
        }
      }
    };
    delete newData.views.grid.fetchSocialMediaImage;
    return newData;
  }
};

// src/migrations/migrate_1_25_0.ts
var Migrate_1_25_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      fileInteractionStyle: "content"
    };
    return newData;
  }
};

// src/migrations/migrate_1_26_0.ts
var Migrate_1_26_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      configDir: ".vaultexplorer"
    };
    return newData;
  }
};

// src/utils.ts
var isVersionLessThan = (oldVersion, newVersion) => {
  const oldVersionArray = oldVersion.split(".");
  const newVersionArray = newVersion.split(".");
  for (let i = 0; i < oldVersionArray.length; i++) {
    const oldVersionNumber = parseInt(oldVersionArray[i]);
    const newVersionNumber = parseInt(newVersionArray[i]);
    if (oldVersionNumber < newVersionNumber) {
      return true;
    }
    if (oldVersionNumber > newVersionNumber) {
      return false;
    }
  }
  return false;
};

// src/migrations/migrate_1_27_0.ts
var Migrate_1_27_0 = class {
  migrate(data) {
    const typedData = data;
    const newData = {
      ...typedData,
      views: {
        ...typedData.views,
        feed: {
          ...typedData.views.feed,
          removeH1: true,
          collapseStyle: "no-new-lines",
          lineClampLarge: 5,
          lineClampMedium: 3,
          lineClampSmall: 2
        }
      }
    };
    delete newData.views.feed.collapseContent;
    return newData;
  }
};

// src/migrations/index.ts
var migrations = [
  {
    from: "0.3.3",
    to: "0.4.0",
    migrate: Migrate_0_4_0
  },
  {
    from: "0.5.5",
    to: "1.0.0",
    migrate: Migrate_1_0_0
  },
  {
    from: "1.0.1",
    to: "1.1.0",
    migrate: Migrate_1_1_0
  },
  {
    from: "1.2.0",
    to: "1.2.1",
    migrate: Migrate_1_2_1
  },
  {
    from: "1.2.1",
    to: "1.3.0",
    migrate: Migrate_1_3_0
  },
  {
    from: "1.5.0",
    to: "1.6.0",
    migrate: Migrate_1_6_0
  },
  {
    from: "1.6.0",
    to: "1.6.1",
    migrate: Migrate_1_6_1
  },
  {
    from: "1.8.1",
    to: "1.9.0",
    migrate: Migrate_1_9_0
  },
  {
    from: "1.9.1",
    to: "1.10.0",
    migrate: Migrate_1_10_0
  },
  {
    from: "1.12.1",
    to: "1.13.0",
    migrate: Migrate_1_13_0
  },
  {
    from: "1.13.1",
    to: "1.14.0",
    migrate: Migrate_1_14_0
  },
  {
    from: "1.14.2",
    to: "1.15.0",
    migrate: Migrate_1_15_0
  },
  {
    from: "1.16.0",
    to: "1.17.0",
    migrate: Migrate_1_17_0
  },
  {
    from: "1.20.0",
    to: "1.21.0",
    migrate: Migrate_1_21_0
  },
  {
    from: "1.21.2",
    to: "1.22.0",
    migrate: Migrate_1_22_0
  },
  {
    from: "1.22.0",
    to: "1.23.0",
    migrate: Migrate_1_23_0
  },
  {
    from: "1.23.0",
    to: "1.23.1",
    migrate: Migrate_1_23_1
  },
  {
    from: "1.23.2",
    to: "1.24.0",
    migrate: Migrate_1_24_0
  },
  {
    from: "1.24.2",
    to: "1.25.0",
    migrate: Migrate_1_25_0
  },
  {
    from: "1.25.2",
    to: "1.26.0",
    migrate: Migrate_1_26_0
  },
  {
    from: "1.26.3",
    to: "1.27.0",
    migrate: Migrate_1_27_0
  }
];
var preformMigrations = (settingsVersion, data) => {
  let updatedData = structuredClone(data);
  for (const migration of migrations) {
    const { from, to } = migration;
    if (isVersionLessThan(settingsVersion, to)) {
      console.log(`Upgrading settings from version ${from} to ${to}`);
      const migrator = new migration.migrate();
      const newData = migrator.migrate(updatedData);
      updatedData = newData;
    }
  }
  return updatedData;
};

// src/main.ts
var import_js_logger14 = __toESM(require_logger());

// src/focus-utils.ts
var moveFocus = (direction) => {
  const focusedEl = document.activeElement;
  if (focusedEl instanceof HTMLElement) {
    const rootEl = focusedEl.closest(".vault-explorer, .vault-explorer-property-filter-app");
    if (!rootEl)
      return;
    const inputEls = rootEl.querySelectorAll('a, button, input, select, textarea, [role="button"], [role="link"]');
    const focusableEls = Array.from(inputEls).filter(isElementTabble);
    const currentIndex = focusableEls.indexOf(focusedEl);
    const newIndex = direction === "previous" ? currentIndex - 1 : currentIndex + 1;
    if (newIndex >= 0 && newIndex < focusableEls.length) {
      focusableEls[newIndex].focus();
    } else if (newIndex > focusableEls.length - 1) {
      focusableEls[0].focus();
    } else if (newIndex < 0) {
      focusableEls[focusableEls.length - 1].focus();
    }
  }
  function isElementTabble(element2) {
    return element2.getAttribute("disabled") == null && element2.getAttribute("tabindex") !== "-1";
  }
};

// src/main.ts
var VaultExplorerPlugin = class extends import_obsidian17.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.layoutReady = false;
  }
  async onload() {
    await this.loadSettings();
    this.setupLogger();
    this.registerView(
      VAULT_EXPLORER_VIEW,
      (leaf) => new VaultExplorerView(leaf, this)
    );
    this.addRibbonIcon("compass", "Open vault explorer", async () => {
      this.openVaultExplorerView();
    });
    this.addCommand({
      id: "open",
      name: "Open vault explorer view",
      callback: async () => {
        this.openVaultExplorerView();
      }
    });
    this.registerEvents();
    this.registerHoverLinkSource(HOVER_LINK_SOURCE_ID, {
      display: this.manifest.name,
      defaultMod: true
    });
    this.addSettingTab(new VaultExplorerSettingsTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.layoutReady = true;
    });
    await loadDeviceId();
    await License.getInstance().verifyLicense();
  }
  registerEvents() {
    this.registerEvent(
      this.app.vault.on(
        "rename",
        (file, oldPath) => {
          if (file instanceof import_obsidian17.TFolder) {
            EventManager.getInstance().emit(
              "folder-rename" /* FOLDER_RENAME */,
              oldPath,
              file
            );
          } else if (file instanceof import_obsidian17.TFile) {
            EventManager.getInstance().emit(
              "file-rename" /* FILE_RENAME */,
              oldPath,
              file
            );
          }
        }
      )
    );
    this.registerEvent(
      this.app.vault.on("delete", (file) => {
        if (file instanceof import_obsidian17.TFolder) {
          EventManager.getInstance().emit(
            "folder-delete" /* FOLDER_DELETE */,
            file.path
          );
        } else if (file instanceof import_obsidian17.TFile) {
          EventManager.getInstance().emit(
            "file-delete" /* FILE_DELETE */,
            file.path
          );
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (!this.layoutReady)
          return;
        if (file instanceof import_obsidian17.TFolder) {
          EventManager.getInstance().emit(
            "folder-create" /* FOLDER_CREATE */,
            file
          );
        } else if (file instanceof import_obsidian17.TFile) {
          EventManager.getInstance().emit(
            "file-create" /* FILE_CREATE */,
            file
          );
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file instanceof import_obsidian17.TFile) {
          if (file.extension !== "md")
            return;
          EventManager.getInstance().emit(
            "file-modify" /* FILE_MODIFY */,
            file
          );
        }
      })
    );
    this.registerEvent(
      this.app.metadataCache.on("changed", (file) => {
        if (file.extension !== "md")
          return;
        EventManager.getInstance().emit(
          "metadata-change" /* METADATA_CHANGE */,
          file
        );
      })
    );
    this.registerDomEvent(document, "keydown", (event) => {
      if (event.key === "ArrowLeft") {
        moveFocus("previous");
      } else if (event.key === "ArrowRight") {
        moveFocus("next");
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    var _a;
    const loadedData = await this.loadData();
    let currentData = {};
    if (loadedData !== null) {
      const loadedVersion = (_a = loadedData["pluginVersion"]) != null ? _a : null;
      if (loadedVersion !== null) {
        const newData = preformMigrations(loadedVersion, loadedData);
        currentData = newData;
      }
    }
    this.settings = Object.assign({}, DEFAULT_SETTINGS, currentData);
    this.settings.pluginVersion = this.manifest.version;
    await this.saveSettings();
  }
  async saveSettings() {
    import_js_logger14.default.trace({
      fileName: "main.ts",
      functionName: "saveSettings",
      message: "called"
    });
    import_js_logger14.default.debug(
      {
        fileName: "main.ts",
        functionName: "saveSettings",
        message: "saving settings"
      },
      this.settings
    );
    await this.saveData(this.settings);
  }
  openVaultExplorerView() {
    const leaves = this.app.workspace.getLeavesOfType(VAULT_EXPLORER_VIEW);
    if (leaves.length !== 0) {
      const leaf = leaves[0];
      this.app.workspace.revealLeaf(leaf);
    } else {
      this.app.workspace.getLeaf().setViewState({
        type: VAULT_EXPLORER_VIEW,
        active: true
      });
    }
  }
  setupLogger() {
    import_js_logger14.default.useDefaults();
    import_js_logger14.default.setHandler(function(messages, context) {
      const { message, data } = formatMessageForLogger(...messages);
      if (context.level === import_js_logger14.default.WARN) {
        console.warn(message);
        if (data) {
          console.warn(data);
        }
      } else if (context.level === import_js_logger14.default.ERROR) {
        console.error(message);
        if (data) {
          console.error(data);
        }
      } else {
        console.log(message);
        if (data) {
          console.log(data);
        }
      }
    });
    const logLevel = stringToLogLevel(this.settings.logLevel);
    import_js_logger14.default.setLevel(logLevel);
  }
};
/*! Bundled license information:

js-logger/src/logger.js:
  (*!
   * js-logger - http://github.com/jonnyreeves/js-logger
   * Jonny Reeves, http://jonnyreeves.co.uk/
   * js-logger may be freely distributed under the MIT license.
   *)

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
